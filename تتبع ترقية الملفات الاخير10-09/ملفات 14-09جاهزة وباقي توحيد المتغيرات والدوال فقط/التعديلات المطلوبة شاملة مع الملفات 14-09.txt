في صفحات التطبيق المرفقه يوجد لدي الكثير من التوال والمتغيرات المتكرره والمتعارضه قمت بانشاء ملف
; purchases_alamin5-copy5\src\utils\calculation.ts
بغرض توحيد الدوال الحسابيه 

والمطلوب


اريد مراجعة وفحص دقيق لأكواد صفحات التطبيق التالية لاخباري بالنقاط التالية

1- التأكد من أن ملف calculation
 سوف يحل جميع المتغيرات و الدوال المتكررة او متعارضة على سبيل المثال لا الحصر الحقول التالي
- إجمالي مبلغ العرض(بعملة العرض)
- إجمالي مبلغ العرض
(بعد الضرائب) (بعملة العرض)
- المعادل بالريال اليمني(لإجمالي مبلغ العرض بعد الضريبة*سعر الصرف)
- إجمالي مبلغ الكميات المرسى عليها (بعد الضريبة)(بعملة العرض)
- المبلغ (رقماً باجمالي مبلغ المورد المرسى عليه بعملة العرض)
- المبلغ (كتابة باجمالي مبلغ المورد المرسى عليه بعملة العرض)
- إجمالي المبلغ المرسى عليه:
المبلغ بالريال اليمني (رقماً)
- إجمالي المبلغ المرسى عليه:
المبلغ بالريال اليمني (كتابةً)

- المبالغ في رسائل الترسية 
- اجمالي التكلفة التقديرية (بالعملة المدخلة)
- اجمالي التكلفة التقديرية (لمبلغ المعادل بالريال)
- التكلفة التقديرية للوحدة (بالعملة المدخلة)
-  المعادل بالريال للوحدة (لتكلفة التقديرية للوحدة )
2 - كيف يمكن تعليق الدوال الحالية وكيفية استدعائها في الصفحات المطلوبة 
3-تصحيح احتساب الفرق في السعر: في جدول "ملاحظات الاختلافات في المواصفات" ليتم احتساب الفارق بين التكلفة والسعر المقدم  للوحدة الواحدة
3- تقديم مقترحاتك (ان وجدت) حول كيفية تحسين الاكواد مع شروحاتك توضيحية حول الاكواد التي تحتاج لاضافة او حذف او تعديل في كل صفحة
4- المحافظه ع التعليقات  الحالية واضافة اي تعليقات توضيحية


أولا ملف توحيد الدوال 
; ===================================
; purchases_alamin5-copy5\src\utils\calculation.ts
; ===================================
// ملف مخصص للدوال امتكررة لتوحيدها 


/**
 * ملف util لتوحيد الحسابات المالية
 * يحوي جميع الدوال المتكررة في الصفحات
 */

/////////////////////
// 🟢 الثوابت
/////////////////////

// معدل الضريبة الافتراضي (يمكن تغييره حسب السياسة)
export const TAX_RATE = 0.05; // 5% كمثال

/////////////////////
// 🟢 دوال المبالغ الأساسية
/////////////////////

/**
 * حساب إجمالي مبلغ العرض (بعملة العرض)
 */
export function calculateOfferTotal(unitPrice: number, qty: number): number {
  return unitPrice * qty;
}

/**
 * حساب إجمالي مبلغ العرض بعد الضريبة (بعملة العرض)
 */
export function calculateOfferTotalAfterTax(unitPrice: number, qty: number, taxRate: number = TAX_RATE): number {
  const subtotal = calculateOfferTotal(unitPrice, qty);
  return subtotal + subtotal * taxRate;
}

/**
 * حساب المعادل بالريال لمبلغ معين (إجمالي أو وحدة)
 */
export function calculateEquivalentInYR(amount: number, exchangeRate: number): number {
  return amount * exchangeRate;
}

/////////////////////
// 🟢 دوال مخصصة للعروض والتوصيات
/////////////////////

/**
 * حساب إجمالي الكميات المرسى عليها (بعد الضريبة)
 */
export function calculateAwardedTotalAfterTax(
  awardedItems: { unitPrice: number; qty: number }[],
  taxRate: number = TAX_RATE
): number {
  const subtotal = awardedItems.reduce((sum, item) => sum + calculateOfferTotal(item.unitPrice, item.qty), 0);
  return subtotal + subtotal * taxRate;
}

/**
 * حساب إجمالي المبالغ المرسى عليها بالريال
 */
export function calculateTotalAwardedInYR(
  awardedItems: { unitPrice: number; qty: number; exchangeRate: number }[],
  taxRate: number = TAX_RATE
): number {
  const total = calculateAwardedTotalAfterTax(awardedItems, taxRate);
  const avgRate = awardedItems.length ? awardedItems[0].exchangeRate : 1;
  return calculateEquivalentInYR(total, avgRate);
}

/////////////////////
// 🟢 دوال التكلفة التقديرية
/////////////////////

/**
 * التكلفة التقديرية للوحدة (بالعملة المدخلة)
 */
export function getEstimatedUnitCost(unitPrice: number): number {
  return unitPrice;
}

/**
 * التكلفة التقديرية للوحدة بالريال
 */
export function getEstimatedUnitCostInYR(unitPrice: number, exchangeRate: number): number {
  return unitPrice * exchangeRate;
}

/**
 * إجمالي التكلفة التقديرية (بالعملة المدخلة)
 */
export function getTotalEstimatedCost(items: { unitPrice: number; qty: number }[]): number {
  return items.reduce((sum, item) => sum + calculateOfferTotal(item.unitPrice, item.qty), 0);
}

/**
 * إجمالي التكلفة التقديرية بالريال
 */
export function getTotalEstimatedCostInYR(items: { unitPrice: number; qty: number; exchangeRate: number }[]): number {
  const subtotal = getTotalEstimatedCost(items);
  const avgRate = items.length ? items[0].exchangeRate : 1;
  return calculateEquivalentInYR(subtotal, avgRate);
}

/////////////////////
// 🟢 دوال الفروقات
/////////////////////

/**
 * حساب فرق السعر في جدول ملاحظات الاختلافات في المواصفات
 */
export function calculatePriceDifferencePerUnit(
  estimatedUnitCost: number,
  offeredUnitPrice: number,
  exchangeRate: number
): number {
  return (estimatedUnitCost * exchangeRate) - (offeredUnitPrice * exchangeRate);
}

// ===============================
// إضافة دوال التنسيق من الكود الثاني إلى الكود الأول
export const formatAmountWithCommas = (amount: number): string => {
  return amount.toLocaleString('en-US', {
    minimumFractionDigits: 2,
    maximumFractionDigits: 2
  });
};

export const convertAmountToWords = (amount: number, currency: string = 'ريال يمني'): string => {
  // تنفيذ التحويل الفعلي هنا
  return `مبلغ وقدره ${formatAmountWithCommas(amount)} ${currency}`;
};

; ===========================================================================

ثانيا صفحات التطبيق 
; ========================================================================
الكود الاول صفحة 
// purchases_alamin5-copy5\src\types\index.ts
; ===========================================================================
export interface PurchaseOrderItem {
  poNumber: number;
  // 🟢 رقم الصنف (اختياري)
  code?: string;
  id: string;
  name: string;
  quantity: number;
  unit: string;
  selected: boolean;
  lineNumber: number; // إضافة رقم السطر

  // إضافة الخصائص الجديدة

  estimatedCost?: {
    amount: number;
    currency: string;
    equivalentInYR?: number;
  };
  specifications?: {
    color?: string;
    type?: string;
    material?: string;
    // [key: string]: string;
    [key: string]: string | undefined;
  };
}

// 🟢 سطر جديد: تعريف بنية أصناف العرض لكل مورد
export interface OfferLineItem {
  specifications: any;
  itemId: string;           // معرف الصنف الأصلي
  lineNumber: number;       // رقم السطر من جدول الأصناف
  name: string;             // بيان الصنف
  unit: string;             // وحدة القياس
  requestedQty: number;     // الكمية المطلوبة من جدول الأصناف
  offeredQty: number;       // الكمية المقدمة من المورد
  // سعر الوحدة المستخدم داخلياً في المقارنة والحسابات الافتراضية
  // سنحافظ عليه كسعر بعد الضريبة لضمان الاتساق مع بقية الشاشات
  unitPrice: number;        // سعر الوحدة (بعد الضريبة)
  // حقول اختيارية لدعم قبل/بعد الضريبة في وضع غير شامل
  unitPriceBeforeTax?: number;   // سعر الوحدة قبل الضريبة (إدخال يدوي عند غير شامل)
  unitPriceAfterTax?: number;    // سعر الوحدة بعد الضريبة (يُحسب تلقائياً)
  lineTotal: number;        // إجمالي السطر (بعد الضريبة) = offeredQty * unitPrice
  lineTotalBeforeTax?: number; // إجمالي السطر قبل الضريبة
  lineTotalAfterTax?: number;  // إجمالي السطر بعد الضريبة
  awarded: boolean;         // هل تم الترسية على هذا السطر (للترسية الجزئية)
  awardedQty?: number;      // الكمية المرسى عليها (لا تؤثر على إجمالي العرض، فقط التوصية)
  
  // 🟢 جديد: ملاحظات السطر
  lineNote?: string;        // ملاحظات خاصة بهذا السطر ضمن عرض المورد
  
  // 🟢 جديد: مواصفات المورد لهذا السطر (نفس مفاتيح مواصفات طلب الشراء)
  // vendorSpecifications?: { [key: string]: string };

  // 🟢 جديد: التزامات المورد لهذا السطر (تُعرض في التوصية عند الترسية)
  commitment?: string;
  vendorSpecifications?: {
    color?: string;
    type?: string;
    material?: string;
    // [key: string]: string;
    [key: string]: string | undefined;
  };
  commitments?: string[];
}


export interface PriceOffer {
  totalAfterTax: undefined;  // الاجمالي بعد الضريبة
  totalAfterTaxInYR: undefined; // المجموع بعد ضريبة القيمة المضافة بالريال اليمني
  notes: string;
  items: PriceOffer | undefined;
  id: string;
  vendor: string;
  offerNumber: string; // رقم العرض
  amount: number;      // إجمالي قيمة العرض (مجموع أسطر الترسية)
  // سطر جديد لمعالجة اضافة النقطة الفاصلة العشرية
  inputValue?: string;  // لحفظ قيمة المدخل مؤقتاً
  currency: Currency;
  exchangeRate?: number;
  totalInYR?: number;  // المبلغ المعادل بالريال 
  // 🟢 تغيير: السماح بحالة "اختر" عبر قيمة null
  taxIncluded: boolean | null; // null = اختر، true = شامل، false = غير شامل
  total: number; // إجمالي قيمة العرض (مجموع أسطر الترسية)
  totalInWords: string;
  result: OfferResult;
  
  // 🟢 جديد: ملاحظات العرض
  offerNote?: string;         // ملاحظات تخص عرض المورد ككل

  // 🟢 جديد: التزامات المورد على مستوى العرض الكامل (تظهر في التوصية تحت إجماليه)
  commitments?: string[];
  
  // 🟢 سطر جديد: أصناف العرض لكل مورد
  lineItems?: OfferLineItem[];
}

export interface ExcludedOffer {
  id: string;
  vendor: string;
  reason: string;
  notes: string;
  // سطر جديد  
  // يمكن استخدامه لتحديد حالة العرض المستبعد
  // مثل 'مطابق' أو 'غير مطابق' أو 'مطابق جزئي'
  result?: string; // إضافة هذه السطر

}


// export interface RecommendationLineItem {
//   lineNumber: number;
//   name: string;
//   unit: string;
//   awardedQty: number;
//   unitPrice: number;
//   total: number;
//   commitments: string[];
// }


export interface RecommendedOffer {
  lineItems: any;
  totalInYR: number;
  vendor: string;
  amount: number;
  currency: string;
  amountInWords: string;
  manualAmount?: number; // المبلغ المعدل يدوياً لهذا المورد
  isManualAmount?: boolean; // هل تم تعديل المبلغ يدوياً لهذا المورد
  // 🟢 سطر جديد: أرقام الأسطر التي تمت الترسية عليها (للنص التوضيحي)
  awardedLineNumbers?: number[];
}

// تعريفات جديده 
export interface PurchaseOrder {
  ponumber: string;
  vendorName: string;
  currencyCode: string;
  date?: Date;
  deliveryDate?: Date;
}
// =================

export interface Recommendation {
  selectedOffers: RecommendedOffer[]; // قائمة العروض الموصى بها
  totalAwardedInYR?: number; // إجمالي المبلغ المرساة عليه بالريال (رقماً)
  totalAwardedInYRWords?: string; // إجمالي المبلغ المرساة عليه بالريال (كتابة)
}

export type Currency = 'ريال' | 'دولار' | 'ريال سعودي' | 'يورو';
// export type OfferResult = 'مطابق' | 'غير مطابق' | 'مطابق جزئي' |  '';
export type OfferResult = 'مطابق' | 'غير مطابق' | 'مطابق جزئي' |  ''; // 🟢 السماح بحالة فارغة (اختر)


; ================================================================================
الكود الثاني 
// purchases_alamin5-copy5\src\context\PurchaseOrderContext.tsx
; ===================================================================================
import React, { createContext, ReactNode, useCallback, useContext, useState } from 'react';
import { ExcludedOffer, PriceOffer, PurchaseOrderItem, Recommendation, RecommendedOffer, PurchaseOrder } from '../types';
import { db } from '../utils/db';
import { convertNumberToArabicWords, formatNumberWithCommas } from '../utils/numberToWords';

// ========== دالة جديده0===============
// تعريف الواجهات (Interfaces) سطر جديد
interface PurchaseOrderContextType {
  // حقول البيانات الأساسية
  poNumber: string;
  setPoNumber: (poNumber: string) => void;
  transactionNumber: string;
  setTransactionNumber: (number: string) => void;
  // الجهة الطالبة سطر جديد
  requesting: string;
  setRequesting: (requesting: string) => void;
  beneficiary: string;
  setBeneficiary: (beneficiary: string) => void;
  // طريقة الشراء
  purchaseMethod: string;
  setPurchaseMethod: (purchaseMethod: string) => void;
  // بيانات الجداول
  poItems: PurchaseOrderItem[];                                        /* جدول الأصناف */
  setPoItems: (items: PurchaseOrderItem[]) => void;                    /* دالة تحديث جدول الأصناف */
  priceOffers: PriceOffer[];                                           /* جدول العروض */
  setPriceOffers: (offers: PriceOffer[]) => void;                     /* دالة تحديث جدول العروض */
  excludedOffers: ExcludedOffer[];                                    /* جدول العروض المستبعدة */
  setExcludedOffers: (offers: ExcludedOffer[]) => void;                   /* دالة تحديث جدول العروض المستبعدة */
  recommendation: Recommendation | null;                                 /* جدول التوصيات */
  setRecommendation: (recommendation: Recommendation | null) => void;     /* دالة تحديث جدول التوصيات */
  // إعدادات الطباعة والعرض
  isPreliminaryPrint: boolean;  // حالة الطباعة
  setIsPreliminaryPrint: (value: boolean) => void;
  offerCount: number; // إضافة عدد العروض إلى السياق
  setOfferCount: (count: number) => void;
  // حالة البيانات
  hasUnsavedChanges: boolean;  // حالة وجود تغييرات غير محفوظة
  isDataSaved: boolean;  // حالة وجود بيانات محفوظة
  // سطر جديد1 لاضافة PurchaseOrder  تعريف الخاصية في الواجهة،
  purchaseOrder: PurchaseOrder | null; // 🟢 يجب إضافة هذا السطر
  // دوال العمليات
  loadPurchaseOrder: (data: any) => Promise<boolean>;  // دالة لتحميل طلب الشراء
  savePurchaseOrder: () => Promise<boolean>;  // دالة لحفظ طلب الشراء
  clearAllFields: () => void;
  handlePoNumberChange: (newPoNumber: string) => void;
  // دوال جديدة لإدارة العروض
  updatePriceOffer: (vendor: string, updates: Partial<PriceOffer>) => void;
  // بيانات التكاليف التقديرية
  estimatedCosts: {[key: number]: number};
  setEstimatedCosts: (costs: {[key: number]: number}) => void;
  // بيانات المواصفات
  itemSpecifications: {[key: number]: string};
  setItemSpecifications: (specs: {[key: number]: string}) => void;
  // الدوال الجديدة التي تم إضافتها
  deletePurchaseOrderData: (poNum: string) => Promise<boolean>;
  checkDuplicatePurchaseOrder: (
    poNum: string,
    transNum: string
  ) => Promise<{ isDuplicate: boolean; message: string; dataExists: boolean }>;
  // دوال جديدة لحساب الإجماليات
  calculateMaxOfferAmountInYR: () => number; // لحساب أكبر قيمة معادلة بالريال للعروض (للطباعة الأولية)
  calculateTotalAwardedInYR: () => number; // لحساب إجمالي العروض المرسى عليها (للطباعة النهائية)
  getSalutationForPrint: () => string; // لتحديد المخاطب في الصفحة الرئيسية
  getSignatoryForPrint: () => string; // لتحديد المعتمد في النص الثابت
  shouldShowPreliminarySignature: () => boolean; // لتحديد إظهار مدير عام الإدارة في الطباعة الأولية
  shouldShowFinalSignature: () => boolean; // لتحديد إظهار مدير عام المشتريات في الطباعة النهائية
  // دوال جديدة لإدارة الرسائل
  generateVendorMessages: () => {
    awarded: { vendor: string; message: string }[];
    excluded: { vendor: string; message: string }[];
    financial: string;
  };
}

const PurchaseOrderContext = createContext<PurchaseOrderContextType | undefined>(undefined);

export const PurchaseOrderProvider: React.FC<{ children: ReactNode }> = ({ children }) => {
  // حالات البيانات الأساسية
  const [poNumber, setPoNumberState] = useState<string>('');
  const [transactionNumber, setTransactionNumber] = useState<string>('');
  // الجهة الطالبة سطر جديد
  const [requesting, setRequesting] = useState<string>('');
  const [beneficiary, setBeneficiary] = useState<string>('');
  // طريقة الشراء
  const [purchaseMethod, setPurchaseMethod] = useState<string>('');
  // بيانات التكاليف التقديرية
  const [estimatedCosts, setEstimatedCosts] = useState<{[key: number]: number}>({});
  
  // بيانات المواصفات
  const [itemSpecifications, setItemSpecifications] = useState<{[key: number]: string}>({});
  // حالة طريقة الشراء
  // const [purchaseMethod, setPurchaseMethod] = useState<string>('');
  // حالات الجداول
  const [poItems, setPoItems] = useState<PurchaseOrderItem[]>([]);  /* جدول الأصناف */
  // 🟢 إضافة حالة purchaseOrder سطر جديد2 
  const [purchaseOrder, setPurchaseOrder] = useState<PurchaseOrder | null>(null); // 🟢 يجب إضافة هذا السطر
  const [priceOffers, setPriceOffers] = useState<PriceOffer[]>([]);  /* جدول العروض */
  const [excludedOffers, setExcludedOffers] = useState<ExcludedOffer[]>([]);   /* جدول العروض المستبعدة */
  const [recommendation, setRecommendation] = useState<Recommendation | null>({ selectedOffers: [] });     /* جدول التوصيات */
  // حالات الإعدادات
  const [isPreliminaryPrint, setIsPreliminaryPrint] = useState(false);
  const [offerCount, setOfferCount] = useState(3);
  const [hasUnsavedChanges, setHasUnsavedChanges] = useState(false);
  const [isDataSaved, setIsDataSaved] = useState(false);
  
  // 🟢 1. تعريف clearAllFields أولاً لأنه يتم استخدامه في دوال أخرى
  const clearAllFields = useCallback(() => {
    setTransactionNumber(''); // مسح رقم المعاملة
    setRequesting('');  // مسح الجهة الطالبة
    setBeneficiary(''); // مسح الجهة المستفيدة
    setPurchaseMethod(''); // مسح طريقة الشراء
    setPoItems([]); // مسح الأصناف المطلوبة
    // ✅ لا نمسح العروض هنا، سيتم إنشاؤها في PriceOffersSection
    setPriceOffers([]); // تم تعليق هذا السطر ليفتح ع 3 عروض
    setExcludedOffers([]); // مسح العروض المستبعدة
    setRecommendation(null); // مسح التوصيات
    setIsPreliminaryPrint(false); // إعادة تعيين حالة الطباعة الأولية
    setOfferCount(3); // إعادة تعيين عدد العروض الافتراضي
    setHasUnsavedChanges(false); // تعيين حالة التغييرات غير المحفوظة
    setIsDataSaved(false); // تعيين حالة البيانات المحفوظة
  }, []);
  
  // 🟢 2. تعريف loadPurchaseOrder بعد clearAllFields لأنه يعتمد على db وقبل handlePoNumberChange
  const loadPurchaseOrder = useCallback(
    async (data: any): Promise<boolean> => {
      try {
        setPoNumberState(data.po_number || data['الرقم'] || '');
        setRequesting(data.requesting || data['الجهة الطالبة'] || '');  
        setBeneficiary(data.beneficiary || data['الجهة المستفيدة'] || '');
        setPurchaseMethod(data.purchaseMethod || data['طريقة الشراء'] || '');
        setTransactionNumber(data.transaction_number || data['رقم المعاملة'] || '');
        const items = data.items || data['الأصناف'] || [];
        setPoItems(
          items.map((item: any, index: number) => ({
            id: `item-${index}`,
            name: item.name || item['البيان'],
            quantity: item.quantity || item['الكمية'],
            unit: item.unit || item['الوحدة'],
            lineNumber: item.lineNumber || item['السطر'] || item['رقم السطر'] || index + 1,
            selected: true,
            // 🟢 تحميل التكلفة التقديرية والمواصفات إن وُجدت
            estimatedCost: item.estimatedCost || item['التكلفة التقديرية'] || undefined,
            specifications: item.specifications || item['المواصفات'] || undefined, 
          }))
        );
        if (Array.isArray(data.price_offers)) {
          setPriceOffers(data.price_offers);
          setOfferCount(data.offer_count || data.price_offers.length || 3);
        } else {
          // في حالة عدم وجود عروض في البيانات المستوردة، نعيد التعيين الافتراضي
          setPriceOffers([]);
          setOfferCount(3);
        }
        if (Array.isArray(data.excluded_offers)) {
          setExcludedOffers(data.excluded_offers);
        } else {
          setExcludedOffers([]);
        }
        if (data.recommendation) {
          setRecommendation(data.recommendation);
        } else {
          setRecommendation({ selectedOffers: [] }); // لضمان عدم بقاء القيمة null
        }
        setHasUnsavedChanges(true);
        setIsDataSaved(false);
        return true;
      } catch (error) {
        console.error('خطأ في تحميل طلب الشراء:', error);
        return false;
      }
    },
    [] // لا يوجد متغيرات خارجية هنا يجب أن تعتمد عليها هذه الدالة إلا db والتي ليست جزءاً من حالة React
  );
  
  // 🟢 3. تعريف setPoNumberState (داخلي)
  const setPoNumber = useCallback(
    (newPoNumber: string) => {
      setPoNumberState(newPoNumber);
    },
    []
  );
  
  // 🟢 4. تعريف handlePoNumberChange الآن يمكنها استخدام loadPurchaseOrder و clearAllFields بأمان
  const handlePoNumberChange = useCallback(
    async (newPoNumber: string) => {
      setPoNumberState(newPoNumber); // تحديث رقم طلب الشراء
      if (newPoNumber) {
        const existingData = await db.getPurchaseOrder(newPoNumber);
        if (existingData) {
          await loadPurchaseOrder(existingData); // 🟢 الآن loadPurchaseOrder معرفة
        } else {
          clearAllFields(); // 🟢 والآن clearAllFields معرفة
        }
      } else {
        clearAllFields();
      }
    },
    [clearAllFields, loadPurchaseOrder] // إضافة loadPurchaseOrder إلى التبعيات
  );
  
  // 🟢 8. تعريف updatePriceOffer
  const updatePriceOffer = useCallback(
    (vendor: string, updates: Partial<PriceOffer>) => {
      setPriceOffers(prevOffers => 
        prevOffers.map(offer => 
          offer.vendor === vendor ? { ...offer, ...updates } : offer
        )
      );
      setHasUnsavedChanges(true);
    },
    []
  );
  
  // =============جديد=============================
  // إضافة دالة آمنة لإرسال الرسائل
  // أضف هذه الدالة في بداية الملف أو في مكان مناسب
  const safeSendMessage = (message: any) => {
    if (typeof chrome !== 'undefined' && chrome.runtime) {
      try {
        // التحقق من أن المنفذ متصل قبل الإرسال
        if (chrome.runtime.id) {
          chrome.runtime.sendMessage(message);
          return true;
        }
      } catch (error) {
        console.error('Error sending message:', error);
        return false;
      }
    }
    return false;
  };
  
  // ========================================
  
  // 🟢 5. تعريف دوال الحساب أولاً قبل استخدامها في دوال أخرى
  const calculateMaxOfferAmountInYR = useCallback((): number => {
    // لحساب أكبر قيمة معادلة بالريال للعروض (للطباعة الأولية)
    // نتحقق من كل عرض في جدول عروض الأسعار بغض النظر عن حالته
    const amounts = priceOffers.map(offer => offer.totalInYR || 0);
    return amounts.length > 0 ? Math.max(...amounts) : 0;
  }, [priceOffers]);
  
  const calculateTotalAwardedInYR = useCallback((): number => {
    // لحساب إجمالي العروض المرسى عليها (للطباعة النهائية)
    if (!recommendation || !recommendation.selectedOffers || recommendation.selectedOffers.length === 0) {
      return 0;
    }
    return recommendation.selectedOffers.reduce((sum, selectedOffer) => {
      const originalOffer = priceOffers.find(po => po.vendor === selectedOffer.vendor);
      if (originalOffer) {
        // إذا كان المبلغ معدل يدوياً، نحسب المعادل بناءً على المبلغ الجديد
        if (selectedOffer.isManualAmount && selectedOffer.manualAmount !== undefined) {
          const exchangeRate = originalOffer.exchangeRate || 1;
          return sum + (selectedOffer.manualAmount * exchangeRate);
        } else {
          // استخدام المعادل المحفوظ مسبقاً
          return sum + (originalOffer.totalInYR || 0);
        }
      }
      return sum;
    }, 0);
  }, [recommendation, priceOffers]);
  
  const getSalutationForPrint = useCallback((): string => {
    // لتحديد المخاطب في الصفحة الرئيسية بناءً على إجمالي العروض المرسى عليها
    const total = calculateTotalAwardedInYR();
    return total > 150000 ? 'الأخ/المدير العام التنفيذي' : 'الأخ/مدير عام المشتريات والمخازن';
  }, [calculateTotalAwardedInYR]);
  
  const getSignatoryForPrint = useCallback((): string => {
    // لتحديد المعتمد في النص الثابت بناءً على إجمالي العروض المرسى عليها
    const total = calculateTotalAwardedInYR();
    return total > 150000 ? 'المدير العام التنفيذي' : 'مدير عام المشتريات والمخازن';
  }, [calculateTotalAwardedInYR]);
  
  const shouldShowPreliminarySignature = useCallback((): boolean => {
    // لتحديد إظهار مدير عام الإدارة في الطباعة الأولية
    // نتحقق من أكبر قيمة معادلة بالريال للعروض
    const maxAmount = calculateMaxOfferAmountInYR();
    return maxAmount > 150000;
  }, [calculateMaxOfferAmountInYR]);
  
  const shouldShowFinalSignature = useCallback((): boolean => {
    // لتحديد إظهار مدير عام المشتريات في الطباعة النهائية
    // نتحقق من إجمالي العروض المرسى عليها
    const total = calculateTotalAwardedInYR();
    return total > 150000;
  }, [calculateTotalAwardedInYR]);
  
  // 🟢 6. تعريف savePurchaseOrder بعد تعريف جميع الدوال التي تستخدمها
  const savePurchaseOrder = useCallback(async (): Promise<boolean> => {
    try {
      // التحقق من وجود البيانات الأساسية المطلوبة
      if (!poNumber.trim()) {
        console.error('رقم طلب الشراء مطلوب للحفظ');
        return false;
      }
      
      // ✅ تسجيل مفصل لعملية الحفظ
      console.log('بدء عملية حفظ طلب الشراء:', poNumber);
      console.log('البيانات المراد حفظها:', {
        po_number: poNumber,
        transaction_number: transactionNumber,
        requesting,
        beneficiary,
        purchaseMethod,
        items_count: poItems.length,
        offers_count: priceOffers.length,
        excluded_count: excludedOffers.length
      });
      
      // ✅ التحقق من صحة البيانات قبل الحفظ
      const validOffers = priceOffers.filter(offer => 
        offer.vendor && offer.vendor.trim() !== '' && offer.amount > 0
      );
      
      console.log('عدد العروض الصالحة للحفظ:', validOffers.length);
      
      // احسب إجمالي المبلغ المرسى عليه بالريال اليمني
      const awardedTotalYER = calculateTotalAwardedInYR();
      const nowIso = new Date().toISOString();
      
      // تجهيز البيانات النهائية مع معالجة أفضل للأخطاء
      const data = {
        po_number: poNumber,
        transaction_number: transactionNumber,
        requesting,
        beneficiary,
        purchaseMethod,
        items: poItems,
        // احفظ أرقام العروض وأسعار الأصناف لكل مورد إن وجدت عبر تمرير الحقول كما هي
        price_offers: priceOffers.map(offer => {
          // إنشاء نسخة آمنة من العرض
          const safeOffer = {
            ...offer,
            // ✅ التأكد من حفظ القيم المهمة مع معالجة أفضل للأخطاء
            amount: isNaN(Number(offer.amount)) ? 0 : Number(offer.amount),
            total: isNaN(Number(offer.total)) ? 0 : Number(offer.total),
            totalInYR: isNaN(Number(offer.totalInYR)) ? 0 : Number(offer.totalInYR),
            exchangeRate: isNaN(Number(offer.exchangeRate)) ? 1 : Number(offer.exchangeRate),
            // التأكد من أن lineItems مصفوفة صالحة
            lineItems: Array.isArray(offer.lineItems) ? offer.lineItems : [],
            // التأكد من أن commitments مصفوفة صالحة
            commitments: Array.isArray(offer.commitments) ? offer.commitments : [],
          };
          
          // حذف الحقول غير الضرورية التي قد تسبب مشاكل
          delete (safeOffer as any).inputValue;
          
          return safeOffer;
        }),
        excluded_offers: excludedOffers,
        recommendation: recommendation ? { ...recommendation, totalAwardedInYR: awardedTotalYER } : null,
        offer_count: offerCount,
        date: nowIso,
        date_only: nowIso.slice(0, 10),
        time_only: nowIso.slice(11, 19),
        awarded_total_yer: awardedTotalYER,
        awarded_total_yer_words: convertNumberToArabicWords(awardedTotalYER, 'ريال'),
      };
      
      console.log('البيانات النهائية للحفظ:', data);
      
      // استخدام الدالة الآمنة للحفظ
      const saveMessage = {
        type: 'SAVE_PURCHASE_ORDER',
        data: data
      };
      
      // محاولة الحفظ باستخدام الطريقة الآمنة
      const messageSent = safeSendMessage(saveMessage);
      
      if (!messageSent) {
        console.warn('فشل في إرسال رسالة الحفظ، محاولة بديلة...');
        // محاولة بديلة: حفظ مباشر في localStorage إذا كان متاحًا
        if (typeof localStorage !== 'undefined') {
          try {
            localStorage.setItem(`purchase_order_${poNumber}`, JSON.stringify(data));
            console.log('تم حفظ البيانات في localStorage كنسخة احتياطية');
          } catch (storageError) {
            console.error('فشل في حفظ البيانات في localStorage:', storageError);
          }
        }
      }
      
      // استدعاء دالة الحفظ الأصلية
      const success = await db.savePurchaseOrder(data);
      
      if (success) {
        console.log('تم حفظ البيانات بنجاح:', poNumber);
        setHasUnsavedChanges(false);
        setIsDataSaved(true);
      } else {
        console.error('فشل في حفظ البيانات');
      }
      
      return success;
    } catch (error) {
      console.error('خطأ في حفظ بيانات طلب الشراء:', error);
      
      // ✅ تسجيل تفاصيل الخطأ
      if (error instanceof Error) {
        console.error('تفاصيل الخطأ:', error.message);
        console.error('Stack trace:', error.stack);
      }
      
      // محاولة حفظ البيانات في sessionStorage كنسخة احتياطية
      try {
        if (typeof sessionStorage !== 'undefined') {
          const backupData = {
            poNumber,
            transactionNumber,
            requesting,
            beneficiary,
            purchaseMethod,
            poItems,
            priceOffers,
            excludedOffers,
            recommendation,
            offerCount,
            timestamp: new Date().toISOString()
          };
          sessionStorage.setItem('purchase_order_backup', JSON.stringify(backupData));
          console.log('تم حفظ نسخة احتياطية في sessionStorage');
        }
      } catch (backupError) {
        console.error('فشل في حفظ النسخة الاحتياطية:', backupError);
      }
      
      return false;
    }
  }, [poNumber, transactionNumber, requesting, beneficiary, purchaseMethod, poItems, priceOffers, excludedOffers, recommendation, offerCount, calculateTotalAwardedInYR, convertNumberToArabicWords, db.savePurchaseOrder]);
  
  // =================================================
  
  // 🟢 7. تعريف deletePurchaseOrderData
  const deletePurchaseOrderData = useCallback(async (poNum: string): Promise<boolean> => {
    try {
      const success = await db.deletePurchaseOrder(poNum);
      if (success) {
        clearAllFields(); // 🟢 الآن clearAllFields معرفة
        setPoNumberState('');
        console.log(`Purchase order ${poNum} deleted successfully.`);
      }
      return success;
    } catch (error) {
      console.error('Error deleting purchase order:', error);
      return false;
    }
  }, [clearAllFields]); // إضافة clearAllFields إلى التبعيات
  
  // 🟢 8. تعريف checkDuplicatePurchaseOrder
  const checkDuplicatePurchaseOrder = useCallback(
    async (
      poNum: string,
      transNum: string
    ): Promise<{ isDuplicate: boolean; message: string; dataExists: boolean }> => {
      const existingPO = await db.getPurchaseOrder(poNum);
      if (existingPO) {
        if (existingPO.transaction_number === transNum) {
          return {
            isDuplicate: true,
            message: 'رقم طلب الشراء محفوظ مسبقاً بنفس رقم المعاملة، سيتم تحديث البيانات.',
            dataExists: true,
          };
        } else {
          return {
            isDuplicate: false,
            message:
              'رقم طلب الشراء هذا محفوظ مسبقاً برقم معاملة مختلف. هل تريد الحفظ كطلب شراء جديد (برقم معاملة جديد)؟',
            dataExists: true,
          };
        }
      }
      return { isDuplicate: false, message: '', dataExists: false };
    },
    []
  );
  
  /**
   * دالة توليد الرسائل للموردين والشؤون المالية
   */
  const generateVendorMessages = useCallback(() => {
    const today = new Date().toLocaleDateString('ar-SA');
    const totalAwarded = calculateTotalAwardedInYR();
    
    // رسائل الموردين المرسى عليهم
    const awardedMessages = (recommendation?.selectedOffers || []).map(selectedOffer => {
      const offer = priceOffers.find(o => o.vendor === selectedOffer.vendor);
      let message = `بسم الله الرحمن الرحيم\n\n`;
      message += `التاريخ: ${today}\n`;
      message += `إلى: ${selectedOffer.vendor}\n`;
      message += `الموضوع: إشعار ترسية طلب الشراء رقم ${poNumber}\n\n`;
      message += `تحية طيبة وبعد،\n\n`;
      message += `نتشرف بإبلاغكم بأنه تم الترسية عليكم في طلب الشراء رقم ${poNumber} `;
      message += `الخاص بـ ${beneficiary} بمبلغ إجمالي قدره `;
      message += `${formatNumberWithCommas(selectedOffer.amount)} ${selectedOffer.currency}\n\n`;
      
      if (selectedOffer.awardedLineNumbers && selectedOffer.awardedLineNumbers.length > 0) {
        message += `الأسطر المرسى عليها: ${selectedOffer.awardedLineNumbers.join(', ')}\n\n`;
      }
      
      // إضافة الالتزامات إن وجدت
      if (offer?.commitments && offer.commitments.length > 0) {
        message += `مع الالتزام بالآتي:\n`;
        offer.commitments.forEach((commitment, index) => {
          message += `${index + 1}. ${commitment}\n`;
        });
        message += `\n`;
      }
      
      message += `يرجى التواصل مع إدارة المشتريات لاستكمال الإجراءات.\n\n`;
      message += `مع تحياتنا،\n`;
      message += `إدارة المشتريات والمخازن`;
      
      return { vendor: selectedOffer.vendor, message };
    });
    
    // رسائل الموردين المستبعدين
    const excludedMessages = priceOffers
      .filter(offer => offer.vendor && offer.result !== 'مطابق')
      .map(offer => {
        let message = `بسم الله الرحمن الرحيم\n\n`;
        message += `التاريخ: ${today}\n`;
        message += `إلى: ${offer.vendor}\n`;
        message += `الموضوع: إشعار عدم ترسية طلب الشراء رقم ${poNumber}\n\n`;
        message += `تحية طيبة وبعد،\n\n`;
        message += `نشكركم على مشاركتكم في طلب الشراء رقم ${poNumber} `;
        message += `الخاص بـ ${beneficiary}.\n\n`;
        message += `نأسف لإبلاغكم بأنه لم يتم الترسية عليكم في هذا الطلب `;
        message += `لأسباب فنية ومالية.\n\n`;
        message += `نتطلع للتعاون معكم في الفرص القادمة.\n\n`;
        message += `مع تحياتنا،\n`;
        message += `إدارة المشتريات والمخازن`;
        
        return { vendor: offer.vendor, message };
      });
    
    // رسالة الشؤون المالية
    let financialMessage = `بسم الله الرحمن الرحيم\n\n`;
    financialMessage += `التاريخ: ${today}\n`;
    financialMessage += `إلى: إدارة الشؤون المالية\n`;
    financialMessage += `الموضوع: إشعار ترسية طلب الشراء رقم ${poNumber}\n\n`;
    financialMessage += `تحية طيبة وبعد،\n\n`;
    financialMessage += `نفيدكم بأنه تم الترسية في طلب الشراء رقم ${poNumber} `;
    financialMessage += `رقم المعاملة ${transactionNumber} الخاص بـ ${beneficiary}\n\n`;
    
    financialMessage += `تفاصيل الترسية:\n`;
    (recommendation?.selectedOffers || []).forEach((offer, index) => {
      financialMessage += `${index + 1}. ${offer.vendor}: `;
      financialMessage += `${formatNumberWithCommas(offer.amount)} ${offer.currency}`;
      if (offer.currency !== 'ريال') {
        const originalOffer = priceOffers.find(po => po.vendor === offer.vendor);
        const totalInYR = offer.isManualAmount && offer.manualAmount 
          ? offer.manualAmount * (originalOffer?.exchangeRate || 1)
          : offer.totalInYR;
        financialMessage += ` (${formatNumberWithCommas(totalInYR || 0)} ريال)`;
      }
      financialMessage += `\n`;
    });
    
    financialMessage += `\nالإجمالي: ${formatNumberWithCommas(totalAwarded)} ريال\n`;
    financialMessage += `الإجمالي كتابة: ${convertNumberToArabicWords(totalAwarded, 'ريال')}\n\n`;
    financialMessage += `يرجى اتخاذ الإجراءات المالية اللازمة.\n\n`;
    financialMessage += `مع تحياتنا،\n`;
    financialMessage += `إدارة المشتريات والمخازن`;
    
    return {
      awarded: awardedMessages,
      excluded: excludedMessages,
      financial: financialMessage
    };
  }, [recommendation, priceOffers, poNumber, transactionNumber, beneficiary, purchaseMethod, calculateTotalAwardedInYR]);
  
  return (
    <PurchaseOrderContext.Provider
      value={{
        // البيانات الأساسية
        poNumber,
        setPoNumber, // هذا هو setPoNumberState
        transactionNumber,
        setTransactionNumber,
        requesting,
        setRequesting,
        beneficiary,
        setBeneficiary,
        purchaseMethod, // طريقة الشراء
        setPurchaseMethod,
        // بيانات الجداول
        poItems,  //
        setPoItems, 
        priceOffers, // عروض الاسعار
        setPriceOffers, 
        excludedOffers,
        setExcludedOffers,
        recommendation, // التوصية
        setRecommendation,
        // الإعدادات
        isPreliminaryPrint,  // حالة الطباعة الأولية
        setIsPreliminaryPrint, 
        offerCount,  // عدد العروض
        setOfferCount,
        // حالة البيانات
        hasUnsavedChanges,  // حالة البيانات المحفوظة
        isDataSaved,  
        // 🟢 إضافة purchaseOrder إلى القيمة سطر جديد3
        purchaseOrder, // 🟢 يجب إضافة هذا السطر
        // العمليات
        loadPurchaseOrder,
        savePurchaseOrder,
        clearAllFields,
        handlePoNumberChange,
        updatePriceOffer,
        // إضافة الدوال الجديدة هنا إلى قيمة السياق
        deletePurchaseOrderData,
        checkDuplicatePurchaseOrder,
        estimatedCosts,
        setEstimatedCosts,
        itemSpecifications,
        setItemSpecifications,
        // دوال جديدة لحساب الإجماليات
        calculateMaxOfferAmountInYR,
        calculateTotalAwardedInYR,
        getSalutationForPrint,
        getSignatoryForPrint,
        shouldShowPreliminarySignature,
        shouldShowFinalSignature,
        // دوال جديدة لإدارة الرسائل
        generateVendorMessages,
      }}
    >
      {children}
    </PurchaseOrderContext.Provider>
  );
};

/**
 * usePurchaseOrder
 * سياق إدارة طلبات الشراء:
 * - يتيح مشاركة الحالة بين المكونات
 * - يوفر وظائف لإدارة دورة حياة طلب الشراء
 * - يتعامل مع عمليات CRUD مع قاعدة البيانات
 * - يدعم عمليات الطباعة والتخزين
 */
export const usePurchaseOrder = (): PurchaseOrderContextType => {
  const context = useContext(PurchaseOrderContext);
  if (context === undefined) {
    throw new Error('usePurchaseOrder must be used within a PurchaseOrderProvider');
  }
  return context;
};

; =======================================================================================
الكود الثالث جدول عروض الاسعار
// // purchases_alamin7-copy5\src\components\PriceOffersSection.tsx
; ==========================================================================================


import React, { useState, useEffect, useRef } from 'react';
import { DollarSign, Plus, Save, Edit, X, FileText, Award, Settings, AlertTriangle, CheckCircle, Calculator } from 'lucide-react';
import { usePurchaseOrder } from '../context/PurchaseOrderContext';
import { PriceOffer, OfferLineItem, Currency, OfferResult } from '../types';
import { convertNumberToArabicWords, formatNumberWithCommas } from '../utils/numberToWords';

export const PriceOffersSection: React.FC = () => {
  const {
    priceOffers, // قائمة عروض الأسعار
    setPriceOffers,
    poItems,  // تفاصيل الأصناف في طلب الشراء
    offerCount,  // عدد عروض الأسعار
    setOfferCount,
    savePurchaseOrder,
    isPreliminaryPrint,
    excludedOffers,
    setExcludedOffers,
    recommendation,
    setRecommendation
  } = usePurchaseOrder();

  // حالات إدارة العروض المحسنة
  const [editingOffer, setEditingOffer] = useState<string | null>(null);
  const [showLineItemsModal, setShowLineItemsModal] = useState<string | null>(null);
  const [showAwardedItemsModal, setShowAwardedItemsModal] = useState<string | null>(null);
  const [showSpecificationsModal, setShowSpecificationsModal] = useState<{ offerId: string, lineNumber: number } | null>(null);
  const [showCommitmentsModal, setShowCommitmentsModal] = useState<{ offerId: string, lineNumber?: number } | null>(null);
  const [inputType, setInputType] = useState<'إجمالي' | 'تفصيلي'>('إجمالي');

  // حالات مؤقتة للتعديل
  const [tempOfferData, setTempOfferData] = useState<Partial<PriceOffer>>({});
  const [tempLineItems, setTempLineItems] = useState<OfferLineItem[]>([]);
  const [tempAwardedItems, setTempAwardedItems] = useState<OfferLineItem[]>([]);
  const [tempSpecifications, setTempSpecifications] = useState<{ [key: string]: string }>({});
  const [tempCommitments, setTempCommitments] = useState<string[]>([]);

  // حالات التحقق من تطابق المبالغ
  const [showAmountMismatchDialog, setShowAmountMismatchDialog] = useState(false);
  const [amountMismatchData, setAmountMismatchData] = useState<{
    offerId: string;  // معرف العرض
    offerTotal: number; // إجمالي مبلغ العرض
    lineItemsTotal: number; // إجمالي أسعار الأصناف
    difference: number;  // الفارق بين المجموعين
  } | null>(null);

  // حالات الرسائل التحذيرية
  const [showQuantityWarning, setShowQuantityWarning] = useState<{
    type: 'offered' | 'awarded';
    offerId: string;  // معرف العرض
    lineNumber?: number;  // اختياري للسطر المحدد
    requested: number; // الكمية المطلوبة
    offered?: number; // الكمية المقدمة
    awarded?: number; // الكمية المرساة
    message: string;  // رسالة التحذير
    onConfirm: () => void;
  } | null>(null);

  // حالات الإكمال التلقائي للموردين
  const [vendorSuggestions, setVendorSuggestions] = useState<string[]>([]);
  const [showVendorSuggestions, setShowVendorSuggestions] = useState<{ [key: number]: boolean }>({});

  // حالة لقيم الإدخال المؤقتة
  const [inputValues, setInputValues] = useState<{ [key: string]: string }>({});

  // مراجع للحقول
  const vendorInputRefs = useRef<{ [key: number]: HTMLInputElement | null }>({});

  // Flag to save after specs update to avoid stale closures
  const specsSavePendingRef = useRef(false);

  /**
   * تهيئة العروض عند تغيير عدد العروض
   * ينشئ عروض فارغة جديدة أو يحذف الزائد حسب العدد المطلوب
   */
  useEffect(() => {
    if (priceOffers.length < offerCount) {
      const newOffers: PriceOffer[] = [];
      for (let i = priceOffers.length; i < offerCount; i++) {
        newOffers.push({
          id: `offer-${Date.now()}-${i}`,
          vendor: '', // اسم المورد
          offerNumber: '', // رقم العرض
          amount: 0, // مبلغ العرض قبل الضرائب
          currency: 'ريال' as Currency, // العملة
          exchangeRate: undefined, // سعر الصرف (فارغ افتراضياً لغير الريال)
          taxIncluded: null, // هل العرض شامل للضرائب
          total: 0, // الإجمالي بعد الضرائب
          totalInWords: '',
          result: '' as OfferResult, // نتيجة العرض
          totalInYR: 0, // المعادل بالريال اليمني
          lineItems: [], // تفاصيل الأصناف
          commitments: [], // التزامات المورد
          notes: '' // ملاحظات
          ,

          // معلومات إضافية
          items: undefined,
          totalAfterTax: undefined,
          totalInYR: undefined,
          totalAfterTaxInYR: undefined
        });
      }
      setPriceOffers([...priceOffers, ...newOffers]);
    } else if (priceOffers.length > offerCount) {
      setPriceOffers(priceOffers.slice(0, offerCount));
    }
  }, [offerCount, priceOffers.length]);

  /**
   * تفعيل نوع الإدخال تلقائياً حسب بيانات العرض
   * إذا كان العرض يحتوي على تفاصيل أصناف، يصبح "تفصيلي"
   */
  useEffect(() => {
    if (editingOffer) {
      const offer = priceOffers.find(o => o.id === editingOffer);
      if (offer && offer.lineItems && offer.lineItems.length > 0) {
        setInputType('تفصيلي');
        setTempLineItems([...offer.lineItems]);
      } else {
        setInputType('إجمالي');
        setTempLineItems([]);
      }
    }
  }, [editingOffer, priceOffers]);

  /**
   * دالة البحث عن الموردين للإكمال التلقائي
   */
  const searchVendors = (inputValue: string, index: number) => {
    if (!inputValue.trim()) {
      setVendorSuggestions([]);
      setShowVendorSuggestions(prev => ({ ...prev, [index]: false }));
      return;
    }
    // الحصول على قائمة الموردين الحاليين من جميع العروض
    const allVendors = Array.from(new Set(
      priceOffers.map(offer => offer.vendor).filter(vendor => vendor && vendor.trim())
    ));
    // فلترة الموردين الذين يتطابقون مع نص البحث
    const filtered = allVendors.filter(vendor =>
      vendor.toLowerCase().includes(inputValue.toLowerCase())
    );
    setVendorSuggestions(filtered);
    setShowVendorSuggestions(prev => ({ ...prev, [index]: true }));
  };

  /**
   * دالة تحديث عرض مع إعادة حساب الإجماليات والتحقق من التطابق
   */
  const handleUpdateOffer = (index: number, updates: Partial<PriceOffer>) => {
    setPriceOffers(priceOffers.map((offer, i) => {
      if (i === index) {
        const updatedOffer = { ...offer, ...updates };
        // إعادة حساب الإجماليات عند تغيير المبلغ أو العملة أو سعر الصرف أو الضرائب
        if ('amount' in updates || 'currency' in updates || 'exchangeRate' in updates || 'taxIncluded' in updates) {
          const amount = updates.amount !== undefined ? updates.amount : offer.amount;
          const currency = updates.currency || offer.currency;
          const exchangeRate = updates.exchangeRate !== undefined ? updates.exchangeRate : offer.exchangeRate;
          const taxIncluded = updates.taxIncluded !== undefined ? updates.taxIncluded : offer.taxIncluded;

          // حساب الإجمالي بعد الضرائب
          let total = amount;
          if (taxIncluded === false) {
            total = amount * (105 / 98); // إضافة 15% ضريبة
          }

          // حساب المعادل بالريال اليمني
          const totalInYR = currency === 'ريال' ? total : total * (exchangeRate || 1);

          // تحويل المبلغ إلى كلمات
          const totalInWords = convertNumberToArabicWords(total, currency);

          updatedOffer.total = total;  // الإجمالي بعد الضرائب
          updatedOffer.totalAfterTax = total; // إجمالي مبلغ العرض بعد الضرائب
          updatedOffer.totalInYR = totalInYR; // المعادل بالريال اليمني
          updatedOffer.totalInWords = totalInWords; // تحويل المبلغ إلى كلمات
        }
        return updatedOffer;
      }
      return offer;
    }));
  };

  /**
   * دالة بدء تعديل عرض عند النقر على سطر المورد
   */
  const handleStartEdit = (index: number) => {
    const offer = priceOffers[index];
    setEditingOffer(offer.id);
    setTempOfferData({ ...offer });
    // تحديد نوع الإدخال تلقائياً حسب بيانات العرض
    if (offer.lineItems && offer.lineItems.length > 0) {
      setInputType('تفصيلي');
      setTempLineItems([...offer.lineItems]);
    } else {
      setInputType('إجمالي');
      setTempLineItems([]);
    }
  };

  /**
   * دالة التحقق من تطابق إجمالي العرض مع إجمالي أسعار الأصناف
   */
  const checkAmountConsistency = (index: number): boolean => {
    const offer = priceOffers[index];
    if (!offer || !offer.lineItems || offer.lineItems.length === 0) return true;

    const lineItemsTotal = offer.lineItems.reduce((sum, item) => {
      // إذا كانت الضرائب غير شاملة، نستخدم المبلغ قبل الضريبة
      return sum + (offer.taxIncluded === false ? (item.lineTotalBeforeTax || 0) : (item.lineTotal || 0));
    }, 0);

    const offerTotal = offer.amount || 0;
    const difference = Math.abs(lineItemsTotal - offerTotal);

    // السماح بفارق صغير (أقل من 1 ريال) لتجنب مشاكل التقريب
    return difference < 1;
  };

  /**
   * دالة حفظ التعديلات مع التحقق من صحة البيانات وتطابق المبالغ
   */
  const handleSaveOffer = async (index: number) => {
    const offer = priceOffers[index];

    if (!tempOfferData.vendor) {
      alert('يجب إدخال اسم المورد على الأقل');
      return;
    }

    // التحقق من اكتمال البيانات المطلوبة
    const requiredFields = ['vendor', 'offerNumber', 'amount', 'currency'];
    const missingFields = requiredFields.filter(field => !tempOfferData[field as keyof PriceOffer]);

    if (missingFields.length > 0) {
      alert(`الحقول التالية مطلوبة: ${missingFields.join(', ')}`);
      return;
    }

    if (tempOfferData.currency !== 'ريال' && (!tempOfferData.exchangeRate || tempOfferData.exchangeRate <= 0)) {
      alert('سعر الصرف مطلوب للعملات الأجنبية');
      return;
    }

    if (tempOfferData.taxIncluded === null) {
      alert('يجب تحديد حالة الضرائب');
      return;
    }

    // التحقق من تطابق المبالغ إذا كان هناك تفاصيل أصناف
    if (inputType === 'تفصيلي' && tempLineItems.length > 0) {
      const lineItemsTotal = tempLineItems.reduce((sum, item) => {
        // إذا كانت الضرائب غير شاملة، نستخدم المبلغ قبل الضريبة
        return sum + (tempOfferData.taxIncluded === false ? (item.lineTotalBeforeTax || 0) : (item.lineTotal || 0));
      }, 0);

      const offerTotal = tempOfferData.amount || 0;
      const difference = Math.abs(lineItemsTotal - offerTotal);

      if (difference >= 1) {
        setAmountMismatchData({
          offerId: offer.id,
          offerTotal,
          lineItemsTotal,
          difference
        });
        setShowAmountMismatchDialog(true);
        return;
      }
    }

    // دمج المواصفات السابقة إن وُجدت عند الحفظ النهائي لتفادي فقدانها
    let finalLineItems = inputType === 'تفصيلي' ? tempLineItems : [];
    if (offer.lineItems && finalLineItems.length > 0) {
      finalLineItems = finalLineItems.map(li => {
        const prev = offer.lineItems!.find(p => p.lineNumber === li.lineNumber || p.itemId === li.itemId);
        return prev ? { ...li, vendorSpecifications: li.vendorSpecifications ?? prev.vendorSpecifications } : li;
      });
    }

    // تحديث العرض مع البيانات الجديدة
    const updates: Partial<PriceOffer> = {
      ...tempOfferData,
      lineItems: finalLineItems,
      result: tempOfferData.result || '' as OfferResult
    };

    handleUpdateOffer(index, updates);
    setEditingOffer(null);
    setTempOfferData({});
    setTempLineItems([]);
    await savePurchaseOrder();
  };

  /**
   * دالة معالجة عدم تطابق المبالغ مع خيارات الحل
   */
  const handleAmountMismatch = async (action: 'updateOffer' | 'saveWithNote') => {
    if (!amountMismatchData) return;
    const { offerId, lineItemsTotal } = amountMismatchData;

    if (action === 'updateOffer') {
      // تحديث إجمالي مبلغ العرض بحسب إجمالي الأصناف
      setTempOfferData(prev => ({
        ...prev,
        amount: lineItemsTotal,
        total: lineItemsTotal,
        totalAfterTax: lineItemsTotal
      }));
    } else if (action === 'saveWithNote') {
      // الحفظ مع إضافة ملاحظة عن الخطأ
      setTempOfferData(prev => ({
        ...prev,
        notes: (prev.notes || '') + '\n⚠️ ملاحظة: يوجد اختلاف بين إجمالي مبلغ العرض وإجمالي أسعار الأصناف'
      }));
    }

    setShowAmountMismatchDialog(false);
    setAmountMismatchData(null);

    // متابعة عملية الحفظ
    setTimeout(() => {
      const offerIndex = priceOffers.findIndex(o => o.id === amountMismatchData?.offerId);
      if (offerIndex !== -1) {
        handleSaveOffer(offerIndex);
      }
    }, 100);
  };

  /**
   * دالة إلغاء التعديل مع تنظيف البيانات المؤقتة
   */
  const handleCancelEdit = () => {
    setEditingOffer(null);
    setTempOfferData({});
    setTempLineItems([]);
    setTempAwardedItems([]);
  };

  /**
   * دالة التحقق من الكميات وإظهار الرسائل التحذيرية
   */
  const validateQuantities = (
    type: 'offered' | 'awarded',
    lineNumber: number,
    offeredQty: number,
    awardedQty?: number,
    onConfirm?: () => void
  ) => {
    const poItem = poItems.find(item => item.lineNumber === lineNumber);
    if (!poItem) return true;

    const requestedQty = poItem.quantity;

    if (type === 'offered' && offeredQty > requestedQty) {
      setShowQuantityWarning({
        type: 'offered',
        offerId: editingOffer || '',
        lineNumber,
        requested: requestedQty,
        offered: offeredQty,
        message: `الكمية المقدمة (${offeredQty}) تتجاوز الكمية المطلوبة (${requestedQty})`,
        onConfirm: onConfirm || (() => { })
      });
      return false;
    }

    if (type === 'awarded' && awardedQty !== undefined) {
      if (awardedQty > offeredQty) {
        setShowQuantityWarning({
          type: 'awarded',
          offerId: editingOffer || '',
          lineNumber,
          requested: requestedQty,
          offered: offeredQty,
          awarded: awardedQty,
          message: `الكمية المرسى عليها (${awardedQty}) تتجاوز الكمية المقدمة (${offeredQty})`,
          onConfirm: onConfirm || (() => { })
        });
        return false;
      }

      if (awardedQty > requestedQty) {
        setShowQuantityWarning({
          type: 'awarded',
          offerId: editingOffer || '',
          lineNumber,
          requested: requestedQty,
          offered: offeredQty,
          awarded: awardedQty,
          message: `الكمية المرسى عليها (${awardedQty}) تتجاوز الكمية المطلوبة (${requestedQty})`,
          onConfirm: onConfirm || (() => { })
        });
        return false;
      }
    }

    return true;
  };

  /**
   * دالة تحديث سطر في تفاصيل الأصناف مع إعادة حساب الإجماليات
   */
  const handleUpdateLineItem = (index: number, updates: Partial<OfferLineItem>) => {
    const updatedLineItems = tempLineItems.map((item, i) => {
      if (i === index) {
        // Preserve existing vendorSpecifications if not explicitly provided in updates
        const merged: OfferLineItem = {
          ...item,
          ...updates,
          vendorSpecifications: updates.vendorSpecifications ?? item.vendorSpecifications,
        } as OfferLineItem;

        // إعادة حساب إجمالي السطر عند تغيير الكمية أو السعر
        if ('offeredQty' in updates || 'unitPrice' in updates) {
          const qty = merged.offeredQty || 0;
          const price = merged.unitPrice || 0;

          // حساب الإجمالي قبل الضريبة
          merged.lineTotalBeforeTax = qty * price;

          // حساب الإجمالي بعد الضريبة
          if (tempOfferData.taxIncluded === false) {
            merged.lineTotalAfterTax = qty * (price * (105 / 98));
            merged.unitPriceAfterTax = Math.round((price * (105 / 98)) * 100) / 100;
          } else {
            merged.lineTotalAfterTax = qty * price;
            merged.unitPriceAfterTax = price;
          }

          merged.lineTotal = merged.lineTotalAfterTax;
        }

        return merged;
      }
      return item;
    });

    setTempLineItems(updatedLineItems);

    // تحديث نتيجة العرض تلقائياً بناءً على الكميات المرسى عليها
    updateOfferResultBasedOnAwarded(updatedLineItems);
  };

  /**
   * دالة تحديث نتيجة العرض تلقائياً بناءً على الكميات المرسى عليها
   */
  const updateOfferResultBasedOnAwarded = (lineItems: OfferLineItem[]) => {
    if (!editingOffer) return;

    const hasAwardedItems = lineItems.some(item => (item.awardedQty || 0) > 0);
    if (!hasAwardedItems) return;

    const allFullyAwarded = lineItems.every(item => {
      const awardedQty = item.awardedQty || 0;
      const offeredQty = item.offeredQty || 0;
      return awardedQty > 0 && awardedQty === offeredQty;
    });

    const newResult = allFullyAwarded ? 'مطابق' : 'مطابق جزئي';

    setTempOfferData(prev => ({
      ...prev,
      result: newResult
    }));
  };

  /**
   * دالة إضافة سطر في تفاصيل الأصناف
   */
  const handleAddLineItem = () => {
    if (!showLineItemsModal) return;

    const newLineItem: OfferLineItem = {
      itemId: `line-${Date.now()}`,
      lineNumber: tempLineItems.length + 1, // رقم السطر
      name: '',  // اسم الصنف
      unit: '', // وحدة القياس
      requestedQty: 0, // الكمية المطلوبة
      offeredQty: 0, // الكمية المقدمة
      unitPrice: 0, // السعرUNT
      lineTotal: 0, // إجمالي السطر
      awarded: false, // هل تم الإرساء على الصنف
      specifications: {}, // مواصفات الصنف المطلوب
      commitments: [] // التزامات الصنف
    };

    setTempLineItems([...tempLineItems, newLineItem]);
  };

  /**
   * دالة حذف سطر من تفاصيل الأصناف
   */
  const handleRemoveLineItem = (index: number) => {
    setTempLineItems(tempLineItems.filter((_, i) => i !== index));
  };

  /**
   * دالة فتح نافذة المواصفات مع تهيئة الحقول من الأصناف المطلوبة
   */
  // const handleOpenSpecifications = (offerId: string, lineNumber: number) => {
  //   const offer = priceOffers.find(o => o.id === offerId);
  //   const lineItem = offer?.lineItems?.find(li => li.lineNumber === lineNumber);

  //   // تهيئة المواصفات من الأصناف المطلوبة كحقول فارغة
  //   const poItem = poItems.find(item => item.lineNumber === lineNumber);
  //   const initialSpecs: { [key: string]: string } = {};

  //   if (poItem?.specifications) {
  //     // إنشاء حقول فارغة بناءً على مواصفات الصنف المطلوب
  //     Object.keys(poItem.specifications).forEach(key => {
  //       initialSpecs[key] = lineItem?.vendorSpecifications?.[key] ?? '';
  //     });
  //   }

  //   // إضافة أي مواصفات إضافية موجودة من المورد
  //   if (lineItem?.vendorSpecifications) {
  //     Object.entries(lineItem.vendorSpecifications).forEach(([key, value]) => {
  //       if (!(key in initialSpecs)) {
  //         // Ensure string type; if vendor spec value is undefined, default to empty string
  //         initialSpecs[key] = value ?? '';
  //       }
  //     });
  //   }

  //   setTempSpecifications(initialSpecs);
  //   setShowSpecificationsModal({ offerId, lineNumber });
  // };

  // دالة فتح نافذة المواصفات مع تهيئة الحقول من الأصناف المطلوبة
  const handleOpenSpecifications = (offerId: string, lineNumber: number) => {
    const offer = priceOffers.find(o => o.id === offerId);
    const lineItem = offer?.lineItems?.find(li => li.lineNumber === lineNumber);

    // تهيئة المواصفات من الأصناف المطلوبة كحقول فارغة
    const poItem = poItems.find(item => item.lineNumber === lineNumber);
    const initialSpecs: { [key: string]: string } = {};

    if (poItem?.specifications) {
      // إنشاء حقول فارغة بناءً على مواصفات الصنف المطلوب
      Object.keys(poItem.specifications).forEach(key => {
        initialSpecs[key] = lineItem?.vendorSpecifications?.[key] ?? '';
      });
    }

    // إضافة أي مواصفات إضافية موجودة من المورد
    if (lineItem?.vendorSpecifications) {
      Object.entries(lineItem.vendorSpecifications).forEach(([key, value]) => {
        if (!(key in initialSpecs)) {
          // التأكد من أن القيمة سلسلة نصية
          initialSpecs[key] = typeof value === 'string' ? value : String(value || '');
        }
      });
    }

    setTempSpecifications(initialSpecs);
    setShowSpecificationsModal({ offerId, lineNumber });
  };

  // اضافة دالة مساعدة للتحقق من صحة المواصفات
  const isValidSpecification = (specs: any): specs is { [key: string]: string } => {
    return typeof specs === 'object' &&
      specs !== null &&
      !Array.isArray(specs) &&
      Object.keys(specs).length > 0;
  };

  /**
   * دالة حفظ المواصفات مع التحقق من التطابق
   */
  // const handleSaveSpecifications = () => {
  //   if (!showSpecificationsModal) return;
  //   const { offerId, lineNumber } = showSpecificationsModal;

  //   specsSavePendingRef.current = true;

  //   // تحديث المواصفات في العرض
  //   setPriceOffers(priceOffers.map(offer => {
  //     if (offer.id === offerId && offer.lineItems) {
  //       const updatedLineItems = offer.lineItems.map(li => {
  //         if (li.lineNumber === lineNumber) {
  //           return {
  //             ...li,
  //             vendorSpecifications: { ...tempSpecifications }
  //           };
  //         }
  //         return li;
  //       });
  //       return { ...offer, lineItems: updatedLineItems };
  //     }
  //     return offer;
  //   }));

  //   setShowSpecificationsModal(null);
  //   setTempSpecifications({});

  //   // سيتم الحفظ في useEffect التالي بعد تحديث الحالة
  // };

  //  تعديل دالة حفظ المواصفات في صفحة عروض الأسعار

  // دالة حفظ المواصفات مع التحقق من التطابق
  const handleSaveSpecifications = async () => {
    if (!showSpecificationsModal) return;
    const { offerId, lineNumber } = showSpecificationsModal;

    // تحديث المواصفات في العرض
    setPriceOffers(prevOffers => {
      return prevOffers.map(offer => {
        if (offer.id === offerId) {
          const updatedLineItems = [...(offer.lineItems || [])];
          const lineItemIndex = updatedLineItems.findIndex(li => li.lineNumber === lineNumber);

          if (lineItemIndex !== -1) {
            // تحديث المواصفات للسطر المحدد
            updatedLineItems[lineItemIndex] = {
              ...updatedLineItems[lineItemIndex],
              vendorSpecifications: { ...tempSpecifications }
            };
          } else {
            // إذا لم يكن السطر موجودًا، أضف سطرًا جديدًا
            const poItem = poItems.find(item => item.lineNumber === lineNumber);
            if (poItem) {
              updatedLineItems.push({
                itemId: poItem.id,
                lineNumber: poItem.lineNumber,
                name: poItem.name,
                unit: poItem.unit,
                requestedQty: poItem.quantity,
                offeredQty: poItem.quantity,
                unitPrice: 0,
                lineTotal: 0,
                awarded: false,
                specifications: {},
                vendorSpecifications: { ...tempSpecifications },
                commitments: []
              });
            }
          }

          return {
            ...offer,
            lineItems: updatedLineItems
          };
        }
        return offer;
      });
    });

    setShowSpecificationsModal(null);
    setTempSpecifications({});

    // حفظ التغييرات في قاعدة البيانات فوراً
    try {
      await savePurchaseOrder();
      console.log("تم حفظ المواصفات بنجاح في قاعدة البيانات");
    } catch (error) {
      console.error("خطأ في حفظ المواصفات:", error);
    }
  };

  /**
   * دالة فتح نافذة الالتزامات (على مستوى السطر أو المورد)
   */
  const handleOpenCommitments = (offerId: string, lineNumber?: number) => {
    const offer = priceOffers.find(o => o.id === offerId);

    if (lineNumber !== undefined) {
      // التزامات على مستوى السطر
      const lineItem = offer?.lineItems?.find(li => li.lineNumber === lineNumber);
      setTempCommitments(lineItem?.commitments || []);
    } else {
      // التزامات على مستوى المورد
      setTempCommitments(offer?.commitments || []);
    }

    setShowCommitmentsModal({ offerId, lineNumber });
  };

  /**
   * دالة حفظ الالتزامات حسب المستوى (سطر أو مورد)
   */
  // const handleSaveCommitments = () => {
  //   if (!showCommitmentsModal) return;
  //   const { offerId, lineNumber } = showCommitmentsModal;

  //   setPriceOffers(priceOffers.map(offer => {
  //     if (offer.id === offerId) {
  //       if (lineNumber !== undefined && offer.lineItems) {
  //         // حفظ على مستوى السطر
  //         const updatedLineItems = offer.lineItems.map(li => {
  //           if (li.lineNumber === lineNumber) {
  //             return { ...li, commitments: [...tempCommitments.filter(c => c.trim())] };
  //           }
  //           return li;
  //         });
  //         return { ...offer, lineItems: updatedLineItems };
  //       } else {
  //         // حفظ على مستوى المورد
  //         return { ...offer, commitments: [...tempCommitments.filter(c => c.trim())] };
  //       }
  //     }
  //     return offer;
  //   }));

  //   setShowCommitmentsModal(null);
  //   setTempCommitments([]);
  //   savePurchaseOrder();
  // };

  // تعديل دالة حفظ الالتزامات لتحسين الأداء
  // دالة حفظ الالتزامات حسب المستوى (سطر أو مورد)
const handleSaveCommitments = () => {
  if (!showCommitmentsModal) return;
  const { offerId, lineNumber } = showCommitmentsModal;
  
  // استخدام setTimeout لتجنب مشاكل التحديث المتزامن
  setTimeout(() => {
    setPriceOffers(prevOffers => {
      return prevOffers.map(offer => {
        if (offer.id === offerId) {
          if (lineNumber !== undefined && offer.lineItems) {
            // حفظ على مستوى السطر
            const updatedLineItems = offer.lineItems.map(li => {
              if (li.lineNumber === lineNumber) {
                return { 
                  ...li, 
                  commitments: [...tempCommitments.filter(c => c && c.trim())] 
                };
              }
              return li;
            });
            return { ...offer, lineItems: updatedLineItems };
          } else {
            // حفظ على مستوى المورد
            return { 
              ...offer, 
              commitments: [...tempCommitments.filter(c => c && c.trim())] 
            };
          }
        }
        return offer;
      });
    });
    
    setShowCommitmentsModal(null);
    setTempCommitments([]);
    
    // حفظ التغييرات في قاعدة البيانات
    savePurchaseOrder();
  }, 0);
};


  /**
   * دالة إضافة التزام جديد
   */
  const handleAddCommitment = () => {
    setTempCommitments([...tempCommitments, '']);
  };

  /**
   * دالة تحديث التزام محدد
   */
  const handleUpdateCommitment = (index: number, value: string) => {
    const updatedCommitments = tempCommitments.map((commitment, i) =>
      i === index ? value : commitment
    );
    setTempCommitments(updatedCommitments);
  };

  /**
   * دالة حذف التزام محدد
   */
  const handleRemoveCommitment = (index: number) => {
    setTempCommitments(tempCommitments.filter((_, i) => i !== index));
  };

  /**
   * دالة التحقق من اكتمال العرض
   */
  const isOfferComplete = (offer: PriceOffer): boolean => {
    return !!(
      offer.vendor &&
      offer.offerNumber &&
      offer.amount > 0 &&
      offer.currency &&
      offer.taxIncluded !== null &&
      (offer.currency === 'ريال' || (offer.exchangeRate && offer.exchangeRate > 0))
    );
  };

  /**
   * دالة إعادة استخدام سعر الصرف من عروض أخرى
   */
  const getReuseableExchangeRate = (currency: string): number | undefined => {
    const existingOffer = priceOffers.find(offer =>
      offer.currency === currency && offer.exchangeRate && offer.exchangeRate > 0
    );
    return existingOffer?.exchangeRate;
  };

  /**
   * دالة حساب إجمالي تفاصيل الأصناف
   */
  const calculateLineItemsTotal = (lineItems: OfferLineItem[]): number => {
    return lineItems.reduce((sum, item) => sum + (item.lineTotal || 0), 0);
  };

  /**
   * دالة حساب إجمالي الكميات المرسى عليها
   */
  const calculateAwardedTotal = (lineItems: OfferLineItem[]): number => {
    return lineItems.reduce((sum, item) => {
      const awardedQty = item.awardedQty || 0;
      const price = item.unitPriceAfterTax || item.unitPrice || 0;
      return sum + (awardedQty * price);
    }, 0);
  };

  /**
   * دالة فتح نافذة الكميات المرسى عليها
   */
  const handleOpenAwardedItems = (offerId: string) => {
    const offer = priceOffers.find(o => o.id === offerId);
    if (offer && offer.lineItems) {
      setTempAwardedItems([...offer.lineItems]);
    } else {
      // إنشاء قائمة من الأصناف المطلوبة للترسية
      const awardedItems = poItems.map(item => ({
        itemId: item.id,
        lineNumber: item.lineNumber,
        name: item.name,
        unit: item.unit,
        requestedQty: item.quantity,
        offeredQty: item.quantity,
        unitPrice: 0,
        lineTotal: 0,
        awarded: false,
        awardedQty: 0,
        specifications: {}, // مواصفات الصنف المطلوب
        commitments: []
      }));
      setTempAwardedItems(awardedItems);
    }
    setShowAwardedItemsModal(offerId);
  };

  /**
   * دالة حفظ تفاصيل الترسية
   */
  const handleSaveAwardedItems = () => {
    if (!showAwardedItemsModal) return;

    // تحديث العرض مع تفاصيل الترسية مع الحفاظ على vendorSpecifications إن وُجدت
    const offerIndex = priceOffers.findIndex(o => o.id === showAwardedItemsModal);
    if (offerIndex !== -1) {
      const existing = priceOffers[offerIndex].lineItems || [];
      const mergedItems = tempAwardedItems.map(t => {
        const prev = existing.find(p => p.lineNumber === t.lineNumber || p.itemId === t.itemId);
        return prev ? { ...t, vendorSpecifications: prev.vendorSpecifications ?? t.vendorSpecifications } : t;
      });

      // تحديد النتيجة تلقائياً بناءً على الكميات المرسى عليها
      const hasAnyAwarded = mergedItems.some(li => (li.awardedQty || 0) > 0 || li.awarded);
      let newResult: OfferResult = '' as OfferResult;

      if (hasAnyAwarded) {
        const fullyAwarded = mergedItems.every(li => {
          const awardedQty = li.awardedQty || 0;
          const offeredQty = li.offeredQty || 0;
          return awardedQty > 0 && awardedQty === offeredQty;
        });
        newResult = fullyAwarded ? 'مطابق' : 'مطابق جزئي';
      }

      handleUpdateOffer(offerIndex, { lineItems: mergedItems, result: newResult });

      // تحديث التوصية تلقائياً: إضافة الموردين الذين لديهم ترسية فقط
      const vendorName = priceOffers[offerIndex].vendor;
      if (vendorName && hasAnyAwarded) {
        setRecommendation((prev: any) => {
          const existingRec = prev?.selectedOffers || [];
          const already = existingRec.some((o: any) => o.vendor === vendorName);

          if (already) return prev || null;

          // حساب المبلغ بناءً على الكميات المرسى عليها فقط
          const awardedTotal = mergedItems.reduce((sum, li) => {
            if (li.awarded || (li.awardedQty || 0) > 0) {
              const awardedQty = li.awardedQty || li.offeredQty || 0;
              const unitPrice = li.unitPriceAfterTax || li.unitPrice || 0;
              return sum + (awardedQty * unitPrice);
            }
            return sum;
          }, 0);

            
          const currency = priceOffers[offerIndex].currency;
          const totalInYR = awardedTotal * (priceOffers[offerIndex].exchangeRate || 1);
          const awardedLineNumbers = mergedItems
            .filter(li => li.awarded || (li.awardedQty || 0) > 0)
            .map(li => li.lineNumber);
          const amountInWords = convertNumberToArabicWords(awardedTotal, currency);
          // حساب الكميات المرسى عليها فقط
          const newOffer = {
            vendor: vendorName,
            amount: awardedTotal,
            currency, // العملة 
            amountInWords,
            totalInYR,  // المبلغ بالريال
            awardedLineNumbers,
            lineItems: mergedItems.filter(li => li.awarded || (li.awardedQty || 0) > 0).map(li => ({
              lineNumber: li.lineNumber,
              name: li.name,
              unit: li.unit,
              awardedQty: li.awardedQty || li.offeredQty || 0,
              unitPrice: li.unitPriceAfterTax || li.unitPrice || 0,
              total: (li.awardedQty || li.offeredQty || 0) * (li.unitPriceAfterTax || li.unitPrice || 0),
              commitments: li.commitments || []
            }))
          } as any;

          return { selectedOffers: [...existingRec, newOffer] } as any;
        });
      }
    }

    setShowAwardedItemsModal(null);
    savePurchaseOrder();
  };

  /**
   * دالة فتح نافذة إضافة أسعار الأصناف مع تهيئة البيانات
   */
  const handleOpenLineItemsModal = (offerId: string) => {
    const offer = priceOffers.find(o => o.id === offerId);

    // تهيئة البيانات المؤقتة للعرض الحالي
    if (offer && offer.lineItems) {
      setTempLineItems([...offer.lineItems]);
    } else {
      // إنشاء قائمة من الأصناف المطلوبة
      const lineItems = poItems.map(item => ({
        itemId: item.id,
        lineNumber: item.lineNumber,
        name: item.name,
        unit: item.unit,
        requestedQty: item.quantity,
        offeredQty: item.quantity,
        unitPrice: 0,
        lineTotal: 0,
        awarded: false,
        specifications: {},
        vendorSpecifications: {},
        commitments: []
      }));
      setTempLineItems(lineItems);
    }

    // تحديث بيانات العرض المؤقتة
    if (offer) {
      setTempOfferData({ ...offer });
    }

    setShowLineItemsModal(offerId);
  };

  /**
   * دالة تحديث قيمة الإدخال
   */
  const handleInputChange = (offerId: string, field: string, value: string) => {
    setInputValues(prev => ({
      ...prev,
      [`${offerId}-${field}`]: value
    }));
  };

  // Save after specs update to avoid losing changes due to async state batching
  useEffect(() => {
    if (specsSavePendingRef.current) {
      specsSavePendingRef.current = false;
      savePurchaseOrder();
    }
  }, [priceOffers]);

  /**
   * دالة معالجة الضغط على مفتاح Enter للانتقال إلى الحقل التالي
   */
  const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>, fieldIndex: number, totalFields: number, offerIndex: number) => {
    if (e.key === 'Enter' || e.key === 'Tab') {
      e.preventDefault();

      // التحقق من الحقل الحالي قبل الانتقال
      const currentField = e.currentTarget;
      const fieldName = currentField.getAttribute('data-field-name');
      const offer = priceOffers[offerIndex];

      // التحقق من الحقل الحالي إذا كان إلزامياً
      if (fieldName && !isCurrentFieldValid(fieldName, offer)) {
        // عرض رسالة تنبيه وعدم الانتقال
        showFieldRequiredAlert(fieldName);
        return;
      }

      // الانتقال إلى الحقل التالي في نفس العرض
      const nextFieldIndex = (fieldIndex + 1) % totalFields;
      const nextFields = document.querySelectorAll(`[data-field-index="${nextFieldIndex}"]`);

      if (nextFields.length > offerIndex) {
        const nextField = nextFields[offerIndex] as HTMLInputElement;
        if (nextField) {
          nextField.focus();
        }
      }
    }
  };

  /**
   * دالة للتحقق من صحة الحقل الحالي
   */
  const isCurrentFieldValid = (fieldName: string, offer: PriceOffer): boolean => {
    switch (fieldName) {
      case 'vendor':
        return !!offer.vendor && offer.vendor.trim() !== '';
      case 'offerNumber':
        return !!offer.offerNumber && offer.offerNumber.trim() !== '';
      case 'currency':
        return !!offer.currency;
      case 'exchangeRate':
        return offer.currency === 'ريال' || (offer.exchangeRate && offer.exchangeRate > 0);
      case 'taxIncluded':
        return offer.taxIncluded !== null;
      case 'amount':
        return offer.amount > 0;
      default:
        return true;
    }
  };

  /**
   * دالة لعرض رسالة تنبيه مناسبة للحقل المطلوب
   */
  const showFieldRequiredAlert = (fieldName: string) => {
    let message = '';
    switch (fieldName) {
      case 'vendor':
        message = 'يجب إدخال اسم مقدم العرض';
        break;
      case 'offerNumber':
        message = 'يجب إدخال رقم العرض';
        break;
      case 'currency':
        message = 'يجب اختيار العملة';
        break;
      case 'exchangeRate':
        message = 'يجب إدخال سعر الصرف للعملات الأجنبية';
        break;
      case 'taxIncluded':
        message = 'يجب تحديد حالة الضرائب';
        break;
      case 'amount':
        message = 'يجب إدخال إجمالي مبلغ العرض';
        break;
      default:
        message = 'يجب إدخال قيمة هذا الحقل';
    }

    alert(message);
  };

  /**
   * دالة التحقق من الحقول الإلزامية قبل الانتقال إلى العرض التالي
   */
  const validateRequiredFields = (offerIndex: number): boolean => {
    const offer = priceOffers[offerIndex];

    // التحقق من الحقول الإلزامية بالترتيب المحدد
    if (!offer.vendor || offer.vendor.trim() === '') {
      alert('يجب إدخال اسم مقدم العرض قبل الانتقال إلى العرض التالي');
      // التركيز على حقل مقدم العرض
      const vendorField = document.querySelector(`[data-field-name="vendor"][data-offer-index="${offerIndex}"]`) as HTMLInputElement;
      if (vendorField) vendorField.focus();
      return false;
    }

    if (!offer.offerNumber || offer.offerNumber.trim() === '') {
      alert('يجب إدخال رقم العرض قبل الانتقال إلى العرض التالي');
      // التركيز على حقل رقم العرض
      const offerNumberField = document.querySelector(`[data-field-name="offerNumber"][data-offer-index="${offerIndex}"]`) as HTMLInputElement;
      if (offerNumberField) offerNumberField.focus();
      return false;
    }

    if (!offer.currency) {
      alert('يجب اختيار العملة قبل الانتقال إلى العرض التالي');
      // التركيز على حقل العملة
      const currencyField = document.querySelector(`[data-field-name="currency"][data-offer-index="${offerIndex}"]`) as HTMLInputElement;
      if (currencyField) currencyField.focus();
      return false;
    }

    if (offer.currency !== 'ريال' && (!offer.exchangeRate || offer.exchangeRate <= 0)) {
      alert('يجب إدخال سعر الصرف للعملات الأجنبية قبل الانتقال إلى العرض التالي');
      // التركيز على حقل سعر الصرف
      const exchangeRateField = document.querySelector(`[data-field-name="exchangeRate"][data-offer-index="${offerIndex}"]`) as HTMLInputElement;
      if (exchangeRateField) exchangeRateField.focus();
      return false;
    }

    if (offer.taxIncluded === null) {
      alert('يجب تحديد حالة الضرائب قبل الانتقال إلى العرض التالي');
      // التركيز على حقل الضرائب
      const taxField = document.querySelector(`[data-field-name="taxIncluded"][data-offer-index="${offerIndex}"]`) as HTMLInputElement;
      if (taxField) taxField.focus();
      return false;
    }

    if (offer.amount <= 0) {
      alert('يجب إدخال إجمالي مبلغ العرض قبل الانتقال إلى العرض التالي');
      // التركيز على حقل إجمالي المبلغ
      const amountField = document.querySelector(`[data-field-name="amount"][data-offer-index="${offerIndex}"]`) as HTMLInputElement;
      if (amountField) amountField.focus();
      return false;
    }

    return true;
  };

  return (
    <div className="bg-white rounded-lg shadow-lg p-4 mb-4 border border-gray-200 print:mb-0 print-container">
      {/* رأس القسم المحسن */}
      <div className="flex items-center justify-between mb-4 print:mb-2">
        <div className="flex items-center gap-4">
          <h2 className="text-xl font-semibold flex items-center text-gray-800">
            <DollarSign className="ml-2 icon" size={20} />
            عروض الأسعار
          </h2>
          {/* عرض إحصائيات العروض */}
          <div className="flex items-center gap-4 text-sm text-gray-600 print:hidden">
            <span>العدد: {priceOffers.length}</span>
            <span>المكتملة: {priceOffers.filter(offer => isOfferComplete(offer)).length}</span>
            <span>المطابقة: {priceOffers.filter(offer => offer.result === 'مطابق').length}</span>
          </div>
        </div>
        {/* إعدادات عدد العروض ونوع الإدخال */}
        <div className="flex items-center gap-4 print:hidden">
          <div className="flex items-center gap-2">
            <label className="text-sm font-medium">عدد العروض:</label>
            <select
              value={offerCount}
              onChange={(e) => setOfferCount(parseInt(e.target.value))}
              className="border border-gray-300 rounded px-2 py-1 text-sm"
            >
              {[1, 2, 3, 4, 5, 6, 7, 8].map(num => (
                <option key={num} value={num}>{num}</option>
              ))}
            </select>
          </div>
          <div className="flex items-center gap-2">
            <label className="text-sm font-medium">نوع الإدخال:</label>
            <select
              value={inputType}
              onChange={(e) => setInputType(e.target.value as 'إجمالي' | 'تفصيلي')}
              className="border border-gray-300 rounded px-2 py-1 text-sm"
            >
              <option value="إجمالي">إجمالي</option>
              <option value="تفصيلي">تفصيلي</option>
            </select>
          </div>
        </div>
      </div>

      {/* جدول العروض الرئيسي المحسن - عمود لكل مورد */}
      <div className="overflow-x-auto print:overflow-visible">
        <table className="w-full border-collapse border border-gray-300 rounded-lg overflow-hidden">
          <thead>
            <tr className="bg-gradient-to-r from-blue-600 to-blue-700 text-white">
              <th className="border border-gray-300 p-3 text-center font-semibold" style={{ width: '20%' }}>
                البيان
              </th>
              {priceOffers.map((_, index) => (
                <th
                  key={index}
                  className="border border-gray-300 p-3 text-center font-medium"
                  style={{ width: `${80 / priceOffers.length}%` }}
                >
                  العرض {index + 1}
                </th>
              ))}
            </tr>
          </thead>
          <tbody>
            {/* سطر مقدم العرض */}
            <tr>
              <td className="border border-gray-300 p-3 font-medium bg-gray-50 text-center">مقدم العرض</td>
              {priceOffers.map((offer, index) => (
                <td key={offer.id} className="border border-gray-300 p-2">
                  <div className="relative">
                    <input
                      ref={(el) => vendorInputRefs.current[index] = el}
                      type="text"
                      value={offer.vendor || ''}
                      onChange={(e) => {
                        handleUpdateOffer(index, { vendor: e.target.value });
                        searchVendors(e.target.value, index);
                      }}
                      onFocus={() => {
                        if (offer.vendor) {
                          searchVendors(offer.vendor, index);
                        }
                      }}
                      onBlur={(e) => {
                        // إخفاء اقتراحات الموردين فقط عند المغادرة
                        setTimeout(() => {
                          setShowVendorSuggestions(prev => ({ ...prev, [index]: false }));
                        }, 200);
                      }}
                      onKeyDown={(e) => handleKeyDown(e, 0, 6, index)}
                      data-field-index={0}
                      data-field-name="vendor"
                      data-offer-index={index}
                      className="w-full border-0 focus:outline-none print:bg-transparent p-1 text-center"
                      placeholder="اسم مقدم العرض"
                      required
                    />
                    {showVendorSuggestions[index] && vendorSuggestions.length > 0 && (
                      <div className="absolute z-10 w-full bg-white border border-gray-300 rounded-md shadow-lg mt-1 max-h-40 overflow-y-auto print:hidden">
                        {vendorSuggestions.map((suggestion, i) => (
                          <div
                            key={i}
                            className="px-3 py-2 hover:bg-blue-50 cursor-pointer text-right"
                            onMouseDown={() => {
                              handleUpdateOffer(index, { vendor: suggestion });
                              setShowVendorSuggestions(prev => ({ ...prev, [index]: false }));
                            }}
                          >
                            {suggestion}
                          </div>
                        ))}
                      </div>
                    )}
                  </div>
                </td>
              ))}
            </tr>

            {/* سطر رقم العرض */}
            <tr className={`${!isPreliminaryPrint ? 'print:hidden' : ''}`}>
              <td className="border border-gray-300 p-3 font-medium bg-gray-50 text-center">رقم العرض</td>
              {priceOffers.map((offer, index) => (
                <td key={offer.id} className="border border-gray-300 p-2">
                  <input
                    type="text"
                    value={offer.offerNumber || ''}
                    onChange={(e) => handleUpdateOffer(index, { offerNumber: e.target.value })}
                    onBlur={(e) => {
                      // لا يتم التحقق عند المغادرة لتجنب الرسائل المزعجة
                    }}
                    onKeyDown={(e) => handleKeyDown(e, 1, 6, index)}
                    data-field-index={1}
                    data-field-name="offerNumber"
                    data-offer-index={index}
                    className="w-full border-0 focus:outline-none print:bg-transparent p-1 text-center"
                    placeholder="رقم العرض"
                    style={{ fontFamily: 'Arial, sans-serif' }}
                    required
                  />
                </td>
              ))}
            </tr>

            {/* سطر العملة */}
            <tr>
              <td className="border border-gray-300 p-3 font-medium bg-gray-50 text-center">العملة</td>
              {priceOffers.map((offer, index) => (
                <td key={offer.id} className="border border-gray-300 p-2">
                  <select
                    value={offer.currency || 'ريال'}
                    onChange={(e) => {
                      const newCurrency = e.target.value as Currency;

                      // جلب سعر صرف سابق لنفس العملة إن وُجد لضمان التوحيد بين العروض
                      const existingRate = newCurrency !== 'ريال' ? getReuseableExchangeRate(newCurrency) : undefined;

                      // تحديث العملة وسعر الصرف معاً
                      // - في حال الريال: تفريغ سعر الصرف
                      // - في حال عملة أجنبية: استخدم السعر السابق إن وُجد وإلا اجعله فارغاً لإلزام الإدخال لاحقاً
                      handleUpdateOffer(index, {
                        currency: newCurrency,
                        exchangeRate: newCurrency === 'ريال' ? undefined : existingRate
                      });
                    }}
                    onBlur={(e) => {
                      // لا يتم التحقق عند المغادرة لتجنب الرسائل المزعجة
                    }}
                    onKeyDown={(e) => handleKeyDown(e, 2, 6, index)}
                    data-field-index={2}
                    data-field-name="currency"
                    data-offer-index={index}
                    className="w-full border rounded p-1 text-center print:hidden"
                    required
                  >
                    <option value="ريال">ريال</option>
                    <option value="دولار">دولار</option>
                    <option value="ريال سعودي">ريال سعودي</option>
                    <option value="يورو">يورو</option>
                  </select>
                  <div className="hidden print:block text-center">
                    {offer.currency || 'ريال'}
                  </div>
                </td>
              ))}
            </tr>

            {/* سطر سعر الصرف */}
            <tr className="exchange-rate-row">
              <td className="border border-gray-300 p-3 font-medium bg-gray-50 text-center">سعر الصرف</td>
              {priceOffers.map((offer, index) => (
                <td key={offer.id} className="border border-gray-300 p-2 print:p-0.5 print:text-xs">
                  {offer.currency !== 'ريال' && (
                    <input
                      type="number"
                      value={offer.exchangeRate ?? ''}
                      onChange={(e) => {
                        const raw = e.target.value;
                        // اسمح بإفراغ الحقل لإظهاره كإلزامي قبل الحفظ
                        if (raw === '') {
                          handleUpdateOffer(index, { exchangeRate: undefined });
                          return;
                        }
                        const value = parseFloat(raw);
                        if (!isNaN(value) && value > 0) {
                          handleUpdateOffer(index, { exchangeRate: value });
                        } else {
                          // قيم غير صالحة -> اتركه undefined ليظل إلزامياً
                          handleUpdateOffer(index, { exchangeRate: undefined });
                        }
                      }}
                      onBlur={(e) => {
                        // لا يتم التحقق عند المغادرة لتجنب الرسائل المزعجة
                      }}
                      onKeyDown={(e) => handleKeyDown(e, 3, 6, index)}
                      data-field-index={3}
                      data-field-name="exchangeRate"
                      data-offer-index={index}
                      className="w-full border-0 focus:outline-none [appearance:textfield] print:bg-transparent bg-yellow-50 p-1 text-center"
                      style={{ fontFamily: 'Arial, sans-serif' }}
                      placeholder="سعر الصرف"
                      required
                    />
                  )}
                </td>
              ))}
            </tr>

            {/* سطر الضرائب */}
            <tr>
              <td className="border border-gray-300 p-3 font-medium bg-gray-50 text-center">الضرائب</td>
              {priceOffers.map((offer, index) => (
                <td key={offer.id} className="border border-gray-300 p-2">
                  <select
                    value={offer.taxIncluded === null ? '' : (offer.taxIncluded ? 'شامل' : 'غير شامل')}
                    onChange={(e) => {
                      const val = e.target.value as '' | 'شامل' | 'غير شامل';
                      handleUpdateOffer(index, {
                        taxIncluded: val === '' ? null : (val === 'شامل'),
                        result: offer.result // الحفاظ على النتيجة الحالية
                      });
                    }}
                    onKeyDown={(e) => handleKeyDown(e, 4, 6, index)}
                    data-field-index={4}
                    data-field-name="taxIncluded"
                    data-offer-index={index}
                    className="w-full border-0 focus:outline-none print:hidden p-1 text-center"
                    required
                  >
                    <option value="">اختر</option>
                    <option value="شامل">شامل</option>
                    <option value="غير شامل">غير شامل</option>
                  </select>
                  <div className="hidden print:block">
                    {offer.taxIncluded === null ? 'اختر' : (offer.taxIncluded ? 'شامل' : 'غير شامل')}
                  </div>
                </td>
              ))}
            </tr>

            {/* سطر إجمالي مبلغ العرض */}
            <tr>
              <td className="border border-gray-300 p-3 font-medium bg-gray-50 text-center">إجمالي مبلغ العرض</td>
              {priceOffers.map((offer, index) => (
                <td key={offer.id} className="border border-gray-300 p-2">
                  <input
                    type="text"
                    inputMode="decimal"
                    value={inputValues[`${offer.id}-amount`] || (offer.amount ? formatNumberWithCommas(offer.amount) : '')}
                    onChange={(e) => {
                      const raw = e.target.value;
                      if (/^\d*\.?\d*$/.test(raw)) {
                        handleInputChange(offer.id, 'amount', raw);
                        handleUpdateOffer(index, {
                          inputValue: raw,
                          amount: parseFloat(raw) || 0
                        });
                      }
                    }}
                    onBlur={(e) => {
                      const raw = e.target.value.replace(/,/g, '');
                      const parsed = parseFloat(raw);
                      if (!isNaN(parsed)) {
                        handleUpdateOffer(index, {
                          amount: parsed,
                          inputValue: parsed.toLocaleString('en-US', {
                            minimumFractionDigits: 2,
                            maximumFractionDigits: 2
                          })
                        });
                      } else {
                        handleUpdateOffer(index, { inputValue: '', amount: 0 });
                      }

                      // لا يتم التحقق عند المغادرة لتجنب الرسائل المزعجة
                    }}
                    onFocus={(e) => {
                      if (offer.amount !== undefined && offer.amount !== 0) {
                        handleInputChange(offer.id, 'amount', offer.amount.toString());
                      } else {
                        handleInputChange(offer.id, 'amount', '');
                      }
                    }}
                    onKeyDown={(e) => handleKeyDown(e, 5, 6, index)}
                    data-field-index={5}
                    data-field-name="amount"
                    data-offer-index={index}
                    className="no-spin w-full border-0 focus:outline-none [appearance:textfield] print:bg-transparent p-1 text-center text-black-700 font-semibold"
                    style={{ fontFamily: 'Arial, sans-serif' }}
                    placeholder="0.00"
                    required
                  />
                </td>
              ))}
            </tr>

            {/* سطر الإجمالي بعد الضرائب */}
            <tr>
              <td className="border border-gray-300 p-3 font-medium bg-gray-50 text-center">
                إجمالي مبلغ العرض
                <br />
                <span style={{ fontSize: '0.8em', fontWeight: 'normal' }}>(بعد الضرائب)</span>
              </td>
              {priceOffers.map((offer) => (
                <td key={offer.id} className="text-blue-600 font-bold border border-gray-300 p-2">
                  <input
                    type="text"
                    value={formatNumberWithCommas(offer.total || offer.totalAfterTax || 0)}
                    readOnly
                    className="w-full bg-gray-100 border-0 print:bg-transparent p-1 text-center"
                    style={{ fontFamily: 'Arial, sans-serif' }}
                  />
                </td>
              ))}
            </tr>

            {/* سطر المعادل بالريال اليمني - منفصل */}
            <tr className="bg-gray-50">
              <td className="border border-gray-300 p-3 font-medium text-center">المعادل بالريال اليمني</td>
              {priceOffers.map((offer) => (
                <td key={offer.id} className="text-green-600 font-bold border border-gray-300 p-2">
                  <input
                    type="text"
                    value={offer.totalInYR ? formatNumberWithCommas(offer.totalInYR) : ''}
                    readOnly
                    className="w-full bg-gray-100 border-0 print:bg-transparent p-1 text-center"
                    style={{ fontFamily: 'Arial, sans-serif' }}
                  />
                </td>
              ))}
            </tr>

            {/* سطر النتيجة */}
            <tr>
              <td className="border border-gray-300 p-3 font-medium bg-gray-50 text-center">النتيجة</td>
              {priceOffers.map((offer, index) => (
                <td key={offer.id} className="border border-gray-300 p-2">
                  <select
                    value={offer.result || ''}
                    onChange={(e) => {
                      const value = e.target.value as PriceOffer['result'];
                      handleUpdateOffer(index, { result: value });
                      if (value === 'مطابق جزئي') {
                        handleOpenAwardedItems(offer.id);
                      }
                    }}
                    className="border rounded p-1"
                  >
                    <option value="">اختر النتيجة</option>
                    <option value="مطابق">مطابق</option>
                    <option value="غير مطابق">غير مطابق</option>
                    <option value="مطابق جزئي">مطابق جزئي</option>
                  </select>
                </td>
              ))}
            </tr>

            {/* سطر الأزرار - منفصل */}
            <tr className="print:hidden">
              <td className="border border-gray-300 p-3 font-medium bg-gray-50 text-center">الإجراءات</td>
              {priceOffers.map((offer, index) => (
                <td key={offer.id} className="border border-gray-300 p-2">
                  <div className="flex flex-col gap-2">
                    <button
                      onClick={() => handleOpenLineItemsModal(offer.id)}
                      disabled={!isOfferComplete(offer)}
                      className="w-full px-2 py-1 bg-purple-600 text-white rounded text-sm hover:bg-purple-700 disabled:bg-gray-300"
                    >
                      إضافة أسعار الأصناف
                    </button>
                    <button
                      onClick={() => handleOpenAwardedItems(offer.id)}
                      disabled={!isOfferComplete(offer)}
                      className="w-full px-2 py-1 bg-green-600 text-white rounded text-sm hover:bg-green-700 disabled:bg-gray-300"
                    >
                      إضافة الكميات المرسى عليها
                    </button>
                  </div>
                </td>
              ))}
            </tr>
          </tbody>
        </table>
      </div>

      {/* رسائل التحذير المحسنة */}
      <div className="mt-4 print:hidden space-y-2">
        {priceOffers.some((offer, index) => !isOfferComplete(offer)) && (
          <div className="bg-yellow-50 border border-yellow-200 rounded-md p-3">
            <div className="flex items-center gap-2">
              <AlertTriangle className="w-5 h-5 text-yellow-600" />
              <p className="text-yellow-800 text-sm font-medium">
                يوجد عروض غير مكتملة. الحقول المطلوبة: مقدم العرض، رقم العرض، العملة، المبلغ، حالة الضرائب
                {priceOffers.some(offer => offer.currency !== 'ريال' && (!offer.exchangeRate || offer.exchangeRate <= 0)) &&
                  '، سعر الصرف للعملات الأجنبية'
                }
              </p>
            </div>
          </div>
        )}
        {priceOffers.some((offer, index) => !checkAmountConsistency(index)) && (
          <div className="bg-red-50 border border-red-200 rounded-md p-3">
            <div className="flex items-start gap-2">
              <AlertTriangle className="w-5 h-5 text-red-600 mt-0.5" />
              <div className="text-red-800 text-sm">
                <p className="font-medium mb-1">يوجد عدم تطابق في المبالغ بين إجمالي العرض وإجمالي أسعار الأصناف في العروض التالية:</p>
                <ul className="list-disc pr-5 space-y-0.5">
                  {priceOffers.map((offer, idx) => {
                    if (!offer || !offer.lineItems || offer.lineItems.length === 0) return null;
                    const lineItemsTotal = offer.lineItems.reduce((sum, item) => {
                      return sum + (offer.taxIncluded === false ? (item.lineTotalBeforeTax || 0) : (item.lineTotal || 0));
                    }, 0);
                    const offerTotal = offer.amount || 0;
                    const difference = Math.abs(lineItemsTotal - offerTotal);
                    if (difference < 1) return null;
                    const name = offer.vendor?.trim() ? offer.vendor : `العرض ${idx + 1}`;
                    return (
                      <li key={offer.id}>
                        {name}: الفرق {formatNumberWithCommas(difference)} ({formatNumberWithCommas(lineItemsTotal)} مقابل {formatNumberWithCommas(offerTotal)})
                      </li>
                    );
                  }).filter(Boolean)}
                </ul>
              </div>
            </div>
          </div>
        )}
      </div>

      {/* نافذة إضافة أسعار الأصناف */}
      {showLineItemsModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 print:hidden">
          <div className="bg-white rounded-lg shadow-xl max-w-7xl w-full max-h-[90vh] overflow-y-auto">
            <div className="p-6">
              <div className="flex items-center justify-between mb-4">
                <h3 className="text-lg font-semibold flex items-center">
                  <FileText className="ml-2" size={20} />
                  إضافة أسعار الأصناف - {priceOffers.find(o => o.id === showLineItemsModal)?.vendor}
                </h3>
                <button
                  onClick={() => setShowLineItemsModal(null)}
                  className="text-gray-500 hover:text-gray-700"
                >
                  <X size={24} />
                </button>
              </div>

              {/* عرض إجمالي مبلغ العرض والمتبقي */}
              {(() => {
                const offer = priceOffers.find(o => o.id === showLineItemsModal);
                const isNonTax = (tempOfferData.taxIncluded === false) || (offer?.taxIncluded === false);
                const lineItemsTotal = isNonTax
                  ? tempLineItems.reduce((sum, li) => sum + (li.lineTotalBeforeTax || 0), 0)
                  : calculateLineItemsTotal(tempLineItems);
                const offerTotal = isNonTax ? (offer?.amount || 0) : ((offer?.total ?? offer?.amount) || 0);
                const remaining = offerTotal - lineItemsTotal;

                return (
                  <div className="mb-6 p-4 bg-blue-50 rounded-lg border border-blue-200">
                    <div className="grid grid-cols-3 gap-4 text-center">
                      <div>
                        <div className="text-sm text-gray-600">إجمالي مبلغ العرض</div>
                        <div className="text-lg font-semibold text-blue-800">
                          {formatNumberWithCommas(offerTotal)} {offer?.currency}
                        </div>
                      </div>
                      <div>
                        <div className="text-sm text-gray-600">إجمالي أسعار الأصناف</div>
                        <div className="text-lg font-semibold text-purple-800">
                          {formatNumberWithCommas(lineItemsTotal)} {offer?.currency}
                        </div>
                      </div>
                      <div>
                        <div className="text-sm text-gray-600">المتبقي</div>
                        <div className={`text-lg font-semibold ${Math.abs(remaining) < 1 ? 'text-green-600' : 'text-red-600'
                          }`}>
                          {formatNumberWithCommas(remaining)} {offer?.currency}
                        </div>
                      </div>
                    </div>
                  </div>
                );
              })()}

              {/* جدول إضافة أسعار الأصناف */}
              <div className="mb-6">
                <h4 className="font-medium mb-3">إضافة أسعار الأصناف</h4>
                <div className="overflow-x-auto">
                  <table className="w-full border-collapse border border-gray-300">
                    <thead>
                      <tr className="bg-gray-100">
                        <th className="border border-gray-300 p-2 text-center">السطر</th>
                        <th className="border border-gray-300 p-2 text-center">بيان الصنف</th>
                        <th className="border border-gray-300 p-2 text-center">الوحدة</th>
                        <th className="border border-gray-300 p-2 text-center">الكمية المطلوبة</th>
                        <th className="border border-gray-300 p-2 text-center">الكمية المقدمة</th>
                        {tempOfferData.taxIncluded === false && (
                          <>
                            <th className="border border-gray-300 p-2 text-center">سعر الوحدة (قبل الضريبة)</th>
                            <th className="border border-gray-300 p-2 text-center">سعر الوحدة (بعد الضريبة)</th>
                          </>
                        )}
                        <th className="border border-gray-300 p-2 text-center">سعر الوحدة</th>
                        <th className="border border-gray-300 p-2 text-center">إجمالي السطر</th>
                        <th className="border border-gray-300 p-2 text-center">المواصفات</th>
                      </tr>
                    </thead>
                    <tbody>
                      {poItems.map((poItem, itemIndex) => {
                        const lineItem = tempLineItems.find(li => li.lineNumber === poItem.lineNumber) || {
                          itemId: poItem.id,
                          lineNumber: poItem.lineNumber,
                          name: poItem.name,
                          unit: poItem.unit,
                          requestedQty: poItem.quantity,
                          offeredQty: 0,
                          unitPrice: 0,
                          lineTotal: 0,
                          awarded: false,
                          specifications: {},
                          commitments: []
                        };

                        return (
                          <tr key={`line-${poItem.lineNumber}`} className="hover:bg-gray-50">
                            <td className="border border-gray-300 p-2 text-center">{poItem.lineNumber}</td>
                            <td className="border border-gray-300 p-2">{poItem.name}</td>
                            <td className="border border-gray-300 p-2 text-center">{poItem.unit}</td>
                            <td className="border border-gray-300 p-2 text-center">{poItem.quantity}</td>
                            <td className="border border-gray-300 p-2">
                              <input
                                type="number"
                                value={lineItem.offeredQty}
                                onChange={(e) => {
                                  const newQty = parseFloat(e.target.value) || 0;
                                  const existingIndex = tempLineItems.findIndex(li => li.lineNumber === poItem.lineNumber);

                                  if (existingIndex >= 0) {
                                    // التحقق من الكمية المقدمة
                                    if (newQty > poItem.quantity) {
                                      if (!validateQuantities('offered', poItem.lineNumber, newQty, undefined, () => {
                                        handleUpdateLineItem(existingIndex, { offeredQty: newQty });
                                      })) {
                                        return;
                                      }
                                    }
                                    handleUpdateLineItem(existingIndex, { offeredQty: newQty });
                                  } else {
                                    if (newQty > poItem.quantity) {
                                      if (!validateQuantities('offered', poItem.lineNumber, newQty, undefined, () => {
                                        setTempLineItems([...tempLineItems, { ...lineItem, offeredQty: newQty }]);
                                      })) {
                                        return;
                                      }
                                    }
                                    setTempLineItems([...tempLineItems, { ...lineItem, offeredQty: newQty }]);
                                  }
                                }}
                                className="w-full text-center border border-gray-300 rounded px-2 py-1 text-sm"
                                min="0"
                                step="0.01"
                              />
                            </td>
                            {tempOfferData.taxIncluded === false && (
                              <>
                                <td className="border border-gray-300 p-2">
                                  <input
                                    type="number"
                                    value={lineItem.unitPrice || 0}
                                    onChange={(e) => {
                                      const newPrice = parseFloat(e.target.value) || 0;
                                      const existingIndex = tempLineItems.findIndex(li => li.lineNumber === poItem.lineNumber);

                                      if (existingIndex >= 0) {
                                        handleUpdateLineItem(existingIndex, { unitPrice: newPrice });
                                      } else {
                                        setTempLineItems([...tempLineItems, { ...lineItem, unitPrice: newPrice }]);
                                      }
                                    }}
                                    className="w-full text-center border border-gray-300 rounded px-2 py-1 text-sm"
                                    min="0"
                                    step="0.01"
                                  />
                                </td>
                                <td className="border border-gray-300 p-2 text-center">
                                  {lineItem.unitPriceAfterTax ? formatNumberWithCommas(lineItem.unitPriceAfterTax) : '-'}
                                </td>
                              </>
                            )}
                            <td className="border border-gray-300 p-2">
                              <input
                                type="number"
                                value={lineItem.unitPrice || 0}
                                onChange={(e) => {
                                  const newPrice = parseFloat(e.target.value) || 0;
                                  const existingIndex = tempLineItems.findIndex(li => li.lineNumber === poItem.lineNumber);

                                  if (existingIndex >= 0) {
                                    handleUpdateLineItem(existingIndex, { unitPrice: newPrice });
                                  } else {
                                    setTempLineItems([...tempLineItems, { ...lineItem, unitPrice: newPrice }]);
                                  }
                                }}
                                className="w-full text-center border border-gray-300 rounded px-2 py-1 text-sm"
                                min="0"
                                step="0.01"
                              />
                            </td>
                            <td className="border border-gray-300 p-2 text-center">
                              <span className="font-medium">
                                {formatNumberWithCommas(lineItem.lineTotal)}
                              </span>
                            </td>
                            <td className="border border-gray-300 p-2 text-center">
                              <button
                                onClick={() => handleOpenSpecifications(showLineItemsModal, poItem.lineNumber)}
                                className="px-2 py-1 bg-blue-600 text-white rounded text-xs hover:bg-blue-700"
                              >
                                مواصفات
                              </button>
                            </td>
                          </tr>
                        );
                      })}
                    </tbody>
                  </table>
                </div>
              </div>

              {/* أزرار التحكم */}
              <div className="flex justify-between">
                <button
                  onClick={() => handleOpenCommitments(showLineItemsModal)}
                  className="px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700"
                >
                  التزامات المورد
                </button>
                <div className="flex gap-2">
                  <button
                    onClick={() => setShowLineItemsModal(null)}
                    className="px-4 py-2 bg-gray-500 text-white rounded-md hover:bg-gray-600"
                  >
                    إغلاق
                  </button>
                  <button
                    onClick={() => {
                      // التحقق من تطابق المبالغ قبل الحفظ
                      const offer = priceOffers.find(o => o.id === showLineItemsModal);
                      const lineItemsTotal = calculateLineItemsTotal(tempLineItems);
                      const offerTotal = offer?.total || offer?.amount || 0;
                      const difference = Math.abs(lineItemsTotal - offerTotal);

                      if (difference >= 1) {
                        setAmountMismatchData({
                          offerId: showLineItemsModal,
                          offerTotal,
                          lineItemsTotal,
                          difference
                        });
                        setShowAmountMismatchDialog(true);
                        return;
                      }

                      // حفظ تفاصيل الأصناف في العرض
                      const offerIndex = priceOffers.findIndex(o => o.id === showLineItemsModal);
                      if (offerIndex !== -1) {
                        handleUpdateOffer(offerIndex, { lineItems: tempLineItems });
                      }

                      setShowLineItemsModal(null);
                      savePurchaseOrder();
                    }}
                    className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                  >
                    حفظ التفاصيل
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* نافذة تفاصيل الترسية (الكميات المرسى عليها) */}
      {showAwardedItemsModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 print:hidden">
          <div className="bg-white rounded-lg shadow-xl max-w-6xl w-full max-h-[90vh] overflow-y-auto">
            <div className="p-6">
              <div className="flex items-center justify-between mb-4">
                <h3 className="text-lg font-semibold flex items-center">
                  <Award className="ml-2" size={20} />
                  تفاصيل الترسية - {priceOffers.find(o => o.id === showAwardedItemsModal)?.vendor}
                </h3>
                <button
                  onClick={() => setShowAwardedItemsModal(null)}
                  className="text-gray-500 hover:text-gray-700"
                >
                  <X size={24} />
                </button>
              </div>

              {/* جدول الكميات المرسى عليها */}
              <div className="mb-6">
                <h4 className="font-medium mb-3">الكميات المرسى عليها</h4>
                <div className="overflow-x-auto">
                  <table className="w-full border-collapse border border-gray-300">
                    <thead>
                      <tr className="bg-green-100">
                        <th className="border border-gray-300 p-2 text-center">السطر</th>
                        <th className="border border-gray-300 p-2 text-center">بيان الصنف</th>
                        <th className="border border-gray-300 p-2 text-center">الكمية المطلوبة</th>
                        <th className="border border-gray-300 p-2 text-center">الكمية المقدمة</th>
                        <th className="border border-gray-300 p-2 text-center">الكمية المرسى عليها</th>
                        <th className="border border-gray-300 p-2 text-center">مرسى؟</th>
                        <th className="border border-gray-300 p-2 text-center">التزامات السطر</th>
                      </tr>
                    </thead>
                    <tbody>
                      {tempAwardedItems.map((item, index) => (
                        <tr key={`awarded-${item.lineNumber}`} className="hover:bg-gray-50">
                          <td className="border border-gray-300 p-2 text-center">{item.lineNumber}</td>
                          <td className="border border-gray-300 p-2">{item.name}</td>
                          <td className="border border-gray-300 p-2 text-center">{item.requestedQty}</td>
                          <td className="border border-gray-300 p-2 text-center">{item.offeredQty}</td>
                          <td className="border border-gray-300 p-2">
                            <input
                              type="number"
                              value={item.awardedQty || 0}
                              onChange={(e) => {
                                const newQty = parseFloat(e.target.value) || 0;
                                const updatedItems = tempAwardedItems.map((aItem, i) =>
                                  i === index ? { ...aItem, awardedQty: newQty, awarded: newQty > 0 } : aItem
                                );
                                setTempAwardedItems(updatedItems);
                              }}
                              className="w-full text-center border border-gray-300 rounded px-2 py-1 text-sm"
                              min="0"
                              step="0.01"
                            />
                          </td>
                          <td className="border border-gray-300 p-2 text-center">
                            <input
                              type="checkbox"
                              checked={item.awarded || (item.awardedQty || 0) > 0}
                              onChange={(e) => {
                                const updatedItems = tempAwardedItems.map((aItem, i) =>
                                  i === index ? { ...aItem, awarded: e.target.checked } : aItem
                                );
                                setTempAwardedItems(updatedItems);
                              }}
                              className="w-4 h-4"
                            />
                          </td>
                          <td className="border border-gray-300 p-2 text-center">
                            <button
                              onClick={() => handleOpenCommitments(showAwardedItemsModal!, item.lineNumber)}
                              className="px-2 py-1 bg-green-600 text-white rounded text-xs hover:bg-green-700"
                            >
                              التزامات
                            </button>
                          </td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>
              </div>

              {/* حقل الإجمالي للكميات المرسى عليها */}
              <div className="mb-6 p-4 bg-green-50 rounded-lg border border-green-200">
                <div className="text-center">
                  <div className="text-sm text-gray-600">إجمالي الكميات المرسى عليها (بعد الضريبة)</div>
                  <div className="text-lg font-semibold text-green-800">
                    {formatNumberWithCommas(calculateAwardedTotal(tempAwardedItems))} {tempOfferData.currency}
                  </div>
                </div>
              </div>

              {/* أزرار التحكم */}
              <div className="flex justify-between">
                <button
                  onClick={() => handleOpenCommitments(showAwardedItemsModal!)}
                  className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                >
                  التزامات المورد ككل
                </button>
                <div className="flex gap-2">
                  <button
                    onClick={() => setShowAwardedItemsModal(null)}
                    className="px-4 py-2 bg-gray-500 text-white rounded-md hover:bg-gray-600"
                  >
                    إغلاق
                  </button>
                  <button
                    onClick={handleSaveAwardedItems}
                    className="px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700"
                  >
                    حفظ تفاصيل الترسية
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* نافذة المواصفات المحسنة */}
      {showSpecificationsModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 print:hidden">
          <div className="bg-white rounded-lg shadow-xl max-w-md w-full">
            <div className="p-6">
              <div className="flex items-center justify-between mb-4">
                <h3 className="text-lg font-semibold">مواصفات الصنف</h3>
                <button
                  onClick={() => setShowSpecificationsModal(null)}
                  className="text-gray-500 hover:text-gray-700"
                >
                  <X size={20} />
                </button>
              </div>

              {/* عرض المواصفات المطلوبة كمرجع */}
              {(() => {
                const poItem = poItems.find(item => item.lineNumber === showSpecificationsModal.lineNumber);
                return poItem?.specifications && Object.keys(poItem.specifications).length > 0 && (
                  <div className="mb-4 p-3 bg-blue-50 rounded-lg border border-blue-200">
                    <h4 className="font-medium text-blue-800 mb-2">المواصفات المطلوبة:</h4>
                    {Object.entries(poItem.specifications).map(([key, value]) => (
                      <div key={key} className="text-sm text-blue-700">
                        <strong>{key}:</strong> {value}
                      </div>
                    ))}
                  </div>
                );
              })()}

              {/* إدخال المواصفات المقدمة من المورد */}
              <div className="space-y-3">
                <h4 className="font-medium text-gray-800">المواصفات المقدمة من المورد:</h4>
                {Object.entries(tempSpecifications).map(([key, value]) => (
                  <div key={key} className="flex gap-2 items-center">
                    <label className="w-24 text-sm font-medium">{key}:</label>
                    <input
                      type="text"
                      value={value}
                      onChange={(e) => setTempSpecifications(prev => ({
                        ...prev,
                        [key]: e.target.value
                      }))}
                      className="flex-1 border border-gray-300 rounded px-2 py-1 text-sm"
                      placeholder={`أدخل ${key} المقدم`}
                    />
                  </div>
                ))}

                {/* إضافة مواصفة جديدة */}
                <button
                  onClick={() => {
                    const newKey = prompt('اسم المواصفة الجديدة:');
                    if (newKey) {
                      setTempSpecifications(prev => ({
                        ...prev,
                        [newKey]: ''
                      }));
                    }
                  }}
                  className="w-full px-3 py-2 bg-blue-600 text-white rounded text-sm hover:bg-blue-700"
                >
                  إضافة مواصفة جديدة
                </button>
              </div>

              <div className="flex justify-end gap-2 mt-6">
                <button
                  onClick={() => setShowSpecificationsModal(null)}
                  className="px-4 py-2 bg-gray-500 text-white rounded-md hover:bg-gray-600"
                >
                  إلغاء
                </button>
                <button
                  onClick={handleSaveSpecifications}
                  className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                >
                  حفظ
                </button>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* نافذة الالتزامات المحسنة */}
      {showCommitmentsModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 print:hidden">
          <div className="bg-white rounded-lg shadow-xl max-w-md w-full">
            <div className="p-6">
              <div className="flex items-center justify-between mb-4">
                <h3 className="text-lg font-semibold">
                  {showCommitmentsModal.lineNumber !== undefined
                    ? `التزامات السطر ${showCommitmentsModal.lineNumber}`
                    : 'التزامات المورد ككل'
                  }
                </h3>
                <button
                  onClick={() => setShowCommitmentsModal(null)}
                  className="text-gray-500 hover:text-gray-700"
                >
                  <X size={20} />
                </button>
              </div>

              <div className="space-y-2 mb-4">
                {tempCommitments.map((commitment, index) => (
                  <div key={index} className="flex gap-2">
                    <input
                      type="text"
                      value={commitment}
                      onChange={(e) => handleUpdateCommitment(index, e.target.value)}
                      className="flex-1 border border-gray-300 rounded px-2 py-1 text-sm"
                      placeholder="أدخل الالتزام"
                    />
                    <button
                      onClick={() => handleRemoveCommitment(index)}
                      className="text-red-600 hover:text-red-800 p-1"
                    >
                      <X size={16} />
                    </button>
                  </div>
                ))}
              </div>

              <button
                onClick={handleAddCommitment}
                className="w-full px-3 py-2 bg-green-600 text-white rounded text-sm hover:bg-green-700 mb-4"
              >
                إضافة التزام جديد
              </button>

              <div className="flex justify-end gap-2">
                <button
                  onClick={() => setShowCommitmentsModal(null)}
                  className="px-4 py-2 bg-gray-500 text-white rounded-md hover:bg-gray-600"
                >
                  إلغاء
                </button>
                <button
                  onClick={handleSaveCommitments}
                  className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                >
                  حفظ
                </button>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* نافذة عدم تطابق المبالغ مع خيارات الحل */}
      {showAmountMismatchDialog && amountMismatchData && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 print:hidden">
          <div className="bg-white rounded-lg shadow-xl max-w-lg w-full">
            <div className="p-6">
              <div className="flex items-center gap-3 mb-4">
                <AlertTriangle className="w-8 h-8 text-red-600" />
                <h3 className="text-lg font-semibold text-red-800">عدم تطابق في المبالغ</h3>
              </div>

              <div className="mb-6 space-y-3">
                <div className="bg-red-50 p-4 rounded-lg border border-red-200">
                  <div className="grid grid-cols-2 gap-4 text-sm">
                    <div>
                      <span className="font-medium">إجمالي مبلغ العرض:</span>
                      <div className="text-lg font-semibold text-red-700">
                        {formatNumberWithCommas(amountMismatchData.offerTotal)}
                      </div>
                    </div>
                    <div>
                      <span className="font-medium">إجمالي أسعار الأصناف:</span>
                      <div className="text-lg font-semibold text-blue-700">
                        {formatNumberWithCommas(amountMismatchData.lineItemsTotal)}
                      </div>
                    </div>
                  </div>
                  <div className="mt-3 pt-3 border-t border-red-300">
                    <span className="font-medium">الفارق:</span>
                    <div className="text-lg font-semibold text-red-800">
                      {formatNumberWithCommas(amountMismatchData.difference)}
                    </div>
                  </div>
                </div>
              </div>

              <div className="space-y-3">
                <p className="text-gray-700 font-medium">اختر إحدى الخيارات التالية:</p>

                <button
                  onClick={() => handleAmountMismatch('updateOffer')}
                  className="w-full p-4 bg-blue-50 border border-blue-200 rounded-lg hover:bg-blue-100 transition-colors text-right"
                >
                  <div className="font-medium text-blue-800">أ- تعديل إجمالي مبلغ العرض</div>
                  <div className="text-sm text-blue-600 mt-1">
                    سيتم تحديث إجمالي مبلغ العرض ليطابق إجمالي أسعار الأصناف
                  </div>
                </button>

                <button
                  onClick={() => handleAmountMismatch('saveWithNote')}
                  className="w-full p-4 bg-yellow-50 border border-yellow-200 rounded-lg hover:bg-yellow-100 transition-colors text-right"
                >
                  <div className="font-medium text-yellow-800">ب- الحفظ والتصحيح مع ملاحظة الخطأ</div>
                  <div className="text-sm text-yellow-600 mt-1">
                    سيتم الحفظ والتصحيح مع إضافة ملاحظة تشير إلى وجود اختلاف في المبالغ
                  </div>
                </button>
              </div>

              <div className="flex justify-end gap-2 mt-6">
                <button
                  onClick={() => {
                    setShowAmountMismatchDialog(false);
                    setAmountMismatchData(null);
                  }}
                  className="px-4 py-2 bg-gray-500 text-white rounded-md hover:bg-gray-600"
                >
                  إلغاء
                </button>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* نافذة الرسائل التحذيرية للكميات */}
      {showQuantityWarning && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 print:hidden">
          <div className="bg-white rounded-lg shadow-xl max-w-lg w-full">
            <div className="p-6">
              <div className="flex items-center gap-3 mb-4">
                <AlertTriangle className="w-8 h-8 text-yellow-600" />
                <h3 className="text-lg font-semibold text-yellow-800">تحذير</h3>
              </div>

              <div className="mb-6">
                <p className="text-gray-700 mb-4">{showQuantityWarning.message}</p>
                <p className="text-gray-600">هل تريد المتابعة رغم التحذير؟</p>
              </div>

              <div className="flex justify-end gap-2">
                <button
                  onClick={() => setShowQuantityWarning(null)}
                  className="px-4 py-2 bg-gray-500 text-white rounded-md hover:bg-gray-600"
                >
                  إلغاء
                </button>
                <button
                  onClick={() => {
                    // تنفيذ دالة التأكيد ثم إغلاق النافذة
                    showQuantityWarning.onConfirm();
                    setShowQuantityWarning(null);
                  }}
                  className="px-4 py-2 bg-yellow-600 text-white rounded-md hover:bg-yellow-700"
                >
                  تأكيد الحفظ
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};


; =========================================================================
الكود الرابع جدول التوصية
// purchases_alamin7-copy5\src\components\RecommendationSection.tsx
; =============================================================================


// purchases_alamin7-final\src\components\RecommendationSection.tsx
import React, { useEffect, useState } from 'react';
import { Award, Printer, Mail, X } from 'lucide-react';
import { usePurchaseOrder } from '../context/PurchaseOrderContext';
import { convertNumberToArabicWords, formatNumberWithCommas, toFixed2Raw } from '../utils/numberToWords';
import { OfferLineItem, RecommendedOffer } from '../types';

export const RecommendationSection: React.FC = () => {
  const {
    poNumber,
    transactionNumber,
    priceOffers,
    recommendation,
    setRecommendation,
    excludedOffers,
    setExcludedOffers,
    savePurchaseOrder,
    isPreliminaryPrint,
    setIsPreliminaryPrint,
    offerCount,
    clearAllFields,
    setPoNumber,
    checkDuplicatePurchaseOrder,
    getSignatoryForPrint,
    calculateMaxOfferAmountInYR,
    shouldShowFinalSignature,
    calculateTotalAwardedInYR,
    poItems,
    shouldShowPreliminarySignature,
    requesting,
    beneficiary,
    purchaseMethod
  } = usePurchaseOrder();

  const [printStatus, setPrintStatus] = useState<'idle' | 'processing' | 'success' | 'error'>('idle');
  const [manualAmounts, setManualAmounts] = useState<{ [vendor: string]: string }>({});
  const [showMessagesModal, setShowMessagesModal] = useState(false);
  const [messageType, setMessageType] = useState<'awarded' | 'excluded' | 'financial'>('awarded');
  const [printType, setPrintType] = useState<'preliminary' | 'final'>('preliminary');

  // تأثيرات إدارة الطباعة
  useEffect(() => {
    const handleBeforePrint = () => {
      console.log('بدء الطباعة...');
    };

    const handleAfterPrint = () => {
      console.log('انتهاء الطباعة...');
      if (isPreliminaryPrint) {
        setIsPreliminaryPrint(false);
      }
      
      // بعد طباعة التقرير الأساسي، إذا كانت الطباعة نهائية اطبع الرسائل الإضافية
      if (printType === 'final') {
        setTimeout(() => {
          try {
            handleAdditionalPrinting();
          } catch (e) {
            console.error('Failed to print additional letters after final report:', e);
          }
        }, 200);
      }
      
      setPrintStatus('idle');
    };

    window.addEventListener('beforeprint', handleBeforePrint);
    window.addEventListener('afterprint', handleAfterPrint);
    
    return () => {
      window.removeEventListener('beforeprint', handleBeforePrint);
      window.removeEventListener('afterprint', handleAfterPrint);
    };
  }, [isPreliminaryPrint, setIsPreliminaryPrint, printType]);

  // دالة تحديث المبلغ كتابة
  const updateAmountInWords = (offer: RecommendedOffer): RecommendedOffer => {
    const amount = offer.isManualAmount ? offer.manualAmount || 0 : offer.amount || 0;
    return {
      ...offer,
      amountInWords: convertNumberToArabicWords(amount, offer.currency)
    };
  };

  // دالة حساب الإجمالي بالريال
  const updateTotalAwardedInYR = (selectedOffers: RecommendedOffer[]) => {
    const totalInYR = selectedOffers.reduce((sum, offer) => {
      const originalOffer = priceOffers.find(po => po.vendor === offer.vendor);
      if (originalOffer) {
        if (offer.isManualAmount && offer.manualAmount !== undefined) {
          const exchangeRate = originalOffer.exchangeRate || 1;
          return sum + (offer.manualAmount * exchangeRate);
        } else {
          return sum + (originalOffer.totalInYR || 0);
        }
      }
      return sum;
    }, 0);
    
    const totalInYRWords = convertNumberToArabicWords(totalInYR, 'ريال يمني');
    return {
      totalAwardedInYR: totalInYR,
      totalAwardedInYRWords: totalInYRWords
    };
  };

  /**
   * دالة حساب المبالغ المرسى عليها بناءً على الكميات والأسعار شاملة الضريبة
   * هذه الدالة تحسب إجمالي المبالغ للكميات التي تم الإرساء عليها فقط، وليس إجمالي مبلغ العرض
   */
  const calculateAwardedAmount = (lineItems: OfferLineItem[], exchangeRate: number = 1) => {
    return lineItems.reduce((total, lineItem) => {
      if (lineItem.awarded || (lineItem.awardedQty && lineItem.awardedQty > 0)) {
        const awardedQty = lineItem.awardedQty || lineItem.offeredQty || 0;
        const unitPrice = lineItem.unitPriceAfterTax || lineItem.unitPrice || 0;
        return total + (awardedQty * unitPrice);
      }
      return total;
    }, 0) * exchangeRate;
  };

  // إضافة/إزالة مورد من التوصية
  const toggleVendorSelection = (vendor: string) => {
    const selectedOffer = priceOffers.find(offer => offer.vendor === vendor);
    if (!selectedOffer) return;

    // حساب إجمالي المبالغ للكميات المرسى عليها فقط
    let awardedTotal = 0;
    const awardedLineNumbers: number[] = [];
    const awardedLineItems: any[] = [];
    // const awardedLineItems: OfferLineItem[] = [];

    if (selectedOffer.lineItems && selectedOffer.lineItems.length > 0) {
      selectedOffer.lineItems.forEach(lineItem => {
        if (lineItem.awarded || (lineItem.awardedQty && lineItem.awardedQty > 0)) {
          const awardedQty = lineItem.awardedQty || lineItem.offeredQty || 0;
          // استخدام سعر الوحدة بعد الضريبة إذا كان متوفراً، وإلا السعر العادي
          const unitPrice = lineItem.unitPriceAfterTax || lineItem.unitPrice || 0;
          const lineTotal = awardedQty * unitPrice;
          
          awardedTotal += lineTotal;
          awardedLineNumbers.push(lineItem.lineNumber);
          
          // نقل الالتزامات على مستوى السطر
          awardedLineItems.push({
            lineNumber: lineItem.lineNumber,
            name: lineItem.name,
            unit: lineItem.unit,
            awardedQty: awardedQty,
            unitPrice: unitPrice,
            total: lineTotal,
            commitments: lineItem.commitments || [] // إضافة الالتزامات على مستوى السطر
          });
        }
      });
    }

    // في حال عدم وجود تفاصيل أصناف، استخدم إجمالي العرض
    if (awardedTotal === 0 && (!selectedOffer.lineItems || selectedOffer.lineItems.length === 0)) {
      awardedTotal = selectedOffer.total || 0;
    }

    const newOffer: RecommendedOffer = {
      vendor: selectedOffer.vendor,
      amount: awardedTotal, // استخدام المبلغ المحسوب للكميات المرسى عليها فقط
      currency: selectedOffer.currency,
      amount: awardedTotal,
      currency: selectedOffer.currency, // استخدام المبلغ المحسوب للكميات المرسى عليها فقط
      amountInWords: convertNumberToArabicWords(awardedTotal, selectedOffer.currency),
      isManualAmount: false,
      totalInYR: awardedTotal * (selectedOffer.exchangeRate || 1),
      awardedLineNumbers: awardedLineNumbers,
      lineItems: awardedLineItems
    };

    if (!recommendation) {
      const newSelectedOffers = [newOffer];
      const totals = updateTotalAwardedInYR(newSelectedOffers);
      setRecommendation({
        selectedOffers: newSelectedOffers,
        ...totals
      });
      return;
    }

    const existingOfferIndex = recommendation.selectedOffers.findIndex(
      offer => offer.vendor === vendor
    );
    
    let newSelectedOffers: RecommendedOffer[];
    if (existingOfferIndex >= 0) {
      newSelectedOffers = recommendation.selectedOffers.filter(
        offer => offer.vendor !== vendor
      );
    } else {
      newSelectedOffers = [...recommendation.selectedOffers, newOffer];
    }
    
    const totals = updateTotalAwardedInYR(newSelectedOffers);
    setRecommendation({
      selectedOffers: newSelectedOffers,
      ...totals
    });
  };

  // تحديث مبلغ مورد
  const updateOfferAmount = (vendor: string, newAmount: number | undefined, isManual: boolean = true) => {
    if (!recommendation) return;
    
    const updatedOffers = recommendation.selectedOffers.map(offer => {
      if (offer.vendor === vendor) {
        const nextAmount = newAmount ?? offer.amount; // ensure number
        const updatedOffer: RecommendedOffer = {
          ...offer,
          amount: nextAmount,
          manualAmount: isManual ? newAmount : undefined,
          isManualAmount: isManual
        };
        return updateAmountInWords(updatedOffer);
      }
      return offer;
    });
    
    const totals = updateTotalAwardedInYR(updatedOffers);
    setRecommendation({
      selectedOffers: updatedOffers,
      ...totals
    });
  };

  // إعادة تعيين المبلغ إلى القيمة الأصلية
  const resetOfferAmount = (vendor: string) => {
    const originalOffer = priceOffers.find(offer => offer.vendor === vendor);
    if (originalOffer) {
      updateOfferAmount(vendor, originalOffer.total, false);
      setManualAmounts(prev => ({ ...prev, [vendor]: formatNumberWithCommas(originalOffer.total) }));
    }
  };

  // الحصول على العروض المطابقة
  const matchingOffers = priceOffers.filter(offer =>
    (offer.result === 'مطابق' || offer.result === 'مطابق جزئي') && offer.vendor
  );

  // التحقق من صحة الطباعة الأولية
  const validatePreliminaryPrint = (): string | null => {
    const errors = [] as string[];
    if (!poNumber.trim()) errors.push('ادخال رقم طلب الشراء');
    if (!transactionNumber.trim()) errors.push('ادخال رقم المعاملة');
    if (!requesting?.trim()) errors.push('ادخال الجهة الطالبة');
    if (!beneficiary?.trim()) errors.push('ادخال الجهة المستفيدة');
    
    const hasValidOffers = priceOffers.some(
      offer => offer.vendor && ((offer.total ?? 0) > 0) && offer.currency
    );
    if (!hasValidOffers) {
      errors.push('تعبئة جدول عروض الاسعار');
    }
    
    return errors.length > 0 ? `يجب عليك ${errors.join(' - ')}` : null;
  };

  // التحقق من صحة الطباعة النهائية
  const validateFinalPrint = (): string | null => {
    const errors = [] as string[];
    if (!poNumber.trim()) errors.push('ادخال رقم طلب الشراء');
    if (!transactionNumber.trim()) errors.push('ادخال رقم المعاملة');
    if (!requesting?.trim()) errors.push('ادخال الجهة الطالبة');
    if (!beneficiary?.trim()) errors.push('ادخال الجهة المستفيدة');
    if (!purchaseMethod?.trim()) errors.push('تحديد طريقة الشراء');
    
    if (!recommendation || !recommendation.selectedOffers || recommendation.selectedOffers.length === 0) {
      errors.push('اختيار التوصية');
    }
    
    const hasResults = priceOffers.every(offer => offer.vendor ? !!offer.result : true);
    if (!hasResults) {
      errors.push('ادخال نتيجة المطابقة لجميع الموردين');
    }
    
    // const hasExclusionReasons = excludedOffers.every(offer => offer.reason.trim());
    // if (excludedOffers.length > 0 && !hasExclusionReasons) {
    //   errors.push('ادخال اسباب الاستبعاد');
    // }
    
    return errors.length > 0 ? `يجب عليك ${errors.join(' - ')}` : null;
  };

  // دالة الحصول على الالتزامات المصنفة
  const getCategorizedCommitments = (vendor: string) => {
    const offer = priceOffers.find(o => o.vendor === vendor);
    if (!offer) return { vendorLevel: [], lineLevel: [] };
    
    const vendorLevel = offer.commitments || [];
    const lineLevel = offer.lineItems
      ?.filter(item => (item.awarded || (item.awardedQty || 0) > 0) && item.commitments && item.commitments.length > 0)
      .map(item => ({
        lineNumber: item.lineNumber,
        commitments: item.commitments
      })) || [];
      
    return { vendorLevel, lineLevel };
  };

  // دالة التوقيعات الديناميكية
  const getDynamicSignatures = () => {
    const isPreliminaryMode = printType === 'preliminary';
    const amount = isPreliminaryMode ? calculateMaxOfferAmountInYR() : calculateTotalAwardedInYR();

    if (isPreliminaryMode) {
      if (amount <= 150000) {
        return [
          { title: "المختص", name: "الاسم", role: "---------------------" },
          { title: "رئيس القسم", name: "الاسم", role: "---------------------" },
          { title: "مدير الإدارة", name: "الاسم", role: "---------------------" }
        ];
      } else {
        return [
          { title: "المختص", name: "الاسم", role: "---------------------" },
          { title: "رئيس القسم", name: "الاسم", role: "---------------------" },
          { title: "مدير الإدارة", name: "الاسم", role: "---------------------" },
          { title: "مدير عام الإدارة", name: "الاسم", role: "---------------------" }
        ];
      }
    } else {
      if (amount <= 150000) {
        return [
          { title: "المختص", name: "الاسم", role: "---------------------" },
          { title: "رئيس قسم المشتريات", name: "الاسم", role: "---------------------" },
          { title: "مدير ادارة المشتريات", name: "الاسم", role: "---------------------" }
        ];
      } else {
        return [
          { title: "المختص", name: "الاسم", role: "---------------------" },
          { title: "رئيس قسم المشتريات", name: "الاسم", role: "---------------------" },
          { title: "مدير ادارة المشتريات", name: "الاسم", role: "---------------------" },
          { title: "مدير عام المشتريات والمخازن", name: "الاسم", role: "---------------------" }
        ];
      }
    }
  };

  // دالة تحديد المخاطب بناء على المبلغ
  const getRecipient = () => {
    const totalAwarded = calculateTotalAwardedInYR();
    return totalAwarded <= 150000 ? "الأخ/مدير عام المشتريات والمخازن" : "الأخ/المدير العام التنفيذي";
  };

  // دالة الطباعة الأولية
  const handlePreliminaryPrint = async () => {
    const validationError = validatePreliminaryPrint();
    if (validationError) {
      alert(validationError);
      return;
    }
    
    setPrintStatus('processing');
    setPrintType('preliminary');
    
    try {
      const saveSuccess = await savePurchaseOrder();
      if (!saveSuccess) {
        alert('فشل في حفظ البيانات. يرجى المحاولة مرة أخرى.');
        setPrintStatus('error');
        setTimeout(() => setPrintStatus('idle'), 3000);
        return;
      }
      
      // تحديث العروض المستبعدة
      let newExcludedOffers = excludedOffers.filter(ex => {
        const offer = priceOffers.find(o => o.vendor === ex.vendor);
        return !(offer && offer.result === 'مطابق');
      });
      
      let addedCount = 0;
      priceOffers.forEach((offer) => {
        if (offer.vendor && offer.vendor.trim() !== '' && (offer.amount || 0) > 0) {
          if (offer.result !== 'مطابق') {
            if (!newExcludedOffers.some(excluded => excluded.vendor === offer.vendor)) {
              newExcludedOffers.push({
                id: `excluded-preliminary-${Date.now()}-${offer.vendor}`,
                vendor: offer.vendor,
                reason: '',
                notes: '',
              });
              addedCount++;
            }
          }
        }
      });
      
      if (addedCount > 0) {
        setExcludedOffers(newExcludedOffers);
        setTimeout(async () => {
          await savePurchaseOrder();
        }, 100);
      }
      
      setIsPreliminaryPrint(true);
      setPrintStatus('success');
      
      setTimeout(() => {
        window.print();
      }, 100);
    } catch (error) {
      console.error('Error during preliminary print:', error);
      alert('حدث خطأ أثناء الطباعة الأولية.');
      setPrintStatus('error');
      setTimeout(() => setPrintStatus('idle'), 3000);
    }
  };

  // دالة إنشاء رسائل الموردين
  const generateVendorMessage = (vendor: string, type: 'awarded' | 'excluded'): string => {
    const offer = priceOffers.find(o => o.vendor === vendor);
    const selectedOffer = recommendation?.selectedOffers.find(s => s.vendor === vendor);
    const today = new Date().toLocaleDateString('ar-SA');
    
    if (type === 'awarded' && offer && selectedOffer) {
      const commitments = getCategorizedCommitments(vendor);
      
      let message = `بسم الله الرحمن الرحيم\n\n`;
      message += `التاريخ: ${today}\n`;
      message += `إلى: ${vendor}\n`;
      message += `الموضوع: إشعار ترسية طلب الشراء رقم ${poNumber}\n\n`;
      message += `تحية طيبة وبعد،\n\n`;
      message += `نتشرف بإبلاغكم بأنه تم الترسية عليكم في طلب الشراء رقم ${poNumber} `;
      message += `الخاص بـ ${beneficiary} بمبلغ إجمالي قدره `;
      message += `${formatNumberWithCommas(selectedOffer.isManualAmount ? selectedOffer.manualAmount || 0 : selectedOffer.amount || 0)} ${selectedOffer.currency}\n\n`;
      
      if (selectedOffer.awardedLineNumbers && selectedOffer.awardedLineNumbers.length > 0) {
        message += `الأسطر المرسى عليها: ${selectedOffer.awardedLineNumbers.join(', ')}\n\n`;
      }
      
      // إضافة تفاصيل الأصناف المرسى عليها
      if (selectedOffer.lineItems && selectedOffer.lineItems.length > 0) {
        message += `تفاصيل الأصناف المرسى عليها:\n\n`;
        selectedOffer.lineItems.forEach(item => {
          message += `- الصنف: ${item.name}\n`;
          message += `  الكمية: ${item.awardedQty} ${item.unit}\n`;
          message += `  سعر الوحدة: ${formatNumberWithCommas(item.unitPrice)} ${offer.currency}\n`;
          message += `  الإجمالي: ${formatNumberWithCommas(item.total)} ${offer.currency}\n`;
          
          if (item.commitments && item.commitments.length > 0) {
            message += `  الالتزامات: ${item.commitments.join(', ')}\n`;
          }
          
          message += `\n`;
        });
      }
      
      if (commitments.vendorLevel.length > 0) {
        message += `مع الالتزام بالآتي:\n`;
        commitments.vendorLevel.forEach((commitment, index) => {
          message += `${index + 1}. ${commitment}\n`;
        });
        message += `\n`;
      }
      
      if (commitments.lineLevel.length > 0) {
        message += `التزامات خاصة بالأسطر:\n`;
        commitments.lineLevel.forEach(lineCommitment => {
          message += `السطر ${lineCommitment.lineNumber}:\n`;
          (lineCommitment.commitments || []).forEach((commitment, index) => {
            message += `  ${index + 1}. ${commitment}\n`;
          });
        });
        message += `\n`;
      }
      
      message += `يرجى التواصل مع إدارة المشتريات لاستكمال الإجراءات.\n\n`;
      message += `مع تحياتنا،\n`;
      message += `إدارة المشتريات والمخازن`;
      
      return message;
    } else if (type === 'excluded') {
      let message = `بسم الله الرحمن الرحيم\n\n`;
      message += `التاريخ: ${today}\n`;
      message += `إلى: ${vendor}\n`;
      message += `الموضوع: إشعار عدم ترسية طلب الشراء رقم ${poNumber}\n\n`;
      message += `تحية طيبة وبعد،\n\n`;
      message += `نشكركم على مشاركتكم في طلب الشراء رقم ${poNumber} `;
      message += `الخاص بـ ${beneficiary}.\n\n`;
      message += `نأسف لإبلاغكم بأنه لم يتم الترسية عليكم في هذا الطلب `;
      message += `لأسباب فنية ومالية.\n\n`;
      message += `نتطلع للتعاون معكم في الفرص القادمة.\n\n`;
      message += `مع تحياتنا،\n`;
      message += `إدارة المشتريات والمخازن`;
      
      return message;
    }
    
    return '';
  };

  // دالة إنشاء رسالة الشؤون المالية
  const generateFinancialMessage = (): string => {
    const today = new Date().toLocaleDateString('ar-SA');
    const totalAwarded = calculateTotalAwardedInYR();
    
    let message = `بسم الله الرحمن الرحيم\n\n`;
    message += `التاريخ: ${today}\n`;
    message += `إلى: إدارة الشؤون المالية\n`;
    message += `الموضوع: إشعار ترسية طلب الشراء رقم ${poNumber}\n\n`;
    message += `تحية طيبة وبعد،\n\n`;
    message += `نفيدكم بأنه تم الترسية في طلب الشراء رقم ${poNumber} `;
    message += `رقم المعاملة ${transactionNumber} الخاص بـ ${beneficiary}\n\n`;
    
    message += `تفاصيل الترسية:\n`;
    recommendation?.selectedOffers.forEach((offer, index) => {
      message += `${index + 1}. ${offer.vendor}: `;
      message += `${formatNumberWithCommas(offer.isManualAmount ? offer.manualAmount || 0 : offer.amount || 0)} ${offer.currency}`;
      
      const originalOffer = priceOffers.find(po => po.vendor === offer.vendor);
      if (offer.currency !== 'ريال' && originalOffer) {
        const totalInYR = offer.isManualAmount && offer.manualAmount 
          ? offer.manualAmount * (originalOffer.exchangeRate || 1)
          : originalOffer.totalInYR || 0;
        message += ` (${formatNumberWithCommas(totalInYR)} ريال)`;
      }
      message += `\n`;
      
      // إضافة تفاصيل الأصناف المرسى عليها
      if (offer.lineItems && offer.lineItems.length > 0) {
        message += `   تفاصيل الأصناف:\n`;
        offer.lineItems.forEach(item => {
          message += `   - ${item.name}: ${item.awardedQty} ${item.unit} × ${formatNumberWithCommas(item.unitPrice)} = ${formatNumberWithCommas(item.total)} ${offer.currency}\n`;
        });
      }
    });
    
    message += `\nالإجمالي: ${formatNumberWithCommas(totalAwarded)} ريال\n`;
    message += `الإجمالي كتابة: ${convertNumberToArabicWords(totalAwarded, 'ريال')}\n\n`;
    message += `يرجى اتخاذ الإجراءات المالية اللازمة.\n\n`;
    message += `مع تحياتنا،\n`;
    message += `إدارة المشتريات والمخازن`;
    
    return message;
  };

  // دالة نسخ الرسالة إلى الحافظة
  const copyMessageToClipboard = (message: string) => {
    navigator.clipboard.writeText(message).then(() => {
      alert('تم نسخ الرسالة إلى الحافظة');
    }).catch(() => {
      const textArea = document.createElement('textarea');
      textArea.value = message;
      document.body.appendChild(textArea);
      textArea.select();
      document.execCommand('copy');
      document.body.removeChild(textArea);
      alert('تم نسخ الرسالة إلى الحافظة');
    });
  };

  /**
   * دالة الطباعة النهائية مع إصلاح المشكلة التي تمنع الطباعة
   * الآن ستعمل هذه الدالة بشكل صحيح بعد إصلاح الخطأ
   */
  const handleFinalPrint = async () => {
    // التحقق من صحة البيانات قبل الطباعة
    const validationError = validateFinalPrint();
    if (validationError) {
      alert(validationError);
      return;
    }
    
    // تعيين حالة الطباعة
    setPrintStatus('processing');
    setPrintType('final');
    
    try {
      // التحقق من وجود طلبات مكررة
      const duplicateCheck = await checkDuplicatePurchaseOrder(poNumber, transactionNumber);
      if (duplicateCheck.dataExists && !duplicateCheck.isDuplicate) {
        if (!window.confirm(duplicateCheck.message)) {
          setPrintStatus('idle');
          return;
        }
      } else if (duplicateCheck.isDuplicate) {
        alert(duplicateCheck.message);
        setPrintStatus('idle');
        return;
      }
      
      // حفظ البيانات قبل الطباعة
      const saveSuccess = await savePurchaseOrder();
      if (!saveSuccess) {
        alert('فشل في حفظ البيانات. يرجى المحاولة مرة أخرى.');
        setPrintStatus('error');
        setTimeout(() => setPrintStatus('idle'), 3000);
        return;
      }
      
      // تعيين حالة الطباعة النهائية
      setIsPreliminaryPrint(false);
      
      // إظهار تأكيد نهائي لضمان "user activation" قبل الطباعة
      const proceedToPrint = window.confirm('سيتم طباعة التقرير النهائي الآن. اضغط موافق للمتابعة.');
      if (!proceedToPrint) {
        setPrintStatus('idle');
        return;
      }
      
      // طباعة مباشرة بإطار رسم واحد (احتياطي لمنع أي حظر)
      if (typeof window.requestAnimationFrame === 'function') {
        requestAnimationFrame(() => {
          setPrintStatus('success');
          window.print();
          // سيتم استدعاء طباعة الرسائل الإضافية تلقائياً في afterprint عندما يكون printType === 'final'
          // سيتم استدعاء طباعة الرسائل الإضافية تلقائياً في `afterprint` عندما يكون `printType === 'final'`
        });
      } else {
        setPrintStatus('success');
        window.print();
      }
    } catch (error) {
      console.error('Error during final print:', error);
      alert('حدث خطأ أثناء الطباعة النهائية.');
      setPrintStatus('error');
      setTimeout(() => setPrintStatus('idle'), 3000);
    }
  };

  /**
   * دالة طباعة الرسائل الإضافية مع جميع التفاصيل
   * هذه الدالة تطبع رسائل الشؤون المالية والموردين مع جميع تفاصيل الأصناف المرسى عليها
   */
  const handleAdditionalPrinting = () => {
    if (!recommendation?.selectedOffers?.length) return;
    
    const now = new Date();
    const year = now.getFullYear();
    const month = now.getMonth() + 1;
    const day = now.getDate();
    let hours = now.getHours();
    const minutes = now.getMinutes().toString().padStart(2, '0');
    const ampm = hours >= 12 ? 'م' : 'ص';
    hours = hours % 12 || 12;
    const dateTimeStr = `${year}/${month}/${day} ${hours}:${minutes} ${ampm}`;
    
    // رسالة الشؤون المالية
    const financialLetterContent = `
      <div style="font-family: Arial, sans-serif; direction: rtl; text-align: right; padding: 6px; line-height: 1.2;">
        <div style="display: flex; justify-content: flex-start; align-items: center; font-size: 11px; margin: 2px 0 4px 0;">
          <div style="text-align: left;">التاريخ: ${dateTimeStr}</div>
        </div>
        <div style="display: grid; grid-template-columns: 20% 55% 25%; align-items: center; text-align: center; margin-bottom: 2px;">
          <div style="border: 1px solid #000; padding: 2px 4px; font-size: 12px; text-align: right;">
            رقم طلب الشراء: ${poNumber}
          </div>
          <h2 style="margin: 0; font-size: 18px; text-align: center;">خلاصة صرف مستحقات</h2>
          <div style="border: 1px solid #000; padding: 2px 4px; font-size: 12px; text-align: left;">
            رقم المعاملة: ${transactionNumber}
          </div>
        </div>
        <hr style="border: 1px solid #000; margin: 5px 0;">
        <p style="font-weight: bold; margin: 5px 0; display: flex; justify-content: space-between;">
        <p style="font-weight: bold; margin: 5px 0; display: flex; justify-content: space-between;" class="print:hidden">
          <span>الأخ/ مدير عام الشؤون المالية</span>
          <span style="margin-left: 35px;">المحترم</span>
        </p>
        <p style="margin: 5px 0; padding-right: 35px; font-size: 10px;">تحية طيبة وبعد،،،</p>
        <p style="margin: 5px 0;">بناءً على موافقة ${getRecipient()} على الشراء بموجب الأوليات المرفقة، يرجى التوجيه باستكمال إجراءات سداد مستحقات الموردين:</p>
        <div style="margin: 10px 0; padding: 10px; border: 1px solid #000;">
          ${(recommendation?.selectedOffers ?? []).map(offer => {
            const originalOffer = priceOffers.find(po => po.vendor === offer.vendor);
            const totalInYR = offer.isManualAmount && offer.manualAmount 
              ? offer.manualAmount * (originalOffer?.exchangeRate || 1)
              : originalOffer?.totalInYR || 0;
              
            return `
              <p style="margin: 2px 0;"><strong>اسم المورد:</strong> ${offer.vendor}</p>
              <p style="margin: 2px 0;"><strong>المبلغ:</strong> ${formatNumberWithCommas(offer.isManualAmount ? offer.manualAmount || 0 : offer.amount || 0)} ${offer.currency} شاملاً الضرائب وجميع المصاريف الأخرى</p>
              <p style="margin: 2px 0;"><strong>المبلغ المعادل بالريال اليمني:</strong> ${formatNumberWithCommas(totalInYR)} ريال</p>
              
              ${offer.lineItems && offer.lineItems.length > 0 ? `
                <div style="margin: 5px 0;">
                  <p style="margin: 2px 0; font-weight: bold;">تفاصيل الأصناف:</p>
                  <table style="width: 100%; border-collapse: collapse; border: 1px solid #ccc; margin-top: 5px;">
                    <thead>
                      <tr style="background-color: #f0f0f0;">
                        <th style="border: 1px solid #ccc; padding: 3px; text-align: right;">الصنف</th>
                        <th style="border: 1px solid #ccc; padding: 3px; text-align: center;">الكمية</th>
                        <th style="border: 1px solid #ccc; padding: 3px; text-align: center;">سعر الوحدة</th>
                        <th style="border: 1px solid #ccc; padding: 3px; text-align: center;">الإجمالي</th>
                        <th style="border: 1px solid #ccc; padding: 3px; text-align: center;">التزامات السطر</th>
                      </tr>
                    </thead>
                    <tbody>
                      ${offer.lineItems.map(item => {
                        const commitmentsText = (item.commitments && item.commitments.length > 0)
                          ? item.commitments.join('، ')
                          : '—';
                        return `
                        <tr>
                          <td style="border: 1px solid #ccc; padding: 3px; text-align: right;">${item.name}</td>
                          <td style="border: 1px solid #ccc; padding: 3px; text-align: center;">${item.awardedQty} ${item.unit}</td>
                          <td style="border: 1px solid #ccc; padding: 3px; text-align: center;">${formatNumberWithCommas(item.unitPrice)} ${offer.currency}</td>
                          <td style="border: 1px solid #ccc; padding: 3px; text-align: center;">${formatNumberWithCommas(item.total)} ${offer.currency}</td>
                          <td style="border: 1px solid #ccc; padding: 3px; text-align: center;">${commitmentsText}</td>
                        </tr>
                        `;
                      }).join('')}
                    </tbody>
                  </table>
                </div>
              ` : ''}
              
              <hr style="border: 1px solid #ccc; margin: 5px 0;">
            `;
          }).join('')}
        </div>
        <p style="margin: 10px 0; text-align: right;">مع خالص التقدير والاحترام،،،</p>
        
        <!-- التوقيعات -->
        <div style="margin-top: 20px;">
          <div style="display: grid; grid-template-columns: repeat(4, 1fr); text-align: center; gap: 10px;">
            <div>
              <div style="height: 3px; margin-bottom: 5px;"></div>
              <span>المختص</span><br><span>الاسم</span>
            </div>
            <div>
              <div style="height: 3px; margin-bottom: 5px;"></div>
              <span>رئيس قسم المشتريات</span><br><span>الاسم</span>
            </div>
            <div>
              <div style="height: 3px; margin-bottom: 5px;"></div>
              <span>مدير ادارة المشتريات</span><br><span>الاسم</span>
            </div>
            <div>
              <div style="height: 3px; margin-bottom: 5px;"></div>
              <span>مدير عام المشتريات والمخازن</span><br><span>الاسم</span>
            </div>
          </div>
        </div>
      </div>
    `;
    
    // رسائل الموردين
    const selectedOffersForLetters = recommendation?.selectedOffers ?? [];
    const vendorLettersContent = selectedOffersForLetters.map(offer => {
      const originalOffer = priceOffers.find(po => po.vendor === offer.vendor);
      const commitments = getCategorizedCommitments(offer.vendor);
      
      return `
        <div style="font-family: Arial, sans-serif; direction: rtl; text-align: right; padding: 6px; line-height: 1.2;">
          <div style="display: flex; justify-content: flex-start; align-items: center; font-size: 11px; margin: 2px 0 4px 0;">
            <div style="text-align: left;">التاريخ: ${dateTimeStr}</div>
          </div>
          <div style="display: grid; grid-template-columns: 20% 55% 25%; align-items: center; text-align: center; margin-bottom: 2px;">
            <div style="border: 1px solid #000; padding: 2px 4px; font-size: 12px; text-align: right;">
              رقم طلب الشراء: ${poNumber}
            </div>
            <h2 style="margin: 0; font-size: 18px; text-align: center;">رسالة ترسية</h2>
            <div style="border: 1px solid #000; padding: 2px 4px; font-size: 12px; text-align: left;">
              رقم المعاملة: ${transactionNumber}
            </div>
          </div>
          <hr style="border: 1px solid #000; margin: 5px 0;">
          <p style="font-weight: bold; margin: 5px 0; display: flex; justify-content: space-between;">
          <p style="font-weight: bold; margin: 5px 0; display: flex; justify-content: space-between;" class="print:hidden">
            <span>الأخوه/ ${offer.vendor}</span>
            <span style="margin-left: 35px;">المحترمون</span>
          </p>
          <p style="margin: 5px 0; padding-right: 35px; font-size: 10px;">تحية طيبة وبعد،،،</p>
          <p style="margin: 5px 0;">إشارة إلى الموضوع أعلاه، نود إعلامكم بترسية الشراء التالي:</p>
          <div style="margin: 10px 0; padding: 10px; border: 1px solid #000;">
            <p style="margin: 2px 0;"><strong>المبلغ:</strong> ${formatNumberWithCommas(offer.isManualAmount ? offer.manualAmount || 0 : offer.amount || 0)} ${offer.currency} (بالأحرف: ${(offer.amountInWords || convertNumberToArabicWords((offer.isManualAmount ? (offer.manualAmount || 0) : (offer.amount || 0)), offer.currency))}) شاملاً الضرائب وجميع المصاريف الأخرى</p>
            ${originalOffer?.currency !== 'ريال' ? `
            ` : ''}
            ${offer.awardedLineNumbers && offer.awardedLineNumbers.length > 0 ? `
              <p style="margin: 10px 0 5px 0; font-weight: bold;">الأسطر المرسى عليها: ${offer.awardedLineNumbers.join(', ')}</p>
            ` : ''}
            
            ${offer.lineItems && offer.lineItems.length > 0 ? `
              <div style="margin: 10px 0;">
                <p style="margin: 2px 0; font-weight: bold;">تفاصيل الأصناف:</p>
                <table style="width: 100%; border-collapse: collapse; border: 1px solid #ccc; margin-top: 5px;">
                  <thead>
                    <tr style="background-color: #f0f0f0;">
                      <th style="border: 1px solid #ccc; padding: 3px; text-align: right;">الصنف</th>
                      <th style="border: 1px solid #ccc; padding: 3px; text-align: center;">الكمية</th>
                      <th style="border: 1px solid #ccc; padding: 3px; text-align: center;">سعر الوحدة</th>
                      <th style="border: 1px solid #ccc; padding: 3px; text-align: center;">الإجمالي</th>
                      <th style="border: 1px solid #ccc; padding: 3px; text-align: center;">التزامات السطر</th>
                    </tr>
                  </thead>
                  <tbody>
                    ${offer.lineItems.map(item => `
                      <tr>
                        <td style="border: 1px solid #ccc; padding: 3px; text-align: right;">${item.name}</td>
                        <td style="border: 1px solid #ccc; padding: 3px; text-align: center;">${item.awardedQty} ${item.unit}</td>
                        <td style="border: 1px solid #ccc; padding: 3px; text-align: center;">${formatNumberWithCommas(item.unitPrice)} ${offer.currency}</td>
                        <td style="border: 1px solid #ccc; padding: 3px; text-align: center;">${formatNumberWithCommas(item.total)} ${offer.currency}</td>
                        <td style="border: 1px solid #ccc; padding: 3px; text-align: center;">${(item.commitments || []).join(', ') || '—'}</td>
                      </tr>
                    `).join('')}
                  </tbody>
                </table>
              </div>
            ` : ''}
          </div>
          
          ${commitments.vendorLevel.length > 0 ? `
            <div style="margin: 10px 0; padding: 10px; border: 1px solid #ccc;">
              <p style="margin: 2px 0; font-weight: bold;">مع الالتزام بالآتي:</p>
              <ul style="margin: 2px 0; padding-right: 20px;">
                ${commitments.vendorLevel.map((commitment, idx) => `<li>${commitment}</li>`).join('')}
              </ul>
            </div>
          ` : ''}
          
          ${commitments.lineLevel.length > 0 ? `
            <div style="margin: 10px 0; padding: 10px; border: 1px solid #ccc;">
              <p style="margin: 2px 0; font-weight: bold;">التزامات خاصة بالأسطر:</p>
              ${commitments.lineLevel.map(lineCommitment => `
                <div style="margin: 5px 0;">
                  <p style="margin: 2px 0; font-weight: bold;">السطر ${lineCommitment.lineNumber}:</p>
                  <ul style="margin: 2px 0; padding-right: 20px;">
                    ${(lineCommitment.commitments || []).map((commitment, cidx) => `<li>${commitment}</li>`).join('')}
                  </ul>
                </div>
              `).join('')}
            </div>
          ` : ''}
          
          <p style="margin: 10px 0; text-align: right;">يرجى التواصل مع إدارة المشتريات لاستكمال الإجراءات.</p>
          <p style="text-align: center; margin: 5px 0;">مع خالص التقدير والاحترام</p>
          
          <!-- التوقيعات -->
          <div style="margin-top: 20px;">
            <div style="display: grid; grid-template-columns: repeat(4, 1fr); text-align: center; gap: 10px;">
              <div>
                <div style="height: 3px; margin-bottom: 5px;"></div>
                <span>المختص</span><br><span>الاسم</span>
              </div>
              <div>
                <div style="height: 3px; margin-bottom: 5px;"></div>
                <span>رئيس قسم المشتريات</span><br><span>الاسم</span>
              </div>
              <div>
                <div style="height: 3px; margin-bottom: 5px;"></div>
                <span>مدير ادارة المشتريات</span><br><span>الاسم</span>
              </div>
              <div>
                <div style="height: 3px; margin-bottom: 5px;"></div>
                <span>مدير عام المشتريات والمخازن</span><br><span>الاسم</span>
              </div>
            </div>
          </div>
        </div>
        ${selectedOffersForLetters.indexOf(offer) < selectedOffersForLetters.length - 1 ? '<div style="page-break-before: always;"></div>' : ''}
      `;
    }).join('');
    
    const printWindow = window.open('', '_blank');
    if (printWindow) {
      printWindow.document.write(`
        <!DOCTYPE html>
        <html>
        <head>
          <title>رسائل إضافية</title>
          <style>
            @media print {
              @page { size: A4; margin: 5mm; }
              body { margin: 0; padding: 0; }
              body * { -webkit-print-color-adjust: exact; print-color-adjust: exact; }
              table { border-collapse: collapse; width: 100%; }
              th, td { padding: 3px; font-size: 10.5px; }
              h1, h2, h3 { margin: 4px 0; }
              p { margin: 2px 0; }
              hr { margin: 4px 0; }
              .page-break { page-break-before: always; }
            }
          </style>
        </head>
        <body>
          ${financialLetterContent}
          <div class="page-break"></div>
          ${vendorLettersContent}
        </body>
        </html>
      `);
      printWindow.document.close();
      printWindow.focus();
      
      setTimeout(() => {
        printWindow.print();
      }, 500);
    }
  };

  // الحصول على التوقيعات المناسبة
  const signatures = getDynamicSignatures();

  return (
    <div className="bg-white rounded-lg shadow-lg p-4 print:shadow-none print:p-2 border border-gray-200 print-container">
      <div className="flex items-center justify-between mb-4 print:hidden">
        <h2 className="text-xl font-semibold flex items-center text-gray-800">
          <Award className="ml-2" size={20} />
          التوصية
        </h2>
        <button
          onClick={() => setShowMessagesModal(true)}
          className="px-3 py-2 bg-purple-600 text-white rounded-md hover:bg-purple-700 transition-colors flex items-center text-sm"
        >
          <Mail size={16} className="ml-1" />
          الرسائل
        </button>
      </div>
      
      <div className="hidden print:block mb-4">
        <h2 className="text-xl font-bold text-center">التوصية:</h2>
      </div>
      
      <div className="border-2 border-gray-400 rounded-lg pt-2 print:border-2 print:border-black print:rounded-none">
        <div className="p-4 print:p-2 space-y-3 bg-gray-50 print:bg-white">
          <div className="flex items-center gap-2 print:block">
            <span className="font-medium">توصي لجنة التحليل بأن يتم الشراء حسب افضل المواصفات والأقل سعراً من:</span>
            <span className="font-medium">
              {recommendation?.selectedOffers?.length > 0
                ? recommendation.selectedOffers.map(o => o.vendor).join(' ومن ')
                : '__________________________________________________'}
            </span>
          </div>
          
          {recommendation?.selectedOffers?.some(o => (o.awardedLineNumbers || []).length > 0) && (
            <div className="text-sm text-gray-700 print:text-black space-y-1">
            <div className="text-sm text-gray-700 print:text-black space-y-1 print:hidden">
              {(recommendation?.selectedOffers ?? []).map((o: RecommendedOffer) => {
                const lines = (o.awardedLineNumbers || []).join('، ');
                if (!lines) return null;
                return (
                  <div key={o.vendor}>... ({o.vendor}) وذلك للسطور رقم {lines}</div>
                );
              })}
            </div>
            </div>
          )}
          
          <div className="space-y-4">
            <div className="space-y-3 print:hidden">
              {matchingOffers.map(offer => {
                const selectedOffer = recommendation?.selectedOffers?.find(s => s.vendor === offer.vendor);
                const isPartiallyMatched = offer.result === 'مطابق جزئي';
                const commitments = getCategorizedCommitments(offer.vendor);
                
                return (
                  <div key={offer.id} className="border border-gray-200 rounded-lg p-3 bg-white">
                    <label className="flex items-center gap-3 cursor-pointer">
                      <input
                        type="checkbox"
                        checked={!!selectedOffer}
                        onChange={() => toggleVendorSelection(offer.vendor)}
                        className="form-checkbox h-4 w-4 text-blue-600 rounded"
                      />
                      <div className="flex-1">
                        <div className="flex items-center gap-2 mb-2">
                          <span className="font-medium">{offer.vendor}</span>
                          <span className={`px-2 py-1 rounded text-sm ${offer.result === 'مطابق'
                            ? 'bg-green-100 text-green-800'
                            : 'bg-yellow-100 text-yellow-800'
                            }`}>
                            {offer.result}
                          </span>
                        </div>
                        
                        {!!selectedOffer && (
                          <div className="mt-2 p-2 bg-gray-50 rounded border">
                            <div className="grid grid-cols-1 md:grid-cols-[20%_15%_65%] gap-4">
                              <div>
                                <label className="block text-sm font-medium text-gray-700 mb-1">المبلغ</label>
                                {isPartiallyMatched ? (
                                  <div className="flex items-center gap-2">
                                    <input
                                      type="text"
                                      value={manualAmounts[offer.vendor] !== undefined ? manualAmounts[offer.vendor] : ''}
                                      onChange={(e) => {
                                        const rawValue = e.target.value.replace(/,/g, '');
                                        if (/^\d*(?:\.\d{0,2})?$/.test(rawValue) || rawValue === '') {
                                          setManualAmounts(prev => ({ ...prev, [offer.vendor]: rawValue }));
                                        }
                                      }}
                                      onBlur={() => {
                                        const rawValue = manualAmounts[offer.vendor] ?? '';
                                        const fixedRaw = toFixed2Raw(rawValue);
                                        if (fixedRaw !== '') {
                                          const parsedAmount = parseFloat(fixedRaw);
                                          updateOfferAmount(offer.vendor, parsedAmount, true);
                                          setManualAmounts(prev => ({ ...prev, [offer.vendor]: formatNumberWithCommas(parsedAmount) }));
                                        } else {
                                          updateOfferAmount(offer.vendor, undefined, true);
                                          setManualAmounts(prev => ({ ...prev, [offer.vendor]: '' }));
                                        }
                                      }}
                                      onFocus={() => {
                                        const amountValue = selectedOffer.isManualAmount ? selectedOffer.manualAmount : selectedOffer.amount;
                                        if (amountValue !== undefined && amountValue !== null) {
                                          setManualAmounts(prev => ({ ...prev, [offer.vendor]: toFixed2Raw(amountValue) }));
                                        }
                                      }}
                                      className="flex-1 border border-gray-300 rounded-md py-1 px-2 text-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
                                      style={{ fontFamily: 'Arial, sans-serif' }}
                                    />
                                  </div>
                                ) : (
                                  <input
                                    type="text"
                                    value={formatNumberWithCommas(offer.total)}
                                    readOnly
                                    className="w-full bg-gray-100 border border-gray-300 rounded-md py-1 px-2 text-sm"
                                    style={{ fontFamily: 'Arial, sans-serif' }}
                                  />
                                )}
                              </div>
                              
                              <div>
                                <label className="block text-sm font-medium text-gray-700 mb-1">العملة</label>
                                <input
                                  type="text"
                                  value={offer.currency}
                                  readOnly
                                  className="w-full bg-gray-100 border border-gray-300 rounded-md py-1 px-2 text-sm"
                                />
                              </div>
                              <div className="md:col-span-1">
                                <label className="block text-sm font-medium text-gray-700 mb-1">المبلغ كتابة</label>
                                <input
                                  value={selectedOffer.amountInWords || ''}
                                  readOnly
                                  className={`w-full bg-gray-100 border border-gray-300 rounded-md py-1 px-2 text-sm amount-in-words ${(selectedOffer.amountInWords || '').length > 50 ? 'long-text' : ''}`}
                                />
                              </div>
                            </div>
                            
                            {/* عرض الالتزامات */}
                            {(commitments.vendorLevel.length > 0 || commitments.lineLevel.length > 0) && (
                              <div className="mt-3">
                                <label className="block text-sm font-medium text-gray-700 mb-1">الالتزامات المطلوبة:</label>
                                <div className="bg-gray-100 p-2 rounded border text-sm">
                                  {commitments.vendorLevel.length > 0 && (
                                    <div className="mb-2">
                                      <strong>التزامات عامة:</strong>
                                      <ul className="list-disc pr-5 space-y-1 mt-1">
                                        {commitments.vendorLevel.map((commitment, idx) => (
                                          <li key={idx}>{commitment}</li>
                                        ))}
                                      </ul>
                                    </div>
                                  )}
                                  
                                  {commitments.lineLevel.length > 0 && (
                                    <div>
                                      <strong>التزامات خاصة بالأسطر:</strong>
                                      {commitments.lineLevel.map((lineCommitment, idx) => (
                                        <div key={idx} className="mt-1">
                                          <span className="font-medium">السطر {lineCommitment.lineNumber}:</span>
                                          <ul className="list-disc pr-5 space-y-1 mt-1">
                                            {(lineCommitment.commitments || []).map((commitment, cidx) => (
                                              <li key={cidx}>{commitment}</li>
                                            ))}
                                          </ul>
                                        </div>
                                      ))}
                                    </div>
                                  )}
                                </div>
                              </div>
                            )}
                            
                            {/* عرض تفاصيل الأصناف المرسى عليها */}
                            {selectedOffer.lineItems && selectedOffer.lineItems.length > 0 && (
                              <div className="mt-3">
                                <label className="block text-sm font-medium text-gray-700 mb-1">تفاصيل الأصناف المرسى عليها:</label>
                                <div className="bg-gray-100 p-2 rounded border text-sm max-h-40 overflow-y-auto">
                                  <table className="w-full text-sm border-collapse border border-gray-300">
                                    <thead>
                                      <tr className="bg-gray-200">
                                        <th className="border border-gray-300 p-1 text-center">م</th>
                                        <th className="border border-gray-300 p-1 text-right">الصنف</th>
                                        <th className="border border-gray-300 p-1 text-center">الكمية</th>
                                        <th className="border border-gray-300 p-1 text-center">الوحدة</th>
                                        <th className="border border-gray-300 p-1 text-center">السعر</th>
                                        <th className="border border-gray-300 p-1 text-center">الإجمالي</th>
                                        <th className="border border-gray-300 p-1 text-right">التزامات السطر</th>
                                      </tr>
                                    </thead>
                                    <tbody>
                                      {selectedOffer.lineItems.map((item: OfferLineItem, idx: number) => {
                                        const commitmentsText = (item.commitments && item.commitments.length > 0) ? item.commitments.join('، ') : '—';
                                        return (
                                          <tr key={idx}>
                                            <td className="border border-gray-300 p-1 text-center">{idx + 1}</td>
                                            <td className="border border-gray-300 p-1 text-right">{item.name}</td>
                                            <td className="border border-gray-300 p-1 text-center">{item.awardedQty}</td>
                                            <td className="border border-gray-300 p-1 text-center">{item.unit}</td>
                                            <td className="border border-gray-300 p-1 text-center">{formatNumberWithCommas(item.unitPrice)}</td>
                                            <td className="border border-gray-300 p-1 text-center">{formatNumberWithCommas(item.total)}</td>
                                            <td className="border border-gray-300 p-1 text-right">{commitmentsText}</td>
                                          </tr>
                                        );
                                      })}
                                    </tbody>
                                  </table>
                                </div>
                              </div>
                            )}
                          </div>
                        )}
                      </div>
                    </label>
                  </div>
                );
              })}
              
              {(recommendation?.selectedOffers ?? []).length > 0 && (
                <div className="mt-4 p-3 bg-blue-50 border border-blue-200 rounded-lg">
                  <div className="text-sm font-medium text-blue-800 mb-2">إجمالي المبلغ المرسى عليه:</div>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <label className="block text-xs font-medium text-blue-700 mb-1">المبلغ بالريال اليمني</label>
                      <div className="text-lg font-bold text-blue-900">
                        {formatNumberWithCommas(recommendation?.totalAwardedInYR || 0)} ريال يمني
                      </div>
                    </div>
                    <div>
                      <label className="block text-xs font-medium text-blue-700 mb-1">المبلغ كتابة</label>
                      <div className="text-sm text-blue-800 bg-white p-2 rounded border">
                        {recommendation?.totalAwardedInYRWords || ''}
                      </div>
                    </div>
                  </div>
                </div>
              )}
            </div>
            
            {/* جدول التوصية للطباعة */}
            <div className="hidden print:block print:space-y-0">
              {printType === 'preliminary' ? (
                // جدول فارغ للطباعة الأولية
                <div className="space-y-4">
                  {Array.from({ length: 3 }, (_, index) => (
                    <div key={index} className="flex gap-3 mb-6">
                      <div className="w-[25%]">
                        <span className="font-medium block">بمبلغ(رقماً):__________________</span>
                      </div>
                      <div className="w-[15%]">
                        <span className="font-medium block">العملة:_____________</span>
                      </div>
                      <div className="w-[60%]">
                        <span className="font-medium block">المبلغ كتابة:___________________________________________________________</span>
                      </div>
                    </div>
                  ))}
                  
                  <div className="space-y-1 print:pb-4">
                    <p>ملاحظات:__________________________________________________________________________________________________________________</p>
                    <p>____________________________________________________________________________________________________________________________</p>
                  </div>
                </div>
              ) : (
                // بيانات حقيقية للطباعة النهائية
                (recommendation?.selectedOffers ?? []).length > 0 ? (
                  (recommendation?.selectedOffers ?? []).map((offer, index: number) => {
                    const originalOffer = priceOffers.find(po => po.vendor === offer.vendor);
                    const commitments = getCategorizedCommitments(offer.vendor);
                    
                    return (
                      <div key={offer.vendor} className="mt-2">
                        <div className="border-b border-gray-300 pb-2 mb-2 last:border-b-0">
                          <div className="flex items-center gap-3 flex-wrap print-tight">
                            <span className="font-medium">
                              {index === 0 ? '' : 'ومن'} {offer.vendor}
                            </span>
                            <span className="text-gray-700">بمبلغ</span>
                            <span className="font-medium">
                              {formatNumberWithCommas(
                                offer.isManualAmount ? offer.manualAmount || 0 : offer.amount || 0
                              )}
                            </span>
                            <span className="font-medium">{offer.currency}</span>
                            <span className="font-medium">المبلغ كتابة:</span>
                            <span className="flex-1 amount-in-words">{offer.amountInWords}</span>
                            <span className="text-sm text-gray-700">شاملاً الضرائب وجميع المصاريف الأخرى</span>
                          </div>
                          
                          {offer.awardedLineNumbers && offer.awardedLineNumbers.length > 0 && (
                            <div className="mt-1 text-sm">
                              <span className="font-medium">الأسطر المرسى عليها: </span>
                              {offer.awardedLineNumbers.join(', ')}
                            </div>
                          )}
                          
                          {/* جدول تفاصيل الأسطر المرسى عليها */}
                          {offer.lineItems && offer.lineItems.length > 0 && (
                            <div className="mt-2 overflow-x-auto">
                              <table className="w-full border border-gray-300 text-sm">
                                <thead className="bg-gray-100">
                                  <tr>
                                    <th className="border border-gray-300 px-2 py-1 text-right">الصنف</th>
                                    <th className="border border-gray-300 px-2 py-1 text-center">الكمية المرسى عليها</th>
                                    <th className="border border-gray-300 px-2 py-1 text-center">سعر الوحدة</th>
                                    <th className="border border-gray-300 px-2 py-1 text-center">الإجمالي</th>
                                    <th className="border border-gray-300 px-2 py-1 text-right">التزامات السطر</th>
                                  </tr>
                                </thead>
                                <tbody>
                                  {offer.lineItems.map((li: OfferLineItem, idx: number) => {
                                    const commitmentsText = (li.commitments && li.commitments.length > 0) ? li.commitments.join('، ') : '—';
                                    return (
                                      <tr key={idx}>
                                        <td className="border border-gray-300 px-2 py-1 text-right">{li.name}</td>
                                        <td className="border border-gray-300 px-2 py-1 text-center">{li.awardedQty} {li.unit}</td>
                                        <td className="border border-gray-300 px-2 py-1 text-center">{formatNumberWithCommas(li.unitPrice)} {offer.currency}</td>
                                        <td className="border border-gray-300 px-2 py-1 text-center">{formatNumberWithCommas(li.total)} {offer.currency}</td>
                                        <td className="border border-gray-300 px-2 py-1 text-right">{commitmentsText}</td>
                                      </tr>
                                    );
                                  })}
                                </tbody>
                              </table>
                            </div>
                          )}
                          
                          {/* الالتزامات على مستوى المورد */}
                          {commitments.vendorLevel.length > 0 && (
                            <div className="mt-2">
                              <p className="font-medium">مع الالتزام بالاتي:</p>
                              <ul className="list-disc pr-5 text-sm">
                                {commitments.vendorLevel.map((commitment, idx) => (
                                  <li key={idx}>{commitment}</li>
                                ))}
                              </ul>
                            </div>
                          )}
                          
                          {/* الالتزامات على مستوى الأسطر */}
                          {commitments.lineLevel.length > 0 && (
                            <div className="mt-2">
                              <p className="font-medium">التزامات خاصة بالأسطر:</p>
                              {commitments.lineLevel.map((lineCommitment, idx) => (
                                <div key={idx} className="mt-1">
                                  <span className="font-medium">السطر {lineCommitment.lineNumber}:</span>
                                  <ul className="list-disc pr-5 text-sm">
                                    {(lineCommitment.commitments || []).map((commitment, cidx) => (
                                      <li key={cidx}>{commitment}</li>
                                    ))}
                                  </ul>
                                </div>
                              ))}
                            </div>
                          )}
                        </div>
                      </div>
                    );
                  })
                ) : (
                  <div className="flex gap-3 mb-6">
                    <div className="w-[25%]">
                      <span className="font-medium block">بمبلغ(رقماً):__________________</span>
                    </div>
                    <div className="w-[15%]">
                      <span className="font-medium block">العملة:_____________</span>
                    </div>
                    <div className="w-[60%]">
                      <span className="font-medium block">المبلغ كتابة:___________________________________________________________</span>
                    </div>
                  </div>
                )
              )}
            </div>
          </div>
        </div>
      </div>
      
      {/* أزرار الطباعة */}
      <div className="mt-6 flex gap-4 print:hidden">
        <button
          onClick={handlePreliminaryPrint}
          disabled={printStatus === 'processing'}
          className="flex-1 px-4 py-2 bg-yellow-600 text-white rounded-md hover:bg-yellow-700 transition-colors flex items-center justify-center gap-2 disabled:opacity-50"
        >
          <Printer size={16} />
          <span>طباعة أولية</span>
        </button>
        <button
          onClick={handleFinalPrint}
          disabled={printStatus === 'processing'}
          className="flex-1 px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 transition-colors flex items-center justify-center gap-2 disabled:opacity-50"
        >
          <Printer size={16} />
          <span>طباعة نهائية</span>
        </button>
      </div>
      
      {/* قسم التوقيعات للطباعة */}
      <div className="hidden print:block mt-2 space-y-2 print:mt-0 print:space-y-0">
        <div className="border-t border-gray-300 pt-2 print:my-0">
          <div className="grid gap-0 text-center" style={{ gridTemplateColumns: `repeat(${signatures.length}, minmax(0, 1fr))` }}>
            {signatures.map((signature, index) => (
              <div key={index} className="signature-box">
                <div className="signature-title">{signature.title}</div>
                <div className="signature-name">{signature.name}</div>
                <div className="text-xs text-gray-600">{signature.role}</div>
              </div>
            ))}
          </div>
        </div>
        
        {/* النص الثابت بعد التوقيعات (للطباعة النهائية فقط) */}
        {printType === 'final' && (
          <div className="hidden print:block border border-gray-300 rounded-lg p-2 mt-4 print:mt-2">
            <p className="font-medium pt-2 pb-1">حياكم الله..</p>
            <p>مع الموافقة وإستكمال إجراءات الشراء حسب النظام</p>
            <p className="text-center">وشكراً...</p>
            <div className="mt-2 font-bold text-left print:mt-0">
              <p className="font-medium">{getRecipient()}</p>
              <p className="font-medium">{getSignatoryForPrint()}</p>
              <p className="text-sm mt-2 print:mt-0">
                {calculateTotalAwardedInYR() > 150000 ? 'الاستاذ' : 'التوقيع'}
              </p>
            </div>
          </div>
        )}
        
        <div style={{ border: '1px solid #000', margin: '5px 0' }}></div>
      </div>
      
      {/* علامة الطباعة الأولية */}
      {isPreliminaryPrint && (
        <div className="hidden print:block fixed top-4 left-2 text-red-600 font-bold text-xl transform -rotate-45 border-2 border-red-600 rounded-md p-2">
          طباعة أولية
        </div>
      )}
      
      {/* نافذة الرسائل */}
      {showMessagesModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 print:hidden">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-y-auto">
            <div className="p-6">
              <div className="flex items-center justify-between mb-4">
                <h3 className="text-lg font-semibold flex items-center">
                  <Mail className="ml-2" size={20} />
                  إدارة الرسائل
                </h3>
                <button
                  onClick={() => setShowMessagesModal(false)}
                  className="text-gray-500 hover:text-gray-700"
                >
                  <X size={24} />
                </button>
              </div>
              
              <div className="mb-6">
                <div className="flex gap-2 mb-4">
                  <button
                    onClick={() => setMessageType('awarded')}
                    className={`px-4 py-2 rounded-md transition-colors ${
                      messageType === 'awarded' 
                        ? 'bg-green-600 text-white' 
                        : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
                    }`}
                  >
                    الموردين المرسى عليهم
                  </button>
                  <button
                    onClick={() => setMessageType('excluded')}
                    className={`px-4 py-2 rounded-md transition-colors ${
                      messageType === 'excluded' 
                        ? 'bg-red-600 text-white' 
                        : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
                    }`}
                  >
                    الموردين المستبعدين
                  </button>
                  <button
                    onClick={() => setMessageType('financial')}
                    className={`px-4 py-2 rounded-md transition-colors ${
                      messageType === 'financial' 
                        ? 'bg-blue-600 text-white' 
                        : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
                    }`}
                  >
                    الشؤون المالية
                  </button>
                </div>
                
                <div className="space-y-4">
                  {messageType === 'awarded' && recommendation?.selectedOffers.map(offer => (
                    <div key={`msg-awarded-${offer.vendor}`} className="border border-green-200 rounded-lg p-4 bg-green-50">
                      <div className="flex items-center justify-between mb-3">
                        <h4 className="font-semibold text-green-800">رسالة إلى: {offer.vendor}</h4>
                        <button
                          onClick={() => copyMessageToClipboard(generateVendorMessage(offer.vendor, 'awarded'))}
                          className="px-3 py-1 bg-green-600 text-white rounded text-sm hover:bg-green-700"
                        >
                          نسخ الرسالة
                        </button>
                      </div>
                      <textarea
                        value={generateVendorMessage(offer.vendor, 'awarded')}
                        readOnly
                        className="w-full h-40 border border-green-300 rounded p-3 text-sm bg-white"
                      />
                    </div>
                  ))}
                  
                  {messageType === 'excluded' && priceOffers
                    .filter(offer => offer.vendor && offer.result !== 'مطابق')
                    .map(offer => (
                    <div key={`msg-excluded-${offer.vendor}`} className="border border-red-200 rounded-lg p-4 bg-red-50">
                      <div className="flex items-center justify-between mb-3">
                        <h4 className="font-semibold text-red-800">رسالة إلى: {offer.vendor}</h4>
                        <button
                          onClick={() => copyMessageToClipboard(generateVendorMessage(offer.vendor, 'excluded'))}
                          className="px-3 py-1 bg-red-600 text-white rounded text-sm hover:bg-red-700"
                        >
                          نسخ الرسالة
                        </button>
                      </div>
                      <textarea
                        value={generateVendorMessage(offer.vendor, 'excluded')}
                        readOnly
                        className="w-full h-40 border border-red-300 rounded p-3 text-sm bg-white"
                      />
                    </div>
                  ))}
                  
                  {messageType === 'financial' && (
                    <div className="border border-blue-200 rounded-lg p-4 bg-blue-50">
                      <div className="flex items-center justify-between mb-3">
                        <h4 className="font-semibold text-blue-800">رسالة إلى: إدارة الشؤون المالية</h4>
                        <button
                          onClick={() => copyMessageToClipboard(generateFinancialMessage())}
                          className="px-3 py-1 bg-blue-600 text-white rounded text-sm hover:bg-blue-700"
                        >
                          نسخ الرسالة
                        </button>
                      </div>
                      <textarea
                        value={generateFinancialMessage()}
                        readOnly
                        className="w-full h-40 border border-blue-300 rounded p-3 text-sm bg-white"
                      />
                    </div>
                  )}
                </div>
              </div>
              
              <div className="flex justify-end">
                <button
                  onClick={() => setShowMessagesModal(false)}
                  className="px-4 py-2 bg-gray-500 text-white rounded-md hover:bg-gray-600"
                >
                  إغلاق
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};


; ====================================================================
الكود الخامس صفحة المقارنة
// purchases_alamin7-copy5\src\components\ComparisonPage.tsx
; ======================================================================

import React, { useState, useEffect } from 'react';
import { usePurchaseOrder } from '../context/PurchaseOrderContext';
import { formatNumberWithCommas } from '../utils/numberToWords';

export const ComparisonPage: React.FC = () => {
  const {
    poNumber, // أضف هذا المتغير من الـ context
    priceOffers,
    poItems,
    // استيراد الدوال اللازمة للحفظ في قاعدة البيانات
    savePurchaseOrder,
    updatePriceOffer,
    // إضافة بيانات المواصفات والتكلفة التقديرية
    estimatedCosts,
    setEstimatedCosts,
    itemSpecifications,
    setItemSpecifications
  } = usePurchaseOrder();

  // حالة لتخزين التكاليف التقديرية المؤقتة قبل الحفظ
  const [tempEstimatedCosts, setTempEstimatedCosts] = useState<{ [key: number]: number }>({});
  // حالة لتخزين المواصفات المؤقتة قبل الحفظ
  const [tempSpecifications, setTempSpecifications] = useState<{ [key: number]: string }>({});

  // تهيئة الحالة عند تحميل المكون
  useEffect(() => {
    // تهيئة التكاليف التقديرية من قاعدة البيانات إذا كانت موجودة
    if (estimatedCosts && Object.keys(estimatedCosts).length > 0) {
      setTempEstimatedCosts(estimatedCosts);
    } else {
      // إنشاء تكاليف تقديرية افتراضية إذا لم تكن موجودة
      const defaultCosts = poItems.reduce((acc, item) => {
        acc[item.lineNumber] = 0;
        return acc;
      }, {} as { [key: number]: number });
      setTempEstimatedCosts(defaultCosts);
    }
    // تهيئة المواصفات من قاعدة البيانات إذا كانت موجودة
    if (itemSpecifications && Object.keys(itemSpecifications).length > 0) {
      setTempSpecifications(itemSpecifications);
    } else {
      // إنشاء مواصفات افتراضية إذا لم تكن موجودة
      const defaultSpecs = poItems.reduce((acc, item) => {
        acc[item.lineNumber] = '';
        return acc;
      }, {} as { [key: number]: string });
      setTempSpecifications(defaultSpecs);
    }
  }, [poItems, estimatedCosts, itemSpecifications]);

  // إضافة useEffect جديد لتحديث المواصفات فورًا عند تغييرها
  useEffect(() => {
    // التحقق من وجود مواصفات في عروض الأسعار وتحديثها فورًا
    if (priceOffers && priceOffers.length > 0) {
      console.log("تحديث المواصفات في صفحة المقارنة");
      // إجبار إعادة العرض لضمان ظهور المواصفات المحدثة
      const temp = [...priceOffers];
      // هذا مجرد تحديث بسيط لإجبار إعادة العرض
      temp.forEach(offer => {
        if (offer.lineItems) {
          offer.lineItems.forEach(item => {
            if (item.vendorSpecifications) {
              // التأكد من أن المواصفات محدثة
              item.vendorSpecifications = { ...item.vendorSpecifications };
            }
          });
        }
      });
    }
  }, [priceOffers, poItems]);

  // إضافة useEffect لمراقبة تغيرات المواصفات
  // إضافة هذا الـ useEffect في صفحة المقارنة
useEffect(() => {
  // تحديث المواصفات عند تغيير عروض الأسعار
  const updateSpecifications = () => {
    // يمكن إضافة منطق لتحديث المواصفات هنا إذا لزم الأمر
  };
  
  updateSpecifications();
}, [priceOffers, poItems]);

  // دالة للحصول على التكلفة التقديرية لصنف معين مع العملة
  const getEstimatedCostForItem = (lineNumber: number) => {
    const item = poItems.find(item => item.lineNumber === lineNumber);
    if (!item || !item.estimatedCost) {
      return { amount: 0, currency: 'ريال' };
    }
    return {
      amount: item.estimatedCost.amount || 0,
      currency: item.estimatedCost.currency || 'ريال'
    };
  };

  // دالة لحساب إجمالي التكلفة التقديرية بالعملة الأصلية
  const getTotalEstimatedCost = () => {
    // سنحسب الإجمالي لكل عملة على حدة
    const totalsByCurrency: { [currency: string]: number } = {};

    poItems.forEach(item => {
      if (item.estimatedCost && item.estimatedCost.amount > 0) {
        const currency = item.estimatedCost.currency || 'ريال';
        const amount = item.estimatedCost.amount * item.quantity;
        totalsByCurrency[currency] = (totalsByCurrency[currency] || 0) + amount;
      }
    });

    // إذا كان هناك عملة واحدة فقط، نرجع المبلغ والعملة
    const currencies = Object.keys(totalsByCurrency);
    if (currencies.length === 1) {
      return {
        amount: totalsByCurrency[currencies[0]],
        currency: currencies[0]
      };
    }

    // إذا كان هناك أكثر من عملة، نرجع المجموع بالريال
    const totalInRiyal = Object.entries(totalsByCurrency).reduce((total, [currency, amount]) => {
      if (currency === 'ريال') {
        return total + amount;
      }
      // البحث عن سعر الصرف
      const offerWithRate = priceOffers.find(offer =>
        offer.currency === currency && offer.exchangeRate && offer.exchangeRate > 0
      );
      const exchangeRate = offerWithRate?.exchangeRate || 1;
      return total + (amount * exchangeRate);
    }, 0);

    return {
      amount: totalInRiyal,
      currency: 'ريال'
    };
  };

  // دالة لحساب المعادل بالريال لكل صنف (تستخدم فقط إذا كان هناك سعر صرف)
  const getEquivalentInRiyalForItem = (lineNumber: number) => {
    const item = poItems.find(item => item.lineNumber === lineNumber);
    if (!item || !item.estimatedCost) {
      return 0;
    }

    const { amount, currency } = item.estimatedCost;
    if (currency === 'ريال') {
      // return amount * item.quantity;  // هذا السطر يحسب المعادل بالريال لاجمالي الكمية الخاصة بالسطر 
      // يعدل السطر السابق لحساب سعر الوحدة الوادة فقط كما يلي 
      // =============================
      // فقط سعر الوحدة، بدون الكمية
      return amount ?? 0;
      // =================================
    }

    // البحث عن سعر الصرف
    const offerWithRate = priceOffers.find(offer =>
      offer.currency === currency && offer.exchangeRate && offer.exchangeRate > 0
    );

    if (offerWithRate && offerWithRate.exchangeRate) {
      // return (amount * item.quantity) * offerWithRate.exchangeRate;  // هذا السطر يحسب المعادل بالريال لاجمالي الكمية الخاصة بالسطر
      // يعدل السطر السابق لحساب سعر الوحدة الوادة فقط كما يلي 
      // ======================================
      // سعر الوحدة × سعر الصرف
      return (amount ?? 0) * offerWithRate.exchangeRate;
      // ====================================
    }

    return 0; // لا يوجد سعر صرف، نرجع 0
  };

  // دالة لحساب أقل سعر معادل بالريال لكل صنف
  const getMinPriceInRiyal = (lineNumber: number) => {
    const validPrices = priceOffers
      .map(offer => {
        const lineItem = offer.lineItems?.find(li =>
          li.lineNumber === lineNumber || li.name === poItems.find(item => item.lineNumber === lineNumber)?.name
        );
        const unitPriceAfterTax = (lineItem?.unitPriceAfterTax ?? lineItem?.unitPrice) || 0;
        const exchangeRate = offer.currency === 'ريال' ? 1 : (offer.exchangeRate || 0);
        return unitPriceAfterTax && exchangeRate ? unitPriceAfterTax * exchangeRate : null;
      })
      .filter(price => price !== null) as number[];
    return validPrices.length > 0 ? Math.min(...validPrices) : 0;
  };

  // دالة للحصول على مواصفات المورد لصنف معين
  // const getVendorSpecification = (vendor: string, lineNumber: number) => {
  //   const offer = priceOffers.find(o => o.vendor === vendor);
  //   if (!offer || !offer.lineItems) return '';
  //   const lineItem = offer.lineItems.find(li =>
  //     li.lineNumber === lineNumber || li.name === poItems.find(item => item.lineNumber === lineNumber)?.name
  //   );

  //   // تحسين عرض المواصفات - التأكد من عرض جميع المواصفات المقدمة
  //   if (lineItem?.vendorSpecifications) {
  //     const specs = lineItem.vendorSpecifications;
  //     if (typeof specs === 'object' && specs !== null) {
  //       return Object.entries(specs)
  //         .filter(([key, value]) => value !== null && value !== undefined && String(value).trim() !== '')
  //         .map(([key, value]) => `• ${key}: ${value}`)
  //         .join('<br />');
  //     } else if (typeof specs === 'string' && specs.trim() !== '') {
  //       return specs;
  //     }
  //   }

  //   // إذا لم يتم العثور على مواصفات، عرض أي معلومات متاحة من الصنف
  //   if (lineItem && Object.keys(lineItem).length > 0) {
  //     const otherInfo = [];
  //     // التحقق من وجود الخصائص قبل الوصول إليها
  //     if ('description' in lineItem && lineItem.description) otherInfo.push(`الوصف: ${lineItem.description}`);
  //     if ('brand' in lineItem && lineItem.brand) otherInfo.push(`الماركة: ${lineItem.brand}`);
  //     if ('model' in lineItem && lineItem.model) otherInfo.push(`الموديل: ${lineItem.model}`);
  //     if ('origin' in lineItem && lineItem.origin) otherInfo.push(`بلد المنشأ: ${lineItem.origin}`);
  //     // إضافة خصائص إضافية قد تكون موجودة
  //     if ('warranty' in lineItem && lineItem.warranty) otherInfo.push(`الضمان: ${lineItem.warranty}`);
  //     if ('color' in lineItem && lineItem.color) otherInfo.push(`اللون: ${lineItem.color}`);
  //     if ('size' in lineItem && lineItem.size) otherInfo.push(`الحجم: ${lineItem.size}`);
  //     if ('material' in lineItem && lineItem.material) otherInfo.push(`المادة: ${lineItem.material}`);
  //     if ('dimensions' in lineItem && lineItem.dimensions) otherInfo.push(`الأبعاد: ${lineItem.dimensions}`);
  //     if ('weight' in lineItem && lineItem.weight) otherInfo.push(`الوزن: ${lineItem.weight}`);

  //     if (otherInfo.length > 0) {
  //       return otherInfo.map(info => `• ${info}`).join('<br />');
  //     }
  //   }

  //   // إذا لم يتم العثور على أي معلومات، إرجاع رسالة مناسبة
  //   return 'لا توجد مواصفات متاحة';
  // };

  // تعديل دالة عرض المواصفات في صفحة المقارنة
  // دالة للحصول على مواصفات المورد لصنف معين
  const getVendorSpecification = (vendor: string, lineNumber: number) => {
    const offer = priceOffers.find(o => o.vendor === vendor);
    if (!offer) return '';

    const lineItem = offer.lineItems?.find(li => li.lineNumber === lineNumber);
    if (!lineItem) return '';

    // تحسين عرض المواصفات - التأكد من عرض جميع المواصفات المقدمة
    if (lineItem.vendorSpecifications) {
      const specs = lineItem.vendorSpecifications;

      // التأكد من أن المواصفات كائن وليست فارغة
      if (typeof specs === 'object' && specs !== null && Object.keys(specs).length > 0) {
        return Object.entries(specs)
          .filter(([key, value]) => {
            // التأكد من أن القيمة ليست null أو undefined أو فارغة
            return value !== null && value !== undefined && String(value).trim() !== '';
          })
          .map(([key, value]) => `• ${key}: ${value}`)
          .join('<br />');
      }
    }

    // إضافة محاولة بديلة للبحث عن المواصفات إذا لم يتم العثور عليها بالطريقة العادية
    // هذا يضمن عرض المواصفات حتى لو تم حفظها بتنسيق مختلف
    if (lineItem && typeof lineItem === 'object') {
      // البحث عن أي خصائص قد تحتوي على مواصفات
      for (const key in lineItem) {
        if (key.includes('spec') || key.includes('Specification')) {
          const specValue = (lineItem as any)[key];
          if (specValue && typeof specValue === 'object' && Object.keys(specValue).length > 0) {
            return Object.entries(specValue)
              .filter(([_, value]) => value !== null && value !== undefined && String(value).trim() !== '')
              .map(([key, value]) => `• ${key}: ${value}`)
              .join('<br />');
          }
        }
      }
    }

    // إذا لم يتم العثور على مواصفات، عرض أي معلومات متاحة من الصنف
    if (lineItem && Object.keys(lineItem).length > 0) {
      const otherInfo = [];

      // التحقق من وجود الخصائص قبل الوصول إليها
      if ('description' in lineItem && lineItem.description) otherInfo.push(`الوصف: ${lineItem.description}`);
      if ('brand' in lineItem && lineItem.brand) otherInfo.push(`الماركة: ${lineItem.brand}`);
      if ('model' in lineItem && lineItem.model) otherInfo.push(`الموديل: ${lineItem.model}`);
      if ('origin' in lineItem && lineItem.origin) otherInfo.push(`بلد المنشأ: ${lineItem.origin}`);
      if ('warranty' in lineItem && lineItem.warranty) otherInfo.push(`الضمان: ${lineItem.warranty}`);
      if ('color' in lineItem && lineItem.color) otherInfo.push(`اللون: ${lineItem.color}`);
      if ('size' in lineItem && lineItem.size) otherInfo.push(`الحجم: ${lineItem.size}`);
      if ('material' in lineItem && lineItem.material) otherInfo.push(`المادة: ${lineItem.material}`);
      if ('dimensions' in lineItem && lineItem.dimensions) otherInfo.push(`الأبعاد: ${lineItem.dimensions}`);
      if ('weight' in lineItem && lineItem.weight) otherInfo.push(`الوزن: ${lineItem.weight}`);

      if (otherInfo.length > 0) {
        return otherInfo.map(info => `• ${info}`).join('<br />');
      }
    }

    // إذا لم يتم العثور على أي معلومات، إرجاع رسالة مناسبة
    return 'لا توجد مواصفات متاحة';
  };

  // دالة للحصول على المواصفات المطلوبة لصنف معين
  const getRequiredSpecifications = (lineNumber: number) => {
    const item = poItems.find(item => item.lineNumber === lineNumber);
    if (!item?.specifications) return '';
    return Object.entries(item.specifications)
      .filter(([key, value]) => value && typeof value === 'string' && value.trim() !== '')
      .map(([key, value]) => `• ${key}: ${value}`)
      .join('<br />');
  };

  // دالة لتحويل المبلغ إلى الريال اليمني
  const convertToYemeniRiyal = (amount: number, currency: string) => {
    if (currency === 'ريال يمني' || currency === 'ريال') return amount;

    // البحث عن سعر الصرف من عروض الأسعار
    const offerWithRate = priceOffers.find(offer =>
      offer.currency === currency && offer.exchangeRate && offer.exchangeRate > 0
    );

    if (offerWithRate && offerWithRate.exchangeRate) {
      return amount * offerWithRate.exchangeRate;
    }

    return amount; // إذا لم يتم العثور على سعر صرف
  };

  // دالة لحساب إجمالي عرض المورد بالعملة الأصلية
  const getVendorTotalOffer = (vendor: string) => {
    const offer = priceOffers.find(o => o.vendor === vendor);
    if (!offer) return 0;   // تعديل: إرجاع 0 إذا لم يتم العثور على العرض

    // استخدام totalAfterTax إذا كان موجودًا، وإلا حسابه من lineItems
    if (offer.totalAfterTax) {
      return offer.totalAfterTax;
    }

    // استخدام total إذا كان موجودًا
    if (offer.total) {
      return offer.total;
    }

    // إذا لم يوجد أي من الحقول السابقة، نحسب من lineItems
    if (offer.lineItems) {
      return offer.lineItems.reduce((total, lineItem) => {
        const poItem = poItems.find(item =>
          item.lineNumber === lineItem.lineNumber || item.name === lineItem.name
        );
        if (!poItem) return total;
        const unitPriceAfterTax = (lineItem?.unitPriceAfterTax ?? lineItem?.unitPrice) || 0;
        return total + (unitPriceAfterTax * (lineItem.offeredQty || poItem.quantity));
      }, 0);
    }

    // إذا لم يكن هناك أي شيء، نرجع المبلغ الأصلي
    return offer.amount || 0;
  };

  // دالة لحساب إجمالي عرض المورد بالريال اليمني
  const getVendorTotalOfferInRiyal = (vendor: string) => {
    const offer = priceOffers.find(o => o.vendor === vendor);
    if (!offer) return 0;    // تعديل: إرجاع 0 إذا لم يتم العثور على العرض

    // استخدام totalInYR إذا كان موجودًا
    if (offer.totalInYR) {
      return offer.totalInYR;
    }

    // حسابه من البيانات المتاحة
    const total = getVendorTotalOffer(vendor);
    const currency = getVendorCurrency(vendor);

    if (currency === 'ريال') {
      return total;
    }

    const exchangeRate = offer.exchangeRate || 1;
    return total * exchangeRate;
  };

  // دالة للحصول على عملة المورد
  const getVendorCurrency = (vendor: string) => {
    const offer = priceOffers.find(o => o.vendor === vendor);
    return offer?.currency || 'ريال';
  };

  // دالة للحصول على ملاحظات الاختلافات بين المواصفات المطلوبة والمقدمة
  const getSpecificationDifferences = (vendor: string) => {
    const offer = priceOffers.find(o => o.vendor === vendor);
    if (!offer) return '';
    let differences = '';

    poItems.forEach(item => {
      const requiredSpecs = getRequiredSpecifications(item.lineNumber);
      const vendorSpecs = getVendorSpecification(vendor, item.lineNumber);

      // الحصول على التكلفة التقديرية والسعر المقدم
      const estimatedCostInfo = getEstimatedCostForItem(item.lineNumber);
      const estimatedCost = estimatedCostInfo.amount;
      const estimatedCurrency = estimatedCostInfo.currency;

      const lineItem = offer.lineItems?.find(li =>
        li.lineNumber === item.lineNumber || li.name === item.name
      );
      const unitPriceAfterTax = (lineItem?.unitPriceAfterTax ?? lineItem?.unitPrice) || 0;
      const exchangeRate = offer.currency === 'ريال' ? 1 : (offer.exchangeRate || 0);
      const unitPriceInRiyal = unitPriceAfterTax && exchangeRate ? unitPriceAfterTax * exchangeRate : 0;
      const offeredTotal = unitPriceInRiyal * (lineItem?.offeredQty || item.quantity);
      const estimatedTotal = estimatedCost * item.quantity;

      // حساب نسبة الفرق
      let priceDifference = '';
      let priceStatus = '';
      if (estimatedTotal > 0 && offeredTotal > 0) {
        const percentageDiff = ((offeredTotal - estimatedTotal) / estimatedTotal) * 100;
        if (Math.abs(percentageDiff) < 0.01) {
          priceStatus = 'مطابق';
        } else if (percentageDiff > 0) {
          priceStatus = `أعلى بنسبة ${percentageDiff.toFixed(2)}%`;
        } else {
          priceStatus = `أقل بنسبة ${Math.abs(percentageDiff).toFixed(2)}%`;
        }
        priceDifference = `<p><strong>الفرق في السعر:</strong> ${priceStatus}</p>`;
      }

      // التحقق من المواصفات
      if (!vendorSpecs || vendorSpecs === 'لا توجد مواصفات متاحة') {
        differences += `<p><strong>الصنف ${item.lineNumber} - ${item.name}:</strong> لم يقدم المورد مواصفات</p>`;
        differences += priceDifference;
      } else if (!requiredSpecs || requiredSpecs === '') {
        differences += `<p><strong>الصنف ${item.lineNumber} - ${item.name}:</strong> لا توجد مواصفات مطلوبة للمقارنة</p>`;
        differences += priceDifference;
      } else if (requiredSpecs === vendorSpecs) {
        differences += `<p><strong>الصنف ${item.lineNumber} - ${item.name}:</strong> مطابق للمواصفات المطلوبة</p>`;
        differences += priceDifference;
      } else {
        differences += `<p><strong>الصنف ${item.lineNumber} - ${item.name}:</strong> غير مطابق - يوجد اختلاف بين المواصفات</p>`;
        differences += `<div class="mr-4">`;
        differences += `<p class="text-sm"><strong>المطلوب:</strong></p>`;
        differences += `<p class="text-sm">${requiredSpecs}</p>`;
        differences += `<p class="text-sm mt-2"><strong>المقدم:</strong></p>`;
        differences += `<p class="text-sm">${vendorSpecs}</p>`;
        differences += `</div>`;
        differences += priceDifference;
      }
      
      // التحقق من الكميات المقدمة (يستخدم lineItem المعرف أعلاه)
      
      if (lineItem) {
        const requestedQty = item.quantity;
        const offeredQty = lineItem.offeredQty || 0;
        
        if (offeredQty < requestedQty) {
          const shortage = requestedQty - offeredQty;
          const shortagePercentage = ((shortage / requestedQty) * 100).toFixed(1);
          differences += `<p><strong>نقص في الكمية:</strong> المطلوب ${requestedQty} والمقدم ${offeredQty} (نقص ${shortage} وحدة - ${shortagePercentage}%)</p>`;
        }
      } else {
        differences += `<p><strong>الكمية:</strong> لم يتم تقديم كمية للصنف</p>`;
      }
    });

    // إضافة ملاحظة عن وجود خطأ في إجمالي مبلغ العرض إذا كانت موجودة
    if (offer.notes && offer.notes.includes('يوجد اختلاف بين إجمالي مبلغ العرض وإجمالي أسعار الأصناف')) {
      differences += `<p><strong>ملاحظة هامة:</strong> هناك خطأ في إجمالي مبلغ العرض</p>`;
    }

    return differences;
  };

  return (
    <div className="bg-white rounded-lg shadow-lg p-4 print:shadow-none print:p-2 border border-gray-200 print:landscape">
      <h2 className="text-lg font-semibold mb-4 text-right">مقارنة عروض الموردين</h2>

      {/* جدول مقارنة إجمالية للعروض */}
      <div className="overflow-x-auto mb-8">
        <table className="w-full border-collapse border border-gray-300 text-sm">
          <thead>
            {/* عنوان رئيسي للجدول */}
            <tr className="bg-gray-100">
              <th className="border-2 border-gray-400 p-2 bg-gray-200 w-2/10" colSpan={4}>
                <div className="text-sm font-semibold">بيانات طلب الشراء</div>
              </th>
              {priceOffers.map((offer, idx) => (
                <th
                  key={`vendor-${offer.id}`}
                  colSpan={3}
                  className={`border-2 border-gray-400 p-2 text-center w-6/10 ${idx % 2 === 0 ? 'bg-blue-100' : 'bg-indigo-100'}`}
                >
                  <div className="text-sm font-semibold">{offer.vendor || `العرض ${idx + 1}`}</div>
                </th>
              ))}
            </tr>
            {/* عناوين الأعمدة */}
            <tr className="bg-gray-100">
              <th className="border-2 border-gray-400 p-2 bg-gray-200 w-2/10">رقم الطلب</th>
              <th className="border-2 border-gray-400 p-2 bg-gray-200 w-2/10">إجمالي التكلفة التقديرية</th>
              <th className="border-2 border-gray-400 p-2 bg-gray-200 w-2/10">العملة</th>
              <th className="border-2 border-gray-400 p-2 bg-gray-200 w-2/10">المبلغ المعادل بالريال</th>
              {priceOffers.map((offer, idx) => (
                <React.Fragment key={`total-h-${offer.id}`}>
                  <th className={`border-2 border-gray-400 p-2 text-center w-2/10 ${idx % 2 === 0 ? 'bg-blue-100' : 'bg-indigo-100'}`}>
                    <div className="text-xs font-medium">إجمالي مبلغ العرض</div>
                  </th>
                  <th className={`border-2 border-gray-400 p-2 text-center w-2/10 ${idx % 2 === 0 ? 'bg-blue-100' : 'bg-indigo-100'}`}>
                    <div className="text-xs font-medium">العملة</div>
                  </th>
                  <th className={`border-2 border-gray-400 p-2 text-center w-2/10 ${idx % 2 === 0 ? 'bg-blue-100' : 'bg-indigo-100'}`}>
                    <div className="text-xs font-medium">المبلغ المعادل بالريال</div>
                  </th>
                </React.Fragment>
              ))}
            </tr>
          </thead>
          <tbody>
            <tr>
              {/* تعديل: إظهار رقم طلب الشراء فقط بدون إضافة رقم 1 */}
              <td className="border border-gray-300 p-2 text-center">{poNumber}</td>
              <td className="border border-gray-300 p-2 text-center">
                {formatNumberWithCommas(getTotalEstimatedCost().amount)} {getTotalEstimatedCost().currency}
              </td>
              <td className="border border-gray-300 p-2 text-center">{getTotalEstimatedCost().currency}</td>
              <td className="border border-gray-300 p-2 text-center">
                {formatNumberWithCommas(convertToYemeniRiyal(getTotalEstimatedCost().amount, getTotalEstimatedCost().currency))}
              </td>
              {priceOffers.map((offer, idx) => {
                const vendorTotal = getVendorTotalOffer(offer.vendor);
                const vendorTotalInRiyal = getVendorTotalOfferInRiyal(offer.vendor);
                const currency = getVendorCurrency(offer.vendor);
                return (
                  <React.Fragment key={`total-r-${offer.id}`}>
                    <td className="border border-gray-300 p-2 text-center">{formatNumberWithCommas(vendorTotal)}</td>
                    <td className="border border-gray-300 p-2 text-center">{currency}</td>
                    <td className="border border-gray-300 p-2 text-center">{formatNumberWithCommas(vendorTotalInRiyal)}</td>
                  </React.Fragment>
                );
              })}
            </tr>
          </tbody>
        </table>
      </div>

      {/* جدول مقارنة الأسعار */}
      <h2 className="text-lg font-semibold mb-4 text-right">مقارنة عروض الموردين تفصيلي</h2>
      <div className="overflow-x-auto mb-8">
        <table className="w-full border-collapse border border-gray-300 text-sm">
          <thead>
            {/* عنوان رئيسي للأصناف والكميات المطلوبة */}
            <tr className="bg-gray-100">
              <th className="border-2 border-gray-400 p-2 bg-gray-200 w-1/10" colSpan={5}>
                <div className="text-sm font-semibold">الأصناف والكميات المطلوبة</div>
              </th>
              {priceOffers.map((offer, idx) => (
                <th
                  key={`vh-${offer.id}`}
                  colSpan={3}
                  className={`border-2 border-gray-400 p-2 text-center w-3/10 ${idx % 2 === 0 ? 'bg-blue-100' : 'bg-indigo-100'}`}
                >
                  <div className="text-xs font-medium">{offer.vendor || `العرض ${idx + 1}`}</div>
                </th>
              ))}
            </tr>
            {/* عناوين الأعمدة */}
            <tr className="bg-gray-50">
              <th className="border border-gray-300 p-1 text-center text-xs bg-gray-200 w-1/10">السطر</th>
              <th className="border border-gray-300 p-1 text-center text-xs bg-gray-200 w-5/10">الصنف</th>
              <th className="border border-gray-300 p-1 text-center text-xs bg-gray-200 w-2/10">الكمية</th>
              <th className="border border-gray-300 p-1 text-center text-xs bg-gray-200 w-2/10">التكلفة التقديرية للوحدة</th>
              <th className="border border-gray-300 p-1 text-center text-xs bg-gray-200 w-2/10">المعادل بالريال للوحدة</th>
              {priceOffers.map((offer, idx) => (
                <React.Fragment key={`cols-${offer.id}`}>
                  <th className={`border border-gray-300 p-1 text-center text-xs w-2/10 ${idx % 2 === 0 ? 'bg-blue-50' : 'bg-indigo-50'}`}>
                    الكمية المقدمة
                  </th>
                  <th className={`border border-gray-300 p-1 text-center text-xs w-3/10 ${idx % 2 === 0 ? 'bg-blue-50' : 'bg-indigo-50'}`}>
                    سعر الوحدة ({offer.currency || ''})
                  </th>
                  <th className={`border border-gray-300 p-1 text-center text-xs w-3/10 ${idx % 2 === 0 ? 'bg-blue-50' : 'bg-indigo-50'}`}>
                    سعر الوحدة (ريال)
                  </th>
                </React.Fragment>
              ))}
            </tr>
          </thead>
          <tbody>
            {poItems.map((item) => {
              const estimatedCost = getEstimatedCostForItem(item.lineNumber);
              const equivalentInRiyal = getEquivalentInRiyalForItem(item.lineNumber);
              const minPriceInRiyal = getMinPriceInRiyal(item.lineNumber);

              return (
                <tr key={`cmp-${item.lineNumber}`} className="hover:bg-gray-50">
                  {/* معلومات الصنف الأساسية */}
                  <td className="border border-gray-300 p-2 text-center w-1/10">{item.lineNumber}</td>
                  <td className="border border-gray-300 p-2 w-5/10">{item.name}</td>
                  <td className="border border-gray-300 p-2 text-center w-2/10">{item.quantity}</td>
                  <td className="border border-gray-300 p-2 text-center w-2/10">
                    {formatNumberWithCommas(estimatedCost.amount)} {estimatedCost.currency}
                  </td>
                  <td className="border border-gray-300 p-2 text-center w-2/10">
                    {equivalentInRiyal > 0 ? formatNumberWithCommas(equivalentInRiyal) : '-'}
                  </td>

                  {/* عروض الموردين للصنف الحالي */}
                  {priceOffers.map((offer, idx) => {
                    const lineItem = offer.lineItems?.find(li =>
                      li.lineNumber === item.lineNumber || li.name === item.name
                    );
                    const qty = lineItem?.offeredQty || '';
                    const unitPriceAfterTax = (lineItem?.unitPriceAfterTax ?? lineItem?.unitPrice) || 0;
                    const exchangeRate = offer.currency === 'ريال' ? 1 : (offer.exchangeRate || 0);
                    const unitPriceInRiyal = unitPriceAfterTax && exchangeRate ? unitPriceAfterTax * exchangeRate : 0;

                    // تحديد إذا كان هذا هو أقل سعر
                    const isMinPrice = unitPriceInRiyal === minPriceInRiyal && unitPriceInRiyal > 0;
                    
                    // تحديد إذا كانت الكمية المقدمة أقل من المطلوبة
                    const isQuantityShort = lineItem && lineItem.offeredQty < item.quantity;

                    return (
                      <React.Fragment key={`row-${offer.id}-${item.lineNumber}`}>
                        <td className={`border border-gray-300 p-2 text-center w-2/10 ${isQuantityShort ? 'bg-red-100 text-red-700 font-semibold' : ''}`}>
                          {qty}
                          {isQuantityShort && (
                            <div className="text-xs text-red-600 mt-1">
                              نقص: {item.quantity - (lineItem?.offeredQty || 0)}
                            </div>
                          )}
                        </td>
                        <td className="border border-gray-300 p-2 text-center w-3/10">
                          {unitPriceAfterTax ? formatNumberWithCommas(unitPriceAfterTax) : ''}
                        </td>
                        <td className={`border border-gray-300 p-2 text-center w-3/10 ${isMinPrice ? 'bg-green-100 font-semibold' : ''}`}>
                          {unitPriceInRiyal ? formatNumberWithCommas(unitPriceInRiyal) : ''}
                        </td>
                      </React.Fragment>
                    );
                  })}
                </tr>
              );
            })}
          </tbody>
        </table>
      </div>

      {/* جدول مقارنة المواصفات */}
      <h2 className="text-lg font-semibold mb-4 text-right mt-8">مقارنة المواصفات</h2>
      <div className="overflow-x-auto mb-6">
        <table className="w-full border-collapse border border-gray-300 text-sm">
          <thead>
            <tr className="bg-gray-100">
              <th className="border-2 border-gray-400 p-2 bg-gray-200 w-2/10">السطر</th>
              <th className="border-2 border-gray-400 p-2 bg-gray-200 w-3/10">الصنف</th>
              <th className="border-2 border-gray-400 p-2 bg-gray-200 w-3/10">المواصفات المطلوبة</th>
              {priceOffers.map((offer, idx) => (
                <th
                  key={`spec-vh-${offer.id}`}
                  className={`border-2 border-gray-400 p-2 text-center w-4/10 ${idx % 2 === 0 ? 'bg-blue-100' : 'bg-indigo-100'}`}
                >
                  <div className="text-xs font-medium">{offer.vendor || `العرض ${idx + 1}`}</div>
                </th>
              ))}
            </tr>
          </thead>
          <tbody>
            {poItems.map((item) => (
              <tr key={`spec-${item.lineNumber}`} className="hover:bg-gray-50">
                <td className="border border-gray-300 p-2 text-center w-2/10">{item.lineNumber}</td>
                <td className="border border-gray-300 p-2 w-3/10">{item.name}</td>
                {/* <td className="border border-gray-300 p-2 w-3/10"> */}
                  {/* عرض المواصفات المطلوبة من جدول الأصناف */}
                  {/* <div
                    className="text-sm p-2 bg-gray-50 rounded"
                    dangerouslySetInnerHTML={{ __html: getRequiredSpecifications(item.lineNumber) || 'لا توجد مواصفات محددة' }}
                  />
                </td> */}
                {/* تعديل كيفية عرض المواصفات في الجدول */}
                 {/* في جدول مقارنة المواصفات، استخدم هذا الكود بدلاً من الكود الحالي */}
                <td className="border border-gray-300 p-2 w-3/10">
                  <div
                    className="text-sm p-2 bg-gray-50 rounded"
                    dangerouslySetInnerHTML={{ 
                      __html: getRequiredSpecifications(item.lineNumber) || 
                            '<span class="text-gray-400">لا توجد مواصفات محددة</span>' 
                    }}
                  />
                </td>
                {/* عرض مواصفات الموردين */}
                {priceOffers.map((offer, idx) => (
                  <td
                    key={`spec-row-${offer.id}-${item.lineNumber}`}
                    className={`border border-gray-300 p-2 w-4/10 ${idx % 2 === 0 ? 'bg-blue-50' : 'bg-indigo-50'}`}
                  >
                    {/* عرض مواصفات المورد */}
                    <div
                      className="text-sm"
                      dangerouslySetInnerHTML={{
                        __html: getVendorSpecification(offer.vendor, item.lineNumber) || 'لم يقدم مواصفات'
                      }}
                    />
                  </td>
                ))}
              </tr>
            ))}
          </tbody>
        </table>
      </div>

      {/* ملاحظات الاختلافات بين المواصفات لكل مورد */}
      <div className="mt-6">
        <h3 className="font-medium mb-2">ملاحظات الاختلافات في المواصفات:</h3>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          {priceOffers.map((offer, idx) => (
            <div key={`notes-${offer.id}`} className="border border-gray-300 rounded p-3">
              <h4 className="font-medium mb-2">{offer.vendor || `العرض ${idx + 1}`}</h4>
              <div
                className="text-sm"
                dangerouslySetInnerHTML={{
                  __html: getSpecificationDifferences(offer.vendor) || 'لا توجد اختلافات في المواصفات'
                }}
              />
            </div>
          ))}
        </div>
      </div>

      {/* إضافة ملاحظات عامة تحت الجداول */}
      <div className="mt-6">
        <p className="font-medium">ملاحظات:</p>
        <div className="border-b border-gray-300 border-dashed pb-1 mb-2"></div>
      </div>
    </div>
  );
};

; ====================================================================

الكود السادس صفحة الاصناف المطلوبة
// purchases_alamin7-copy5\src\components\PurchaseOrderItems.tsx
; ========================================================================

// مكون جدول الأصناف المطلوبة مع تحسينات شاملة للبحث والمواصفات والتكلفة التقديرية
import React, { useState, useEffect, useRef } from 'react';
import { Plus, Search, Edit, Save, X, Package, Calculator, FileText } from 'lucide-react';
import { usePurchaseOrder } from '../context/PurchaseOrderContext';
import { PurchaseOrderItem } from '../types';
import { useDebounce } from '../hooks/useDebounce';
import { searchItemsByCodePart, searchItemsByNamePart, getItemNameByCodeExact, toDisplayItem } from '../utils/itemCatalog';

export const PurchaseOrderItems: React.FC = () => {
  const {
    poItems,
    setPoItems,
    savePurchaseOrder,
    priceOffers,
    hasUnsavedChanges
  } = usePurchaseOrder();

  // حالات إدارة الأصناف
  const [editingItem, setEditingItem] = useState<string | null>(null);
  const [searchResults, setSearchResults] = useState<any[]>([]);
  const [showSearchResults, setShowSearchResults] = useState(false);
  const [searchQuery, setSearchQuery] = useState('');
  const [isSearching, setIsSearching] = useState(false);

  // حالات التكلفة التقديرية والمواصفات المؤقتة لكل صنف منفصل
  const [tempItemData, setTempItemData] = useState<{
    [key: string]: {
      estimatedCost: { amount: number; currency: string; equivalentInYR: number };
      specifications: { [key: string]: string | undefined };
    };
  }>({});

  // مراجع للحقول
  const searchInputRef = useRef<HTMLInputElement>(null);

  // 🟢 تعريف قائمة وحدة القياس
  const unitOptions = [
    'Each', 'Meter', 'Liter', 'Set', 'Kilogram', 'CAN', 'Galons', 'CRT',
    'Kilometer', 'Dabba', 'Packet', 'Kit', 'TON', 'لفة', 'بدلة', 'طب'
  ];

  // استخدام useDebounce لتأخير البحث التلقائي
  const debouncedSearchQuery = useDebounce(searchQuery, 300);

  /**
   * تهيئة البيانات المؤقتة عند تحميل المكون أو تغيير الأصناف
   * يتم إنشاء بيانات منفصلة لكل صنف لتجنب التداخل
   */
  useEffect(() => {
    const initTempData = () => {
      const newTempData: {
        [key: string]: {
          estimatedCost: { amount: number, currency: string, equivalentInYR: number },
          specifications: { [key: string]: string | undefined }
        }
      } = {};
      
      poItems.forEach(item => {
        // تهيئة التكلفة التقديرية لكل صنف منفصل
        if (item.estimatedCost) {
          newTempData[item.id] = {
            estimatedCost: {
              amount: item.estimatedCost.amount,
              currency: item.estimatedCost.currency,
              equivalentInYR: item.estimatedCost.equivalentInYR || 0
            },
            specifications: item.specifications ? { ...item.specifications } : {}
          };
        } else {
          newTempData[item.id] = {
            estimatedCost: { amount: 0, currency: 'ريال', equivalentInYR: 0 },
            specifications: {}
          };
        }
      });
      
      setTempItemData(newTempData);
    };
    
    initTempData();
  }, [poItems]);

  /**
   * حفظ تلقائي محسن - يحفظ بعد ثانيتين من التوقف عن التعديل
   */
  useEffect(() => {
    const autoSaveTimer = setTimeout(async () => {
      if (poItems.length > 0 && hasUnsavedChanges) {
        try {
          await savePurchaseOrder();
          console.log('✅ تم الحفظ التلقائي بنجاح');
        } catch (error) {
          console.error('❌ فشل الحفظ التلقائي:', error);
        }
      }
    }, 2000);
    
    return () => clearTimeout(autoSaveTimer);
  }, [poItems, hasUnsavedChanges, savePurchaseOrder]);

  /**
   * دالة البحث التلقائي المحسنة - تبحث برقم الصنف أو اسم الصنف
   * تعمل عند تغيير نص البحث مع تأخير لتحسين الأداء
   */
  useEffect(() => {
    const performAutoSearch = async () => {
      if (!debouncedSearchQuery.trim() || debouncedSearchQuery.length < 2) {
        setSearchResults([]);
        setShowSearchResults(false);
        return;
      }
      
      setIsSearching(true);
      
      try {
        let results: any[] = [];
        
        // البحث برقم الصنف أولاً (إذا كان النص يحتوي على أرقام)
        if (/\d/.test(debouncedSearchQuery)) {
          results = await searchItemsByCodePart(debouncedSearchQuery);
        }
        
        // إذا لم نجد نتائج أو النص لا يحتوي على أرقام، ابحث باسم الصنف
        if (results.length === 0) {
          results = await searchItemsByNamePart(debouncedSearchQuery);
        }
        
        // تحويل النتائج للعرض مع تحديد أفضل 15 نتيجة
        const displayResults = results.slice(0, 15).map(toDisplayItem);
        setSearchResults(displayResults);
        setShowSearchResults(displayResults.length > 0);
      } catch (error) {
        console.error('خطأ في البحث التلقائي:', error);
        setSearchResults([]);
        setShowSearchResults(false);
      } finally {
        setIsSearching(false);
      }
    };
    
    performAutoSearch();
  }, [debouncedSearchQuery]);

  /**
   * دالة إضافة صنف جديد مع تهيئة البيانات الافتراضية
   */
  const handleAddItem = () => {
    // تعديل ترقيم السطر تلقائياً - يبدأ من 1 ويزداد مع كل إضافة
    const newLineNumber = poItems.length > 0
      ? Math.max(...poItems.map(item => item.lineNumber)) + 1
      : 1;
      
    const newItem: PurchaseOrderItem = {
      id: `item-${Date.now()}`,
      code: '',
      name: '',
      quantity: 0, // تعديل: جعل الكمية فارغة (0) بدلاً من 1
      unit: '', // تعديل: جعل الوحدة فارغة
      selected: true,
      lineNumber: newLineNumber,
      estimatedCost: {
        amount: 0,
        currency: 'ريال',
        equivalentInYR: 0
      },
      specifications: {},
      poNumber: 0
    };
    
    setPoItems([...poItems, newItem]);
    setEditingItem(newItem.id);
    
    // تهيئة البيانات المؤقتة للصنف الجديد
    setTempItemData(prev => ({
      ...prev,
      [newItem.id]: {
        estimatedCost: { amount: 0, currency: 'ريال', equivalentInYR: 0 },
        specifications: {}
      }
    }));
  };

  /**
   * دالة تحديث صنف مع حفظ فوري للتغييرات البسيطة
   */
  const handleUpdateItem = (id: string, updates: Partial<PurchaseOrderItem>) => {
    setPoItems(poItems.map(item =>
      item.id === id ? { ...item, ...updates } : item
    ));
  };

  /**
   * دالة حذف صنف مع تنظيف البيانات المرتبطة
   */
  const handleRemoveItem = (id: string) => {
    if (confirm('هل أنت متأكد من حذف هذا الصنف؟')) {
      setPoItems(poItems.filter(item => item.id !== id));
      
      // إزالة البيانات المؤقتة المرتبطة بالصنف المحذوف
      const newTempData = { ...tempItemData };
      delete newTempData[id];
      setTempItemData(newTempData);
    }
  };

  /**
   * دالة حفظ التعديلات مع التحقق من صحة البيانات
   * تحفظ التكلفة التقديرية والمواصفات بشكل منفصل لكل صنف
   */
  const handleSaveItem = async (id: string) => {
    const item = poItems.find(item => item.id === id);
    if (!item) return;
    
    // التحقق من صحة البيانات الأساسية
    if (!item.name.trim()) {
      alert('⚠️ اسم الصنف مطلوب');
      return;
    }
    
    // تعديل: التحقق من إدخال الكمية والوحدة
    if (!item.quantity || item.quantity <= 0) {
      alert('⚠️ الكمية مطلوبة ويجب أن تكون أكبر من صفر');
      return;
    }
    
    if (!item.unit || item.unit.trim() === '') {
      alert('⚠️ الوحدة مطلوبة');
      return;
    }
    
    // تحديث التكلفة التقديرية مع حساب المعادل بالريال
    const costData = tempItemData[id]?.estimatedCost;
    if (costData) {
      const equivalentInYR = calculateEquivalentInYR(costData.amount, costData.currency);
      handleUpdateItem(id, {
        estimatedCost: {
          amount: costData.amount,
          currency: costData.currency,
          equivalentInYR
        }
      });
    }
    
    // تحديث المواصفات
    const specsData = tempItemData[id]?.specifications;
    if (specsData) {
      handleUpdateItem(id, {
        specifications: { ...specsData }
      });
    }
    
    setEditingItem(null);
    await savePurchaseOrder();
  };

  /**
   * دالة حساب المعادل بالريال اليمني باستخدام أسعار الصرف من جدول العروض
   * تربط التكلفة التقديرية تلقائياً بأسعار الصرف المدخلة لاحقاً
   */
  const calculateEquivalentInYR = (amount: number, currency: string): number => {
    if (currency === 'ريال') return amount;
    
    // البحث عن سعر الصرف من عروض الأسعار المدخلة
    const offerWithRate = priceOffers.find(offer =>
      offer.currency === currency && offer.exchangeRate && offer.exchangeRate > 0
    );
    
    if (offerWithRate && offerWithRate.exchangeRate) {
      return amount * offerWithRate.exchangeRate;
    }
    
    // إذا لم نجد سعر صرف، نعيد المبلغ كما هو مع تحذير
    console.warn(`⚠️ لم يتم العثور على سعر صرف للعملة ${currency}`);
    return amount;
  };

  /**
   * دالة البحث اليدوي المحسنة عند تغيير اسم الصنف
   * تدعم البحث برقم الصنف أو اسم الصنف مع تحديث تلقائي
   */
  const handleItemNameChange = async (id: string, value: string) => {
    handleUpdateItem(id, { name: value });
    
    // إذا كان النص يحتوي على أرقام، ابحث برقم الصنف أولاً
    if (/\d/.test(value) && value.length >= 3) {
      try {
        const foundName = await getItemNameByCodeExact(value);
        if (foundName) {
          handleUpdateItem(id, {
            code: value,
            name: foundName
          });
          return; // توقف هنا إذا وجدت تطابق كامل
        }
      } catch (error) {
        console.error('❌ خطأ في البحث برقم الصنف:', error);
      }
    }
    
    // تحديث نص البحث لتفعيل البحث التلقائي
    setSearchQuery(value);
  };

  /**
   * دالة اختيار صنف من نتائج البحث مع تحديث تلقائي للبيانات
   */
  const handleSelectSearchResult = async (result: any) => {
    if (editingItem) {
      const itemName = result.name || '';
      const itemCode = result.code || '';
      
      handleUpdateItem(editingItem, {
        code: itemCode,
        name: itemName
      });
    }
    
    // إخفاء نتائج البحث بعد الاختيار
    setSearchQuery('');
    setSearchResults([]);
    setShowSearchResults(false);
  };

  /**
   * دالة إضافة مواصفة جديدة لصنف محدد
   */
  const handleAddSpecification = (itemId: string, key: string, value: string) => {
    setTempItemData(prev => ({
      ...prev,
      [itemId]: {
        ...prev[itemId],
        specifications: {
          ...prev[itemId]?.specifications,
          [key]: value
        }
      }
    }));
  };

  /**
   * دالة حذف مواصفة من صنف محدد
   */
  const handleRemoveSpecification = (itemId: string, key: string) => {
    setTempItemData(prev => {
      const newSpecs = { ...prev[itemId]?.specifications };
      delete newSpecs[key];
      
      return {
        ...prev,
        [itemId]: {
          ...prev[itemId],
          specifications: newSpecs
        }
      };
    });
  };

  /**
   * دالة تحديث التكلفة التقديرية مع إعادة حساب المعادل وحفظ فوري
   */
  const handleUpdateEstimatedCost = (itemId: string, field: 'amount' | 'currency', value: any) => {
    setTempItemData(prev => {
      const currentCost = prev[itemId]?.estimatedCost || { amount: 0, currency: 'ريال', equivalentInYR: 0 };
      const updatedCost = { ...currentCost, [field]: value };
      
      // إعادة حساب المعادل بالريال عند تغيير المبلغ أو العملة
      if (field === 'amount' || field === 'currency') {
        updatedCost.equivalentInYR = calculateEquivalentInYR(
          field === 'amount' ? value : updatedCost.amount,
          field === 'currency' ? value : updatedCost.currency
        );
      }
      
      // تحديث التكلفة التقديرية في العنصر الرئيسي بشكل فوري
      const item = poItems.find(item => item.id === itemId);
      if (item) {
        handleUpdateItem(itemId, {
          estimatedCost: updatedCost
        });
      }
      
      return {
        ...prev,
        [itemId]: {
          ...prev[itemId],
          estimatedCost: updatedCost
        }
      };
    });
  };

  return (
    <div className="bg-white rounded-lg shadow-lg p-4 mb-4 border border-gray-200 print:mb-0 print-container">
      {/* رأس القسم مع إحصائيات */}
      <div className="flex items-center justify-between mb-4 print:mb-2">
        <div className="flex items-center gap-4">
          <h2 className="text-xl font-semibold flex items-center text-gray-800">
            <Package className="ml-2 icon" size={20} />
            الأصناف المطلوبة
          </h2>
          
          {/* عرض إحصائيات سريعة */}
          <div className="flex items-center gap-4 text-sm text-gray-600 print:hidden">
            <span>العدد: {poItems.length}</span>
            <span>المكتملة: {poItems.filter(item => item.name && item.quantity > 0).length}</span>
          </div>
        </div>
        
        <button
          onClick={handleAddItem}
          className="py-2 px-4 bg-green-600 text-white rounded-md hover:bg-green-700 transition-colors flex items-center shadow-sm print:hidden"
        >
          <Plus size={18} className="ml-1" />
          إضافة صنف
        </button>
      </div>
      
      {/* جدول الأصناف المحسن مع تقسيم الأعمدة الجديد */}
      <div className="overflow-x-auto print:overflow-visible">
        <table className="w-full border-collapse border border-gray-300 rounded-lg overflow-hidden">
          <thead>
            <tr className="bg-gradient-to-r from-blue-600 to-blue-700 text-white">
              <th className="py-3 px-2 text-center font-semibold border border-gray-300" style={{ width: '5%' }}>
                السطر
              </th>
              
              {/* رقم الصنف مخفي عند الطباعة */}
              <th className="py-3 px-2 text-center font-semibold border border-gray-300 print:hidden" style={{ width: '5%' }}>
                رقم الصنف
              </th>
              
              {/* تعديل: زيادة عرض عمود بيان الصنف عند الطباعة */}
              <th className="py-3 px-2 text-center font-semibold border border-gray-300 print:py-1 print:border-2" style={{ width: '45%' }}>
                بيان الصنف
              </th>
              
              {/* تعديل: زيادة عرض عمود الكمية عند الطباعة */}
              <th className="py-3 px-2 text-center font-semibold border border-gray-300" style={{ width: '10%' }}>
                الكمية
              </th>
              
              {/* تعديل: زيادة عرض عمود الوحدة عند الطباعة */}
              <th className="py-3 px-2 text-center font-semibold border border-gray-300" style={{ width: '10%' }}>
                الوحدة
              </th>
              
              {/* تعديل: إخفاء عمود التكلفة التقديرية عند الطباعة */}
              <th className="py-3 px-2 text-center font-semibold border border-gray-300 print:hidden" style={{ width: '12%' }}>
                التكلفة التقديرية
              </th>
              
              {/* تعديل: زيادة عرض عمود المواصفات عند الطباعة */}
              <th className="py-3 px-2 text-center font-semibold border border-gray-300" style={{ width: '30%' }}>
                المواصفات
              </th>
              
              <th className="py-3 px-2 text-center font-semibold border border-gray-300 print:hidden" style={{ width: '8%' }}>
                الإجراءات
              </th>
            </tr>
          </thead>
          
          <tbody>
            {poItems.map((item) => (
              <tr key={item.id} className="hover:bg-blue-50 transition-colors">
                {/* رقم السطر */}
                <td className="py-3 px-2 border border-gray-300 text-center print:py-1">
                  {/* حقل رقم السطر للعرض فقط ويتم تحديده تلقائياً */}
                  <span className="font-medium">{item.lineNumber}</span>
                </td>
                
                {/* رقم الصنف - مخفي عند الطباعة */}
                <td className="py-3 px-2 border border-gray-300 print:py-1 print:hidden">
                  {editingItem === item.id ? (
                    <input
                      type="text"
                      value={item.code || ''}
                      onChange={(e) => {
                        handleUpdateItem(item.id, { code: e.target.value });
                        // تفعيل البحث التلقائي عند إدخال رقم الصنف
                        setSearchQuery(e.target.value);
                      }}
                      className="w-full border border-gray-300 rounded px-2 py-1 text-sm"
                      placeholder="رقم الصنف"
                      style={{ fontFamily: 'Arial, sans-serif' }}
                    />
                  ) : (
                    <span style={{ fontFamily: 'Arial, sans-serif' }}>{item.code || '-'}</span>
                  )}
                </td>
                
                {/* بيان الصنف مع البحث المحسن ومساحة أكبر */}
                <td className="py-3 px-2 border border-gray-300 print:py-1 print:border-2 relative">
                  {editingItem === item.id ? (
                    <div className="relative" style={{ minWidth: '300px' }}>
                      <input
                        ref={searchInputRef}
                        type="text"
                        value={item.name}
                        onChange={(e) => handleItemNameChange(item.id, e.target.value)}
                        className="w-full border border-gray-300 rounded px-3 py-2 text-sm"
                        placeholder="ابحث برقم الصنف أو اسم الصنف..."
                        style={{ minWidth: '450px' }} // زيادة العرض الافتراضي
                      />
                      
                      {/* نتائج البحث التلقائي المحسنة مع مساحة أكبر */}
                      {showSearchResults && searchResults.length > 0 && (
                        // <div className="absolute top-full left-0 right-0 bg-white border border-gray-300 rounded-md shadow-xl z-50 max-h-60 overflow-y-auto min-w-[300px]">
                        // لزيادة مساحة البحث عدلت السطر السابق الى 
                        <div className="mt-1 max-h-60 overflow-auto border border-gray-400 rounded-md bg-white shadow-sm text-sm p-2">
                          {isSearching && (
                            <div className="p-3 text-center text-gray-500">
                              <Search className="w-4 h-4 animate-spin mx-auto mb-1" />
                              جاري البحث...
                            </div>
                          )}
                          
                          {searchResults.map((result, index) => (
                            <div
                              key={index}
                              onClick={() => handleSelectSearchResult(result)}
                              className="p-3 hover:bg-blue-50 cursor-pointer border-b border-gray-100 last:border-b-0 transition-colors"
                            >
                              <div className="font-medium text-sm text-gray-800">
                                {result.name}
                              </div>
                              
                              {result.code && (
                                <div className="text-xs text-gray-500 mt-1">
                                  رقم الصنف: {result.code}
                                </div>
                              )}
                            </div>
                          ))}
                        </div>
                      )}
                    </div>
                  ) : (
                    <span className="break-words">{item.name}</span>
                  )}
                </td>
                
                {/* الكمية */}
                <td className="py-3 px-2 border border-gray-300 text-center print:py-1">
                  {editingItem === item.id ? (
                    <input
                      type="number"
                      value={item.quantity || ''}
                      onChange={(e) => handleUpdateItem(item.id, { quantity: parseFloat(e.target.value) || 0 })}
                      className="w-full text-center border border-gray-300 rounded px-2 py-1 text-sm required"
                      min="1"
                      step="1"
                      required
                      style={{ fontFamily: 'Arial, sans-serif' }}
                      placeholder="أدخل الكمية"
                    />
                  ) : (
                    <span style={{ fontFamily: 'Arial, sans-serif' }}>{item.quantity || '-'}</span>
                  )}
                </td>
                
                {/* وحدة القياس */}
                <td className="py-3 px-2 border border-gray-300 text-center print:py-1">
                  {editingItem === item.id ? (
                    <select
                      value={item.unit || ''}
                      onChange={(e) => handleUpdateItem(item.id, { unit: e.target.value })}
                      className="w-full border border-gray-300 rounded px-2 py-1 text-sm required"
                      required
                    >
                      <option value="">اختر الوحدة</option>
                      {/* قائمة منسدلة */}
                      {unitOptions.map(option => (
                        <option key={option} value={option}>{option}</option>
                      ))}
                    </select>
                  ) : (
                    <span>{item.unit || '-'}</span>
                  )}
                </td>
                
                {/* التكلفة التقديرية المحسنة - تظهر دائماً على الشاشة وتخفى عند الطباعة */}
                <td className="py-3 px-2 border border-gray-300 print:py-1 print:hidden">
                  {editingItem === item.id ? (
                    <div className="space-y-2">
                      {/* إدخال المبلغ والعملة */}
                      <div className="flex gap-1">
                        <input
                          type="number"
                          value={tempItemData[item.id]?.estimatedCost?.amount || 0}
                          onChange={(e) => handleUpdateEstimatedCost(item.id, 'amount', parseFloat(e.target.value) || 0)}
                          className="flex-1 border border-gray-300 rounded px-1 py-1 text-xs"
                          placeholder="المبلغ"
                          min="0"
                          step="0.01"
                          style={{ fontFamily: 'Arial, sans-serif' }}
                        />
                        
                        <select
                          value={tempItemData[item.id]?.estimatedCost?.currency || 'ريال'}
                          onChange={(e) => handleUpdateEstimatedCost(item.id, 'currency', e.target.value)}
                          className="border border-gray-300 rounded px-1 py-1 text-xs"
                        >
                          <option value="ريال">ريال</option>
                          <option value="دولار">دولار</option>
                          <option value="ريال سعودي">ريال سعودي</option>
                          <option value="يورو">يورو</option>
                        </select>
                      </div>
                      
                      {/* عرض المعادل بالريال إذا كانت العملة أجنبية */}
                      {tempItemData[item.id]?.estimatedCost?.currency !== 'ريال' && (
                        <div className="text-xs text-blue-600 bg-blue-50 p-1 rounded">
                          المعادل: {tempItemData[item.id]?.estimatedCost?.equivalentInYR?.toLocaleString() || 0} ريال
                          
                          {!priceOffers.some(offer => offer.currency === tempItemData[item.id]?.estimatedCost?.currency && offer.exchangeRate) && (
                            <div className="text-orange-600 mt-1">
                              ⚠️ لم يتم إدخال سعر صرف لهذه العملة في جدول العروض
                            </div>
                          )}
                        </div>
                      )}
                    </div>
                  ) : (
                    <div className="text-sm">
                      {item.estimatedCost && item.estimatedCost.amount > 0 ? (
                        <>
                          <div style={{ fontFamily: 'Arial, sans-serif' }}>
                            {item.estimatedCost.amount.toLocaleString()} {item.estimatedCost.currency}
                          </div>
                          
                          {item.estimatedCost.currency !== 'ريال' && item.estimatedCost.equivalentInYR && (
                            <div className="text-xs text-gray-600 mt-1" style={{ fontFamily: 'Arial, sans-serif' }}>
                              ({item.estimatedCost.equivalentInYR.toLocaleString()} ريال)
                            </div>
                          )}
                        </>
                      ) : (
                        <span className="text-gray-400">غير محدد</span>
                      )}
                    </div>
                  )}
                </td>
                
                {/* المواصفات */}
                <td className="py-3 px-2 border border-gray-300 text-center print:py-1">
                  {editingItem === item.id ? (
                    <div className="space-y-1">
                      <div className="text-xs font-medium mb-1">المواصفات:</div>
                      
                      {Object.entries(tempItemData[item.id]?.specifications || {}).map(([key, value]) => (
                        <div key={key} className="text-xs bg-gray-50 p-1 rounded">
                          {key}: {value}
                        </div>
                      ))}
                      
                      <button
                        onClick={() => {
                          const newKey = prompt('اسم المواصفة الجديدة:');
                          if (newKey) {
                            handleAddSpecification(item.id, newKey, '');
                          }
                        }}
                        className="w-full px-2 py-1 bg-blue-600 text-white rounded text-xs hover:bg-blue-700"
                      >
                        إضافة مواصفة
                      </button>
                    </div>
                  ) : (
                    <div className="text-xs">
                      {item.specifications && Object.keys(item.specifications).length > 0 ? (
                        <div className="space-y-1">
                          {Object.entries(item.specifications).map(([key, value]) => (
                            <div key={key} className="bg-gray-50 p-1 rounded">
                              {key}: {value}
                            </div>
                          ))}
                        </div>
                      ) : (
                        <span className="text-gray-400">لا توجد</span>
                      )}
                    </div>
                  )}
                </td>
                
                {/* الإجراءات */}
                <td className="py-3 px-2 border border-gray-300 text-center print:hidden">
                  <div className="flex gap-1 justify-center">
                    {editingItem === item.id ? (
                      <>
                        <button
                          onClick={() => handleSaveItem(item.id)}
                          className="text-green-600 hover:text-green-800 p-1 rounded hover:bg-green-50"
                          title="حفظ التعديلات"
                        >
                          <Save size={16} />
                        </button>
                        
                        <button
                          onClick={() => setEditingItem(null)}
                          className="text-gray-600 hover:text-gray-800 p-1 rounded hover:bg-gray-50"
                          title="إلغاء التعديل"
                        >
                          <X size={16} />
                        </button>
                      </>
                    ) : (
                      <>
                        <button
                          onClick={() => setEditingItem(item.id)}
                          className="text-blue-600 hover:text-blue-800 p-1 rounded hover:bg-blue-50"
                          title="تعديل الصنف"
                        >
                          <Edit size={16} />
                        </button>
                        
                        <button
                          onClick={() => handleRemoveItem(item.id)}
                          className="text-red-600 hover:text-red-800 p-1 rounded hover:bg-red-50"
                          title="حذف الصنف"
                        >
                          <X size={16} />
                        </button>
                      </>
                    )}
                  </div>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
      
      {/* زر عائم لإضافة الأصناف */}
      <button
        onClick={handleAddItem}
        className="fixed bottom-6 right-6 z-50 w-14 h-14 bg-green-600 text-white rounded-full shadow-lg hover:bg-green-700 transition-all flex items-center justify-center print:hidden"
        title="إضافة صنف جديد"
      >
        <Plus size={24} />
      </button>
      
      {/* قسم تعديل المواصفات المفصل (يظهر عند التعديل) */}
      {editingItem && (
        <div className="mt-4 p-4 bg-gray-50 rounded-lg border border-gray-200 print:hidden">
          <h3 className="font-semibold mb-3 flex items-center">
            <FileText className="ml-2" size={18} />
            تفاصيل مواصفات الصنف
          </h3>
          
          {/* عرض وتعديل المواصفات الحالية */}
          <div className="space-y-3 mb-4">
            {Object.entries(tempItemData[editingItem]?.specifications || {}).map(([key, value]) => (
              <div key={key} className="flex gap-2 items-center bg-white p-2 rounded border">
                <input
                  type="text"
                  value={key}
                  onChange={(e) => {
                    const newKey = e.target.value;
                    const specs = { ...tempItemData[editingItem]?.specifications };
                    delete specs[key];
                    specs[newKey] = value;
                    
                    setTempItemData(prev => ({
                      ...prev,
                      [editingItem]: {
                        ...prev[editingItem],
                        specifications: specs
                      }
                    }));
                  }}
                  className="w-32 border border-gray-300 rounded px-2 py-1 text-sm font-medium"
                  placeholder="اسم المواصفة"
                />
                
                <span className="text-gray-500">:</span>
                
                <input
                  type="text"
                  value={value}
                  onChange={(e) => handleAddSpecification(editingItem, key, e.target.value)}
                  className="flex-1 border border-gray-300 rounded px-2 py-1 text-sm"
                  placeholder="القيمة المطلوبة"
                />
                
                <button
                  onClick={() => handleRemoveSpecification(editingItem, key)}
                  className="text-red-600 hover:text-red-800 p-1 rounded hover:bg-red-50"
                  title="حذف المواصفة"
                >
                  <X size={16} />
                </button>
              </div>
            ))}
          </div>
          
          {/* إضافة مواصفة جديدة */}
          <button
            onClick={() => {
              const newKey = prompt('اسم المواصفة الجديدة (مثل: اللون، النوع، المادة):');
              if (newKey && newKey.trim()) {
                handleAddSpecification(editingItem, newKey.trim(), '');
              }
            }}
            className="px-4 py-2 bg-blue-600 text-white rounded text-sm hover:bg-blue-700 flex items-center gap-2"
          >
            <Plus size={16} />
            إضافة مواصفة جديدة
          </button>
        </div>
      )}
      
      {/* رسالة عدم وجود أصناف */}
      {poItems.length === 0 && (
        <div className="text-center py-8 text-gray-500 bg-gray-50 rounded-lg">
          <Package className="w-12 h-12 mx-auto mb-2 text-gray-300" />
          <p className="font-medium">لا توجد أصناف مطلوبة</p>
          <p className="text-sm mt-1">اضغط على "إضافة صنف" لبدء إضافة الأصناف المطلوبة</p>
        </div>
      )}
      
      {/* نصائح للاستخدام */}
      <div className="mt-2 p-2 bg-blue-50 rounded-lg border border-blue-200 print:hidden">
        <h4 className="font-medium text-blue-800 mb-2">💡 نصائح للاستخدام:</h4>
        <ul className="text-sm text-blue-700 space-y-1">
          <li>• يمكنك البحث عن الأصناف برقم الصنف أو جزء من اسم الصنف</li>
          <li>• التكلفة التقديرية تحسب تلقائياً بالريال حسب أسعار الصرف المدخلة في جدول العروض</li>
          <li>• يمكن إضافة مواصفات متعددة لكل صنف (اللون، النوع، المادة، إلخ)</li>
          <li>• جميع التعديلات تحفظ تلقائياً في قاعدة البيانات</li>
        </ul>
      </div>
    </div>
  );
};

; ==============================================================
الكود السابع صفحة العروض المستبعدة

// purchases_alamin7-copy5\src\components\ExcludedOffersSection.tsx
; ====================================================================

import { Ban, FileMinus, AlertTriangle, DollarSign, Palette, Settings, Printer, CheckCircle } from 'lucide-react';
import React, { useEffect, useRef, useState } from 'react';
import { usePurchaseOrder } from '../context/PurchaseOrderContext';
import { ExcludedOffer } from '../types';
// توسيع واجهة ExcludedOffer لدعم الخصائص الجديدة
interface ExtendedExcludedOffer extends ExcludedOffer {
  priceReason?: string;
  colorReason?: string;
  specReasons?: string[];
}
export const ExcludedOffersSection: React.FC = () => {
  const { priceOffers, excludedOffers, setExcludedOffers, isPreliminaryPrint, poItems } = usePurchaseOrder();
  const [newReason, setNewReason] = useState('');
  const [newNotes, setNewNotes] = useState('');
  // حالات إضافية للتحكم في التعديل ومنع التكرار
  const [editingId, setEditingId] = useState<string | null>(null);
  const [editData, setEditData] = useState<Partial<ExtendedExcludedOffer>>({});
  const [processedOffers, setProcessedOffers] = useState<Set<string>>(new Set());
  const [printReasons, setPrintReasons] = useState(true); // ✅ حالة جديدة للتحكم في طباعة الأسباب
  // مرجع للحاوية لضبط الارتفاعات قبل الطباعة النهائية
  const containerRef = useRef<HTMLDivElement | null>(null);
  /**
   * دالة لضبط ارتفاع جميع حقول النص وفق المحتوى (للطباعة النهائية فقط)
   */
  const adjustTextareasHeight = () => {
    if (!containerRef.current) return;
    const areas = containerRef.current.querySelectorAll<HTMLTextAreaElement>('textarea.excluded-textarea');
    areas.forEach((ta) => {
      ta.style.height = 'auto';
      ta.style.height = ta.scrollHeight + 'px';
    });
  };
  // استمع لحدث beforeprint لضمان الضبط وقت الطباعة النهائية
  useEffect(() => {
    const before = () => {
      if (!isPreliminaryPrint) adjustTextareasHeight();
    };
    window.addEventListener('beforeprint', before);
    return () => window.removeEventListener('beforeprint', before);
  }, [isPreliminaryPrint, excludedOffers]);
  // عند أي تحديث للمحتوى في الوضع النهائي، اضبط الارتفاعات
  useEffect(() => {
    if (!isPreliminaryPrint) adjustTextareasHeight();
  }, [excludedOffers, isPreliminaryPrint]);
  /**
   * ✅ نقل أسباب عدم المطابقة تلقائياً إلى جدول العروض المستبعدة
   */
  useEffect(() => {
    const transferNonMatchingOffers = () => {
      if (!priceOffers || priceOffers.length === 0) return;
      const newExcludedOffers = [...excludedOffers];
      let hasChanges = false;
      priceOffers.forEach(offer => {
        // نقل العروض غير المطابقة والمطابقة جزئياً
        if (offer.vendor &&
          offer.result &&
          offer.result !== 'مطابق' &&
          !excludedOffers.some(excluded => excluded.vendor === offer.vendor)) {
          const autoReasons = generateAutoReasons(offer.vendor);
          const newOffer: ExtendedExcludedOffer = {
            id: `excluded-${Date.now()}-${offer.vendor}`,
            vendor: offer.vendor,
            reason: '', // يُترك فارغاً ويُدخل يدوياً فقط
            notes: '',
            priceReason: autoReasons.priceReason,
            colorReason: autoReasons.colorReason,
            specReasons: autoReasons.specReasons
          };
          newExcludedOffers.push(newOffer);
          setProcessedOffers(prev => new Set([...prev, offer.vendor]));
          hasChanges = true;
        }
      });
      if (hasChanges) {
        setExcludedOffers(newExcludedOffers);
      }
    };
    transferNonMatchingOffers();
  }, [priceOffers]);
  /**
   * دالة توليد أسباب الاستبعاد التلقائية المحسنة
   */
  const generateAutoReasons = (vendor: string) => {
    const priceOffer = priceOffers.find(offer => offer.vendor === vendor);
    if (!priceOffer) {
      return {
        priceReason: 'لا يوجد عرض سعر لهذا المورد',
        colorReason: '',
        specReasons: []
      };
    }
    const reasons: {
      priceReason: string;
      colorReason: string;
      specReasons: string[];
    } = {
      priceReason: '',
      colorReason: '',
      specReasons: []
    };
    
    // ✅ أسباب عدم المطابقة بناءً على نتيجة العرض
    if (priceOffer.result === 'غير مطابق') {
      reasons.priceReason = 'العرض غير مطابق للمواصفات المطلوبة';
    } else if (priceOffer.result === 'مطابق جزئي') {
      reasons.priceReason = 'العرض مطابق جزئياً للمواصفات';
    }
    
    // ✅ مقارنة الأسعار مع التكلفة التقديرية لكل صنف - تعديل حسب المتطلبات الجديدة
    if (priceOffer.lineItems && poItems) {
      poItems.forEach(poItem => {
        const lineItem = priceOffer.lineItems?.find(li => li.lineNumber === poItem.lineNumber);

        // التحقق من النقص في الكميات المقدمة
        if (lineItem && poItem.quantity) {
          const requiredQuantity = poItem.quantity;
          const offeredQuantity = lineItem.quantity || 0;

          if (offeredQuantity < requiredQuantity) {
            const shortage = requiredQuantity - offeredQuantity;
            reasons.specReasons.push(`الصنف ${poItem.lineNumber}: يوجد نقص في الكمية المقدمة (${shortage} وحدة من أصل ${requiredQuantity})`);
          } else if (offeredQuantity === 0) {
            reasons.specReasons.push(`الصنف ${poItem.lineNumber}: لم يتم تقديم كمية لهذا الصنف`);
          }
        }

        if (lineItem && poItem.estimatedCost) {
          const estimatedCost = poItem.estimatedCost.amount || 0;
          const offeredPrice = lineItem.unitPrice || 0;
          
          if (estimatedCost > 0 && offeredPrice > 0) {
            const difference = offeredPrice - estimatedCost;
            const percentage = (difference / estimatedCost * 100).toFixed(1);
            
            if (Math.abs(difference) > 0.01) { // تجاهل الفروقات الطفيفة
              if (difference > 0) {
                reasons.priceReason += `الصنف ${poItem.lineNumber}: سعر الوحدة المقدمة أعلى من التكلفة التقديرية بنسبة ${percentage}%\n`;
              } else {
                reasons.priceReason += `الصنف ${poItem.lineNumber}: سعر الوحدة المقدمة أقل من التكلفة التقديرية بنسبة ${Math.abs(Number(percentage))}%\n`;
              }
            }
          }
        }
      });
    }
    
    // ✅ مقارنة المواصفات المطلوبة مع المواصفات المقدمة - تعديل حسب المتطلبات الجديدة
    if (priceOffer.lineItems && poItems) {
      poItems.forEach(poItem => {
        const lineItem = priceOffer.lineItems?.find(li => li.lineNumber === poItem.lineNumber);
        
        if (poItem.specifications && lineItem?.vendorSpecifications) {
          const requiredSpecs = poItem.specifications;
          const offeredSpecs = lineItem.vendorSpecifications;
          
          // التحقق من تطابق المواصفات
          const requiredKeys = Object.keys(requiredSpecs);
          const offeredKeys = Object.keys(offeredSpecs);
          
          // التحقق من وجود جميع المواصفات المطلوبة
          const missingSpecs = requiredKeys.filter(key => !offeredKeys.includes(key));
          
          if (missingSpecs.length > 0) {
            reasons.specReasons.push(`الصنف ${poItem.lineNumber}: غير مطابق - يوجد اختلاف بين المواصفات حيث أن المطلوب (${missingSpecs.join(', ')}) والمقدم (غير مقدم)`);
          } else {
            // التحقق من تطابق قيم المواصفات
            let specsMatch = true;
            const mismatchedSpecs: string[] = [];
            
            requiredKeys.forEach(key => {
              const requiredValue = String(requiredSpecs[key]).trim();
              const offeredValue = String(offeredSpecs[key]).trim();
              
              if (requiredValue !== offeredValue) {
                specsMatch = false;
                mismatchedSpecs.push(`${key}: المطلوب (${requiredValue}) والمقدم (${offeredValue})`);
              }
            });
            
            if (!specsMatch) {
              reasons.specReasons.push(`الصنف ${poItem.lineNumber}: غير مطابق - يوجد اختلاف بين المواصفات حيث أن ${mismatchedSpecs.join(', ')}`);
            } else {
              reasons.specReasons.push(`الصنف ${poItem.lineNumber}: مطابق للمواصفات المطلوبة`);
            }
          }
        } else if (poItem.specifications && (!lineItem?.vendorSpecifications || Object.keys(lineItem.vendorSpecifications || {}).length === 0)) {
          reasons.specReasons.push(`الصنف ${poItem.lineNumber}: غير مطابق - لم يتم تقديم مواصفات`);
        }
      });
    }
    
    // ✅ أسباب سعرية إضافية
    if (priceOffer.total && priceOffer.total > 0) {
      const lowestOffer = Math.min(...priceOffers
        .filter(o => o.total && o.total > 0)
        .map(o => o.total as number));
      if (priceOffer.total > lowestOffer * 1.1) {
        const difference = ((priceOffer.total - lowestOffer) / lowestOffer * 100).toFixed(1);
        reasons.specReasons.push(`السعر الإجمالي أعلى بنسبة ${difference}% من أقل عرض`);
      }
    }
    
    return reasons;
  };
  /**
   * ✅ دالة تفريغ العروض للطباعة الأولية
   */
  const handleTransferForPrint = () => {
    let newExcludedOffers = [...excludedOffers];
    let hasChanges = false;
    
    // إضافة جميع العروض غير المطابقة
    priceOffers.forEach(offer => {
      if (offer.vendor &&
        offer.result &&
        offer.result !== 'مطابق' &&
        !newExcludedOffers.some(excluded => excluded.vendor === offer.vendor)) {
        const autoReasons = generateAutoReasons(offer.vendor);
        const newOffer: ExtendedExcludedOffer = {
          id: `excluded-${Date.now()}-${offer.vendor}`,
          vendor: offer.vendor,
          reason: '', // يُترك فارغاً ويُدخل يدوياً فقط
          notes: '',
          priceReason: autoReasons.priceReason,
          colorReason: autoReasons.colorReason,
          specReasons: autoReasons.specReasons
        };
        newExcludedOffers.push(newOffer);
        hasChanges = true;
      }
    });
    
    if (hasChanges) {
      setExcludedOffers(newExcludedOffers);
      alert('تم نقل العروض غير المطابقة إلى جدول المستبعدة استعداداً للطباعة');
    } else {
      alert('جميع العروض غير المطابقة موجودة بالفعل في جدول المستبعدة');
    }
  };
  /**
   * ✅ دالة طباعة مخصصة مع التحكم في إظهار الأسباب
   */
  // const handlePrint = () => {
  //   // حفظ حالة الطباعة الحالية
  //   const currentPrintState = printReasons;
  //   // إذا كانت طباعة أولية، تأكد من نقل جميع العروض أولاً
  //   if (isPreliminaryPrint) {
  //     handleTransferForPrint();
  //   }
  //   // الانتظار قليلاً ثم الطباعة
  //   setTimeout(() => {
  //     window.print();
  //     // استعادة حالة الطباعة بعد الانتهاء
  //     setTimeout(() => {
  //       setPrintReasons(currentPrintState);
  //     }, 1000);
  //   }, 500);
  // };

  // purchases_alamin7\src\components\ExcludedOffersSection.tsx
  // ... (بداية الكود كما هي)

  /**
   * دالة طباعة مخصصة مع التحكم في إظهار الأسباب
   * تم تعديل هذه الدالة لمعالجة مشكلة الطباعة
   */
  const handlePrint = () => {
    // حفظ حالة الطباعة الحالية
    const currentPrintState = printReasons;

    // إذا كانت طباعة أولية، تأكد من نقل جميع العروض أولاً
    if (isPreliminaryPrint) {
      handleTransferForPrint();
    }

    // الانتظار قليلاً ثم الطباعة
    setTimeout(() => {
      window.print();
      // استعادة حالة الطباعة بعد الانتهاء
      setTimeout(() => {
        setPrintReasons(currentPrintState);
      }, 1000);
    }, 500);
  };


  // handleUpdateExcludedOffer, startEdit, cancelEdit, saveEdit, handleAddExcludedOffer, handleRemoveExcludedOffer
  {/* دوال إدارة العروض المستبعدة (يجب إضافتها داخل المكون): */ }
  // دالة تحديث عرض مستبعد
  const handleUpdateExcludedOffer = (id: string, updates: Partial<ExcludedOffer>) => {
    setExcludedOffers(
      excludedOffers.map(offer =>
        offer.id === id ? { ...offer, ...updates } : offer
      )
    );
  };
  // دالة بدء تعديل عرض مستبعد
  const startEdit = (offer: ExcludedOffer) => {
    setEditingId(offer.id);
    setEditData({ ...offer });
  };
  // دالة إلغاء التعديل
  const cancelEdit = () => {
    setEditingId(null);
    setEditData({});
  };
  // دالة حفظ التعديلات
  const saveEdit = () => {
    if (editingId && editData.vendor) {
      const updatedOffers = excludedOffers.map(offer =>
        offer.id === editingId ? { ...offer, ...editData } : offer
      );
      setExcludedOffers(updatedOffers);
      setEditingId(null);
      setEditData({});
    }
  };
  // دالة إضافة عرض مستبعد جديد يدوياً
  const handleAddExcludedOffer = (vendor: string) => {
    // منع إضافة مورد مكرر
    if (excludedOffers.some(excluded => excluded.vendor === vendor)) {
      alert('هذا المورد موجود بالفعل في قائمة العروض المستبعدة');
      return;
    }
    const autoReasons = generateAutoReasons(vendor);
    const newExcludedOffer: ExtendedExcludedOffer = {
      id: `excluded-${Date.now()}`,
      vendor,
      reason: newReason || 'لم يتم الارساء على هذا المورد',
      notes: newNotes,
      priceReason: autoReasons.priceReason,
      colorReason: autoReasons.colorReason,
      specReasons: autoReasons.specReasons
    };
    setExcludedOffers([...excludedOffers, newExcludedOffer]);
    setProcessedOffers(prev => new Set([...prev, vendor]));
    setNewReason('');
    setNewNotes('');
  };


  // دالة حذف عرض مستبعد
  const handleRemoveExcludedOffer = (id: string) => {
    const offerToRemove = excludedOffers.find(offer => offer.id === id);
    if (offerToRemove) {
      setProcessedOffers(prev => {
        const newSet = new Set(prev);
        newSet.delete(offerToRemove.vendor);
        return newSet;
      });
    }
    setExcludedOffers(excludedOffers.filter(offer => offer.id !== id));
  };

  return (
    <div ref={containerRef} className="bg-white rounded-lg shadow-lg p-4 mb-4 border border-gray-200 print:mb-0 print-container">
      <div className="flex items-center justify-between mb-4 print:mb-0">
        <div className="flex items-center gap-4">
          <h2 className="text-xl font-semibold flex items-center text-gray-800">
            <Ban className="ml-2 icon" size={20} />
            العروض المستبعدة
          </h2>
          {/* ✅ زر التحكم في طباعة الأسباب */}
          <label className="flex items-center gap-2 cursor-pointer print:hidden">
            <input
              type="checkbox"
              checked={printReasons}
              onChange={(e) => setPrintReasons(e.target.checked)}
              className="form-checkbox h-4 w-4 text-blue-600 rounded"
            />
            <span className="text-sm text-gray-700">إظهار أسباب الاستبعاد التفصيلية</span>
          </label>
        </div>
        <div className="flex items-center gap-2">
          {/* ✅ زر الطباعة المخصص */}
          <button
            onClick={handlePrint}
            className="py-2 px-4 bg-blue-500 text-white rounded-md hover:bg-blue-600 transition-colors flex items-center shadow-sm print:hidden"
            title="طباعة جدول العروض المستبعدة"
          >
            <Printer size={18} className="ml-1" />
            طباعة
          </button>
          <button
            onClick={handleTransferForPrint}
            className="py-2 px-4 bg-amber-500 text-white rounded-md hover:bg-amber-600 transition-colors flex items-center shadow-sm print:hidden"
          >
            <FileMinus size={18} className="ml-1" />
            تفريغ
          </button>
        </div>
      </div>
      {excludedOffers.length === 0 ? (
        <div className="text-center py-8 text-gray-500 bg-gray-50 rounded-lg">
          <Ban className="w-12 h-12 mx-auto mb-2 text-gray-300" />
          <p className="font-medium">لا توجد عروض مستبعدة</p>
          <p className="text-sm mt-1">اضغط على "تفريغ" لنقل العروض غير المطابقة تلقائياً</p>
        </div>
      ) : (
        <div className="overflow-x-auto print:overflow-visible">
          <table className="w-full border-collapse border border-gray-300 rounded-lg overflow-hidden print:w-[100%] print:border-gray-400">
            <thead>
              <tr className="bg-gradient-to-r from-blue-600 to-blue-700 text-white print:bg-blue-600">
                <th className="py-2 px-1 text-center font-semibold border border-gray-300" style={{ width: '13%' }}>
                  مقدم العرض
                </th>
                <th className="py-2 px-1 text-center font-semibold border border-gray-300" style={{ width: '40%' }}>
                  سبب الاستبعاد العام
                </th>
                <th className="py-2 px-1 text-center font-semibold border border-gray-300" style={{ width: '40%' }}>
                  أسباب تفصيلية تلقائية
                </th>
                <th className="py-2 px-1 text-center font-semibold border border-gray-300 print:hidden" style={{ width: '7%' }}>
                  الإجراءات
                </th>
              </tr>
            </thead>
            <tbody>
              {excludedOffers
                .filter(ex => {
                  const matched = priceOffers.find(p => p.vendor === ex.vendor);
                  return !(matched && matched.result === 'مطابق');
                })
                .map((offer) => (
                  <tr key={offer.id} className="hover:bg-blue-50 transition-colors print:border-gray-300">
                    {/* مقدم العرض */}
                    <td className="py-2 px-1 border border-gray-300 font-medium text-center print:py-1 print:px-1">
                      {offer.vendor || '\u00A0\n\u00A0'} {/* ✅ سطرين فارغين إذا لم يكن هناك محتوى */}
                    </td>
                    {/* سبب الاستبعاد العام */}
                    <td className="py-2 px-1 border border-gray-300 print:py-1 print:px-1">
                      <textarea
                        value={offer.reason}
                        onChange={(e) => handleUpdateExcludedOffer(offer.id, { reason: e.target.value })}
                        className={`excluded-textarea w-full border border-gray-300 rounded-md py-1 px-1 focus:outline-none focus:ring-1 focus:ring-blue-500 resize-none print:hidden text-xs ${isPreliminaryPrint ? 'h-[2em] leading-tight' : ''}`}
                        placeholder="سبب الاستبعاد العام"
                        style={{
                          wordWrap: 'break-word',
                          whiteSpace: 'pre-wrap',
                          overflow: 'hidden',
                          minHeight: '2em',
                          lineHeight: '1.2'
                        }}
                        onInput={(e) => {
                          const target = e.target as HTMLTextAreaElement;
                          if (!isPreliminaryPrint) {
                            target.style.height = 'auto';
                            target.style.height = target.scrollHeight + 'px';
                          }
                        }}
                      />
                      <div
                        className={`hidden print:block whitespace-pre-wrap break-words text-[11px] leading-tight ${printReasons ? '' : 'invisible'}`}
                        style={{
                          minHeight: '2em',
                          lineHeight: '1.2'
                        }}
                      >
                        {offer.reason || '\u00A0'}
                      </div>
                    </td>
                    {/* أسباب تفصيلية تلقائية */}
                    <td className="py-2 px-1 border border-gray-300 print:py-1 print:px-1">
                      <div className={`space-y-1 ${printReasons ? '' : 'print:hidden'}`}>
                        {(offer as ExtendedExcludedOffer).priceReason && (
                          <div className="bg-red-50 border border-red-200 p-1 rounded text-xs">
                            <span className="font-medium text-red-800 text-xs">السعر:</span>
                            <div className="text-red-700 text-xs">{(offer as ExtendedExcludedOffer).priceReason}</div>
                          </div>
                        )}
                        {(offer as ExtendedExcludedOffer).colorReason && (
                          <div className="bg-yellow-50 border border-yellow-200 p-1 rounded text-xs">
                            <span className="font-medium text-yellow-800 text-xs">اللون:</span>
                            <div className="text-yellow-700 text-xs">{(offer as ExtendedExcludedOffer).colorReason}</div>
                          </div>
                        )}
                        {(offer as ExtendedExcludedOffer).specReasons &&
                          Array.isArray((offer as ExtendedExcludedOffer).specReasons) && (
                            <div className={`bg-blue-50 border border-blue-200 p-1 rounded ${printReasons ? 'text-[10px]' : 'print:hidden'} `}>
                              <span className="font-medium text-blue-800 text-xs">المواصفات:</span>
                              <ul className="list-disc list-inside text-blue-700 space-y-0.5 text-xs">
                                {(offer as ExtendedExcludedOffer).specReasons!.length > 0 ? (
                                  (offer as ExtendedExcludedOffer).specReasons!.map((reason: string, idx: number) => (
                                    <li key={idx} className="leading-tight text-xs">{reason}</li>
                                  ))
                                ) : (
                                  <li className="text-gray-400 italic text-xs">لا توجد أسباب تفصيلية</li>
                                )}
                              </ul>
                            </div>
                          )}
                        {!(offer as ExtendedExcludedOffer).priceReason &&
                          !(offer as ExtendedExcludedOffer).colorReason &&
                          (!(offer as ExtendedExcludedOffer).specReasons || (offer as ExtendedExcludedOffer).specReasons!.length === 0) && (
                            <div className="text-gray-400 text-xs italic">
                              {printReasons ? 'لا توجد أسباب تفصيلية' : '\u00A0'}
                            </div>
                          )}
                      </div>
                      {/* ✅ مساحة فارغة عند إخفاء الأسباب */}
                      {!printReasons && (
                        <div className="hidden print:block whitespace-pre-wrap break-words text-[10px] leading-tight"
                          style={{ minHeight: '2em', lineHeight: '1.2' }}>
                          {'\u00A0\n\u00A0'}
                        </div>
                      )}
                    </td>
                    {/* ملاحظات حقول عمود إضافية */}
                    {/* <td className="py-2 px-1 border border-gray-300 print:py-1 print:px-1">
                      <textarea
                        value={offer.notes}
                        onChange={(e) => handleUpdateExcludedOffer(offer.id, { notes: e.target.value })}
                        className={`excluded-textarea w-full border border-gray-300 rounded-md py-1 px-1 focus:outline-none focus:ring-1 focus:ring-blue-500 resize-none print:hidden text-xs ${isPreliminaryPrint ? 'h-[2em] leading-tight' : ''}`}
                        placeholder="ملاحظات إضافية"
                        style={{
                          wordWrap: 'break-word',
                          whiteSpace: 'pre-wrap',
                          overflow: 'hidden',
                          minHeight: '2em',
                          lineHeight: '1.2'
                        }}
                        onInput={(e) => {
                          const target = e.target as HTMLTextAreaElement;
                          if (!isPreliminaryPrint) {
                            target.style.height = 'auto';
                            target.style.height = target.scrollHeight + 'px';
                          }
                        }}
                      />
                      <div
                        className="hidden print:block whitespace-pre-wrap break-words text-[11px] leading-tight"
                        style={{
                          minHeight: '2em',
                          lineHeight: '1.2'
                        }}
                      >
                        {offer.notes || '\u00A0'}
                      </div>
                    </td> */}
                    {/* الإجراءات */}
                    <td className="py-2 px-1 border border-gray-300 text-center print:hidden">
                      <div className="flex gap-1 justify-center">
                        <button
                          onClick={() => startEdit(offer)}
                          className="text-blue-500 hover:text-blue-700 transition-colors px-1 py-0.5 rounded hover:bg-blue-50 text-xs"
                          title="تعديل الأسباب"
                        >
                          تعديل
                        </button>
                        <button
                          onClick={() => handleRemoveExcludedOffer(offer.id)}
                          className="text-red-500 hover:text-red-700 transition-colors px-1 py-0.5 rounded hover:bg-red-50 text-xs"
                          title="حذف من المستبعدة"
                        >
                          حذف
                        </button>
                      </div>
                    </td>
                  </tr>
                ))}
            </tbody>
          </table>
        </div>
      )}
      {/* ✅ نصائح للطباعة */}
      <div className="mt-3 p-2 bg-blue-50 rounded-lg border border-blue-200 print:hidden">
        <h4 className="font-medium text-blue-800 mb-1 text-sm">💡 تلميحات الطباعة:</h4>
        <ul className="text-xs text-blue-700 space-y-0.5">
          <li>• اختر "طباعة أسباب الاستبعاد" لإظهار/إخفاء الأسباب التفصيلية</li>
          <li>• استخدم "تفريغ" لنقل جميع العروض غير المطابقة قبل الطباعة</li>
          <li>• في الطباعة النهائية، يتم ضبط الارتفاعات تلقائياً حسب المحتوى</li>
        </ul>
      </div>
      {/* ... (بقية الأجزاء التالية نقلت كما هي) */}
      {/* قسم إضافة عرض مستبعد جديد يدوياً (يضاف قبل نهاية المكون): */}
      {/* قسم إضافة عرض مستبعد جديد يدوياً */}
      <div className="mt-4 print:hidden">
        <details className="bg-gray-50 rounded-md border border-gray-200">
          <summary className="p-3 cursor-pointer font-medium hover:bg-gray-100 transition-colors">
            إضافة عرض مستبعد جديد يدوياً
          </summary>
          <div className="p-4 border-t border-gray-200">
            <div className="grid grid-cols-1 md:grid-cols-3 gap-3">
              <div>
                <label className="block text-sm text-gray-600 mb-1 font-medium">مقدم العرض:</label>
                <select
                  className="w-full border border-gray-300 rounded-md py-2 px-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
                  onChange={(e) => e.target.value && handleAddExcludedOffer(e.target.value)}
                  value=""
                >
                  <option value="">اختر مقدم العرض</option>
                  {priceOffers
                    .filter(offer => offer.vendor && !excludedOffers.some(excluded => excluded.vendor === offer.vendor))
                    .map(offer => (
                      <option key={offer.id} value={offer.vendor}>
                        {offer.vendor}
                      </option>
                    ))}
                </select>
              </div>
              <div>
                <label className="block text-sm text-gray-600 mb-1 font-medium">سبب الاستبعاد:</label>
                <input
                  type="text"
                  value={newReason}
                  onChange={(e) => setNewReason(e.target.value)}
                  className="w-full border border-gray-300 rounded-md py-2 px-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
                  placeholder="سبب الاستبعاد العام"
                />
              </div>
              <div>
                <label className="block text-sm text-gray-600 mb-1 font-medium">ملاحظات:</label>
                <input
                  type="text"
                  value={newNotes}
                  onChange={(e) => setNewNotes(e.target.value)}
                  className="w-full border border-gray-300 rounded-md py-2 px-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
                  placeholder="ملاحظات إضافية"
                />
              </div>
            </div>
          </div>
        </details>
      </div>
      {/* 3. نافذة تعديل العرض المستبعد (يضاف قبل نهاية المكون): */}
      {/* نافذة تعديل العرض المستبعد المحسنة */}
      {editingId && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 print:hidden">
          <div className="bg-white rounded-lg shadow-xl max-w-2xl w-full max-h-[90vh] overflow-y-auto">
            <div className="p-6">
              <div className="flex items-center justify-between mb-4">
                <h3 className="text-lg font-semibold flex items-center">
                  <Ban className="ml-2" size={20} />
                  تعديل العرض المستبعد
                </h3>
                <button
                  onClick={cancelEdit}
                  className="text-gray-500 hover:text-gray-700"
                >
                  ✕
                </button>
              </div>
              <div className="space-y-4">
                {/* معلومات المورد */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">اسم المورد:</label>
                  <input
                    type="text"
                    value={editData.vendor || ''}
                    onChange={(e) => setEditData({ ...editData, vendor: e.target.value })}
                    className="w-full border border-gray-300 rounded-md py-2 px-3 focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="اسم المورد"
                  />
                </div>
                {/* سبب الاستبعاد العام */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">سبب الاستبعاد العام:</label>
                  <textarea
                    value={editData.reason || ''}
                    onChange={(e) => setEditData({ ...editData, reason: e.target.value })}
                    className="w-full border border-gray-300 rounded-md py-2 px-3 focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="سبب الاستبعاد العام"
                    rows={2}
                  />
                </div>
                {/* أسباب الاستبعاد التفصيلية التلقائية */}
                <div className="space-y-3 bg-gray-50 p-4 rounded-lg">
                  <h4 className="text-md font-medium text-gray-700 flex items-center">
                    <AlertTriangle className="ml-2" size={18} />
                    أسباب الاستبعاد التفصيلية (قابلة للتعديل)
                  </h4>
                  {/* سبب السعر */}
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1 flex items-center">
                      <DollarSign className="ml-1" size={16} />
                      السعر:
                    </label>
                    <textarea
                      value={(editData as ExtendedExcludedOffer).priceReason || ''}
                      onChange={(e) => setEditData({ ...editData, priceReason: e.target.value })}
                      className="w-full border border-gray-300 rounded-md py-2 px-3 focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="سبب الاستبعاد المتعلق بالسعر"
                      rows={2}
                    />
                  </div>
                  {/* سبب اللون */}
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1 flex items-center">
                      <Palette className="ml-1" size={16} />
                      اللون:
                    </label>
                    <textarea
                      value={(editData as ExtendedExcludedOffer).colorReason || ''}
                      onChange={(e) => setEditData({ ...editData, colorReason: e.target.value })}
                      className="w-full border border-gray-300 rounded-md py-2 px-3 focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="سبب الاستبعاد المتعلق باللون"
                      rows={2}
                    />
                  </div>
                  {/* أسباب المواصفات */}
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1 flex items-center">
                      <Settings className="ml-1" size={16} />
                      المواصفات:
                    </label>
                    <textarea
                      value={(editData as ExtendedExcludedOffer).specReasons?.join('\n') || ''}
                      onChange={(e) => setEditData({
                        ...editData,
                        specReasons: e.target.value.split('\n').filter((r: string) => r.trim() !== '')
                      })}
                      className="w-full border border-gray-300 rounded-md py-2 px-3 focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="أسباب الاستبعاد المتعلقة بالمواصفات (كل سبب في سطر منفصل)"
                      rows={3}
                    />
                    <p className="text-xs text-gray-500 mt-1">
                      💡 أدخل كل سبب في سطر منفصل
                    </p>
                  </div>
                </div>
                {/* ملاحظات إضافية */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">ملاحظات إضافية:</label>
                  <textarea
                    value={editData.notes || ''}
                    onChange={(e) => setEditData({ ...editData, notes: e.target.value })}
                    className="w-full border border-gray-300 rounded-md py-2 px-3 focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="ملاحظات إضافية أو تفسيرات"
                    rows={2}
                  />
                </div>
              </div>
              <div className="flex justify-end gap-3 mt-6">
                <button
                  onClick={cancelEdit}
                  className="px-4 py-2 bg-gray-200 text-gray-800 rounded-md hover:bg-gray-300 transition-colors"
                >
                  إلغاء
                </button>
                <button
                  onClick={saveEdit}
                  className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors"
                >
                  حفظ التعديلات
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
      {/* 4. نصائح الاستخدام (يضاف قبل نهاية المكون): */}
      {/* نصائح للاستخدام */}
      <div className="mt-2 p-3 bg-amber-50 rounded-lg border border-amber-200 print:hidden">
        <h4 className="font-medium text-amber-800 mb-2">💡 نصائح حول العروض المستبعدة:</h4>
        <ul className="text-sm text-amber-700 space-y-1">
          <li>• يتم نقل العروض غير المطابقة تلقائياً إلى هذا الجدول</li>
          <li>• يمكن تعديل الأسباب التلقائية أو إضافة أسباب إضافية</li>
          <li>• استخدم "تفريغ" لنقل جميع العروض غير المطابقة</li>
          <li>• اختر "طباعة أسباب الاستبعاد" للتحكم في العرض أثناء الطباعة</li>
        </ul>
      </div>
    </div>
  );
};


; ====================================================================
الكود الثامن قاعدة البيانات 

//purchases_alamin5-copy5\src\utils\db.ts
; ========================================================================

// src/utils/db.ts
import Dexie, { Table } from 'dexie';

// ==============================
// واجهات البيانات (Data Interfaces)
// ==============================

/**
 * واجهة بيانات عروض الأسعار في قاعدة البيانات
 * تحتوي على معلومات العرض المقدمة من الموردين
 */
interface PriceOfferData {
  id?: number;               // المفتاح الأساسي (يتم إنشاؤه تلقائياً)
  po_id: string;              // رقم طلب الشراء المرتبط بالعرض
  vendor: string;             // اسم المورد
  amount: number;             // المبلغ الأساسي قبل الضريبة
  currency: string;           // العملة (ريال، دولار، إلخ)
  exchangeRate?: number;      // سعر الصرف (اختياري للعملات الأجنبية)
  taxIncluded: boolean;       // هل العرض يشمل الضريبة
  total: number;              // الإجمالي بالعملة الأصلية
  totalInYR: number;         // الإجمالي بالريال اليمني
  totalInWords: string;       // الإجمالي كتابةً
  result?: string;            // نتيجة التقييم (مطابق، غير مطابق، مطابق جزئي)
  notes?: string;             // ملاحظات العرض
  items?: PriceOfferItem[];   // تفاصيل أصناف العرض
  commitments?: string[];     // الالتزامات المطلوبة من المورد
}

/**
 * واجهة بيانات أصناف عرض السعر في قاعدة البيانات
 * تمثل تفاصيل كل صنف في عرض السعر المقدم
 */
interface PriceOfferItem {
  id?: string;                // معرف الصنف في العرض
  itemName: string;          // اسم الصنف
  quantity: number;           // الكمية المقدمة
  unitPrice: number;         // سعر الوحدة
  totalPrice: number;        // الإجمالي للصنف
  specifications?: {           // مواصفات الصنف المطلوبة
    [key: string]: string;
  };
  vendorSpecifications?: {      // مواصفات الصنف المقدمة من المورد
    [key: string]: string;
  };
  commitments?: string[];      // الالتزامات الخاصة بالصنف
}

/**
 * واجهة بيانات العروض المستبعدة في قاعدة البيانات
 * تحتوي على معلومات الموردين الذين تم استبعادهم
 */
interface ExcludedOfferData {
  id?: number;                // المفتاح الأساسي (يتم إنشاؤه تلقائياً)
  po_id: string;              // رقم طلب الشراء المرتبط بالعرض
  vendor: string;             // اسم المورد المستبعد
  reason: string;             // سبب الاستبعاد الرئيسي
  notes: string;              // ملاحظات إضافية
  priceReason?: string;       // سبب الاستبعاد المتعلق بالسعر
  colorReason?: string;       // سبب الاستبعاد المتعلق باللون
  specReasons?: string[];      // أسباب الاستبعاد المتعلقة بالمواصفات
}

/**
 * واجهة بيانات الأصناف المطلوبة في قاعدة البيانات
 * تمثل الأصناف المطلوبة في طلب الشراء
 */
interface ItemData {
  id?: number;                // المفتاح الأساسي (يتم إنشاؤه تلقائياً)
  po_id: string;              // رقم طلب الشراء المرتبط بالصنف
  code?: string;              // رقم الصنف في الكتالوج (اختياري)
  name: string;               // اسم الصنف
  quantity: number;           // الكمية المطلوبة
  unit: string;               // وحدة القياس
  estimatedCost?: {           // التكلفة التقديرية للصنف
    amount: number;           // المبلغ التقديري
    currency: string;         // العملة
    equivalentInYR?: number; // المعادل بالريال اليمني (يحسب تلقائياً)
  };
  specifications?: {           // مواصفات الصنف المطلوبة
    [key: string]: string;
  };
}

/**
 * واجهة بيانات طلب الشراء في قاعدة البيانات
 * تمثل طلب الشراء الرئيسي وجميع البيانات المرتبطة به
 */
interface PurchaseOrderData {
  id?: number;                // المفتاح الأساسي (يتم إنشاؤه تلقائياً)
  po_number: string;           // رقم طلب الشراء (مفتاح فريد)
  transaction_number: string;  // رقم المعاملة
  requesting: string;          // الجهة الطالبة
  beneficiary: string;         // الجهة المستفيدة
  purchaseMethod: string;      // طريقة الشراء
  items_count: number;         // عدد الأصناف المطلوبة
  subject: string;             // موضوع الطلب
  financial_classification: string; // التصنيف المالي
  record_number: string;       // رقم السجل
  record_date: string;         // تاريخ السجل
  created_by: string;          // الشخص الذي أنشأ الطلب
  created_at: string;          // تاريخ الإنشاء
  updated_at: string;          // تاريخ التحديث
  items: ItemData[];           // الأصناف المطلوبة
  priceOffers: PriceOfferData[]; // عروض الأسعار
  excludedOffers: ExcludedOfferData[]; // العروض المستبعدة
  recommendation?: string;     // نص التوصية
}

// ==============================
// فئة قاعدة البيانات
// ==============================

/**
 * فئة قاعدة البيانات المحلية باستخدام Dexie (IndexedDB)
 * تدير جميع العمليات على قاعدة بيانات طلبات الشراء
 */
class PurchaseOrderDB extends Dexie {
  purchase_orders!: Table<PurchaseOrderData>;
  priceOffers!: Table<PriceOfferData>;
  excludedOffers!: Table<ExcludedOfferData>;
  items!: Table<ItemData>;
  
  constructor() {
    super('PurchaseOrderDB');
    
    // تعريف هيكل قاعدة البيانات مع الإصدار 310
    // استخدام ++id كمفتاح أساسي لجميع الجداول
    this.version(310).stores({
      purchase_orders: '++id,po_number,transaction_number,requesting,beneficiary,items_count,subject,financial_classification,record_number,record_date,created_by,created_at,updated_at,purchaseMethod',
      priceOffers: '++id,po_id,vendor,amount,currency,exchangeRate,taxIncluded,total,totalInYR,totalInWords,result',
      excludedOffers: '++id,po_id,vendor,reason,notes',
      items: '++id,po_id,name,quantity,unit'
    });
  }
}

// إنشاء مثيل قاعدة البيانات
const dexieDb = new PurchaseOrderDB();

// ==============================
// ذاكرة مؤقتة للتحسين (Cache)
// ==============================

/**
 * ذاكرة مؤقتة لتخزين نتائج العمليات المتكررة
 */
class DatabaseCache {
  private cache = new Map<string, { data: any; timestamp: number }>();
  private readonly CACHE_DURATION = 5 * 60 * 1000; // 5 دقائق

  /**
   * تخزين البيانات في الذاكرة المؤقتة
   */
  set(key: string, data: any): void {
    this.cache.set(key, {
      data,
      timestamp: Date.now()
    });
  }

  /**
   * استرجاع البيانات من الذاكرة المؤقتة
   */
  get(key: string): any | null {
    const item = this.cache.get(key);
    if (!item) return null;
    
    if (Date.now() - item.timestamp > this.CACHE_DURATION) {
      this.cache.delete(key);
      return null;
    }
    
    return item.data;
  }

  /**
   * مسح الذاكرة المؤقتة
   */
  clear(): void {
    this.cache.clear();
  }
}

const dbCache = new DatabaseCache();

// ==============================
// دوال التفاعل مع قاعدة البيانات
// ==============================

export const db = {
  /**
   * حفظ طلب الشراء في قاعدة البيانات
   * @param data بيانات طلب الشراء
   * @returns true إذا تم الحفظ بنجاح، false في حالة الفشل
   */
  async savePurchaseOrder(data: PurchaseOrderData): Promise<boolean> {
    try {
      console.log('محاولة حفظ البيانات في قاعدة البيانات:', data.po_number);
      await dexieDb.open();
      
      // استخدام معاملة لضمان تكامل البيانات
      await dexieDb.transaction('rw', [
        dexieDb.purchase_orders, 
        dexieDb.priceOffers, 
        dexieDb.excludedOffers, 
        dexieDb.items
      ], async () => {
        // البحث عن طلب الشراء الحالي باستخدام po_number
        const existingOrder = await dexieDb.purchase_orders
          .where('po_number')
          .equals(data.po_number)
          .first();
        
        // حفظ بيانات طلب الشراء
        if (existingOrder?.id) {
          // تحديث السجل الموجود
          await dexieDb.purchase_orders.update(existingOrder.id, {
            ...data,
            updated_at: new Date().toISOString()
          });
        } else {
          // إضافة سجل جديد مع التأكد من وجود created_at
          await dexieDb.purchase_orders.put({
            ...data,
            created_at: data.created_at || new Date().toISOString(),
            updated_at: new Date().toISOString()
          });
        }
        
        // حفظ الأصناف
        if (Array.isArray(data.items)) {
          // حذف الأصناف القديمة أولاً
          await dexieDb.items.where('po_id').equals(data.po_number).delete();
          
          // إضافة الأصناف الجديدة
          const itemsToSave = data.items.map((i: ItemData) => ({ ...i, po_id: data.po_number }));
          await dexieDb.items.bulkPut(itemsToSave);
        }
        
        // حفظ عروض الأسعار
        if (Array.isArray(data.priceOffers)) {
          // حذف العروض القديمة أولاً
          await dexieDb.priceOffers.where('po_id').equals(data.po_number).delete();
          
          // إضافة العروض الجديدة
          const offersToSave = data.priceOffers.map((o: PriceOfferData) => ({ ...o, po_id: data.po_number }));
          await dexieDb.priceOffers.bulkPut(offersToSave);
        }
        
        // حفظ العروض المستبعدة
        if (Array.isArray(data.excludedOffers)) {
          // حذف العروض المستبعدة القديمة أولاً
          await dexieDb.excludedOffers.where('po_id').equals(data.po_number).delete();
          
          // إضافة العروض المستبعدة الجديدة
          const excludedToSave = data.excludedOffers.map((eo: ExcludedOfferData) => ({ ...eo, po_id: data.po_number }));
          await dexieDb.excludedOffers.bulkPut(excludedToSave);
        }
      });
      
      // مسح الذاكرة المؤقتة بعد الحفظ الناجح
      dbCache.clear();
      console.log('تم حفظ البيانات بنجاح');
      return true;
    } catch (error: any) {
      console.error('خطأ في حفظ طلب الشراء:', error);
      console.error('رسالة الخطأ:', error.message);
      console.error('نوع الخطأ:', error.name);
      console.error('تفاصيل الخطأ:', error.stack);
      
      // معالجة أخطاء الإصدار والترقية
      if (error.name === 'VersionError' || error.name === 'DatabaseClosedError' || error.name === 'UpgradeError') {
        try {
          console.log('محاولة حذف قاعدة البيانات وإعادة إنشائها...');
          await dexieDb.delete();
          await dexieDb.open();
          
          // إعادة محاولة حفظ البيانات بعد إعادة إنشاء القاعدة
          return this.savePurchaseOrder(data);
        } catch (retryError: any) {
          console.error('فشلت إعادة محاولة حفظ البيانات:', retryError);
          return false;
        }
      }
      
      return false;
    }
  },

  /**
   * استرجاع طلب الشراء بناءً على رقم طلب الشراء
   * @param poNumber رقم طلب الشراء
   * @returns بيانات طلب الشراء أو null إذا لم يتم العثور عليه
   */
  async getPurchaseOrder(poNumber: string): Promise<PurchaseOrderData | null> {
    try {
      // التحقق من الذاكرة المؤقتة أولاً
      const cached = dbCache.get(`po_${poNumber}`);
      if (cached) return cached;
      
      const data = await dexieDb.purchase_orders
        .where('po_number')
        .equals(poNumber)
        .first();
      
      // تخزين النتيجة في الذاكرة المؤقتة
      if (data) dbCache.set(`po_${poNumber}`, data);
      
      return data || null;
    } catch (error: any) {
      console.error('خطأ في استرجاع طلب الشراء:', error);
      console.error('تفاصيل الخطأ:', error.stack);
      
      // معالجة أخطاء ترقية قاعدة البيانات
      if (error.name === 'UpgradeError' || error.name === 'VersionError') {
        try {
          console.log('محاولة حذف قاعدة البيانات وإعادة إنشائها بسبب تعارض في المخطط...');
          await dexieDb.delete();
          await dexieDb.open();
          console.log('تم إعادة إنشاء قاعدة البيانات بنجاح');
          
          // إعادة محاولة العملية بعد إعادة إنشاء القاعدة
          return this.getPurchaseOrder(poNumber);
        } catch (retryError: any) {
          console.error('فشلت إعادة محاولة استرجاع البيانات:', retryError);
          return null;
        }
      }
      
      return null;
    }
  },

  /**
   * استرجاع طلب الشراء بناءً على رقم المعاملة
   * @param transactionNumber رقم المعاملة
   * @returns بيانات طلب الشراء أو null إذا لم يتم العثور عليه
   */
  async getPurchaseOrderByTransaction(transactionNumber: string): Promise<PurchaseOrderData | null> {
    try {
      // التحقق من الذاكرة المؤقتة أولاً
      const cached = dbCache.get(`txn_${transactionNumber}`);
      if (cached) return cached;
      
      const data = await dexieDb.purchase_orders
        .where('transaction_number')
        .equals(transactionNumber)
        .first();
      
      // تخزين النتيجة في الذاكرة المؤقتة
      if (data) dbCache.set(`txn_${transactionNumber}`, data);
      
      return data || null;
    } catch (error: any) {
      console.error('خطأ في استرجاع طلب الشراء بناءً على رقم المعاملة:', error);
      console.error('تفاصيل الخطأ:', error.stack);
      
      // معالجة أخطاء ترقية قاعدة البيانات
      if (error.name === 'UpgradeError' || error.name === 'VersionError') {
        try {
          console.log('محاولة حذف قاعدة البيانات وإعادة إنشائها بسبب تعارض في المخطط...');
          await dexieDb.delete();
          await dexieDb.open();
          console.log('تم إعادة إنشاء قاعدة البيانات بنجاح');
          
          // إعادة محاولة العملية بعد إعادة إنشاء القاعدة
          return this.getPurchaseOrderByTransaction(transactionNumber);
        } catch (retryError: any) {
          console.error('فشلت إعادة محاولة استرجاع البيانات:', retryError);
          return null;
        }
      }
      
      return null;
    }
  },

  /**
   * استرجاع طلبات الشراء حسب نطاق الأرقام
   * @param startPO رقم طلب الشراء الأول
   * @param endPO رقم طلب الشراء الأخير
   * @returns مصفوفة من طلبات الشراء
   */
  async getPurchaseOrdersByRange(startPO: string, endPO: string): Promise<PurchaseOrderData[]> {
    try {
      // التحقق من الذاكرة المؤقتة أولاً
      const cacheKey = `range_${startPO}_${endPO}`;
      const cached = dbCache.get(cacheKey);
      if (cached) return cached;
      
      const data = await dexieDb.purchase_orders
        .where('po_number')
        .between(startPO, endPO + '\uffff')
        .toArray();
      
      // تخزين النتيجة في الذاكرة المؤقتة
      dbCache.set(cacheKey, data);
      
      return data;
    } catch (error: any) {
      console.error('خطأ في استرجاع طلبات الشراء حسب النطاق:', error);
      console.error('تفاصيل الخطأ:', error.stack);
      
      // معالجة أخطاء ترقية قاعدة البيانات
      if (error.name === 'UpgradeError' || error.name === 'VersionError') {
        try {
          console.log('محاولة حذف قاعدة البيانات وإعادة إنشائها بسبب تعارض في المخطط...');
          await dexieDb.delete();
          await dexieDb.open();
          console.log('تم إعادة إنشاء قاعدة البيانات بنجاح');
          
          // إعادة محاولة العملية بعد إعادة إنشاء القاعدة
          return this.getPurchaseOrdersByRange(startPO, endPO);
        } catch (retryError: any) {
          console.error('فشلت إعادة محاولة استرجاع البيانات:', retryError);
          return [];
        }
      }
      
      return [];
    }
  },

  /**
   * حذف طلب الشراء من قاعدة البيانات
   * @param poNumber رقم طلب الشراء
   * @returns true إذا تم الحذف بنجاح، false في حالة الفشل
   */
  async deletePurchaseOrder(poNumber: string): Promise<boolean> {
    try {
      await dexieDb.transaction('rw', [
        dexieDb.purchase_orders, 
        dexieDb.priceOffers, 
        dexieDb.excludedOffers, 
        dexieDb.items
      ], async () => {
        // البحث عن طلب الشراء وحذفه
        const orderToDelete = await dexieDb.purchase_orders
          .where('po_number')
          .equals(poNumber)
          .first();
        
        if (orderToDelete?.id) {
          await dexieDb.purchase_orders.delete(orderToDelete.id);
        }
        
        // حذف البيانات المرتبطة به
        await dexieDb.items.where('po_id').equals(poNumber).delete();
        await dexieDb.priceOffers.where('po_id').equals(poNumber).delete();
        await dexieDb.excludedOffers.where('po_id').equals(poNumber).delete();
      });
      
      // مسح الذاكرة المؤقتة بعد الحذف الناجح
      dbCache.clear();
      console.log(`تم حذف طلب الشراء ${poNumber} بنجاح`);
      return true;
    } catch (error: any) {
      console.error('خطأ في حذف طلب الشراء:', error);
      console.error('تفاصيل الخطأ:', error.stack);
      return false;
    }
  },

  /**
   * استرجاع طلبات الشراء حسب نطاق التاريخ لتقرير الخلاصة
   * @param startDate تاريخ البداية (YYYY-MM-DD)
   * @param endDate تاريخ النهاية (YYYY-MM-DD)
   * @returns مصفوفة من طلبات الشراء في النطاق المحدد
   */
  async getPurchaseOrdersByDateRange(startDate: string, endDate: string): Promise<PurchaseOrderData[]> {
    try {
      // التحقق من الذاكرة المؤقتة أولاً
      const cacheKey = `date_${startDate}_${endDate}`;
      const cached = dbCache.get(cacheKey);
      if (cached) return cached;
      
      // حدود اليوم بتوقيت UTC لضمان شمول اليوم كاملاً
      const startIso = `${startDate}T00:00:00.000Z`;
      const endIso = `${endDate}T23:59:59.999Z`;
      
      // استراتيجية البحث المتعددة المراحل لتحسين الأداء
      try {
        // أولاً: البحث في created_at إذا كان موجوداً (مفهرس)
        const viaCreatedAt = await dexieDb.purchase_orders
          .where('created_at')
          .between(startIso, endIso)
          .toArray();
        
        if (viaCreatedAt.length > 0) {
          dbCache.set(cacheKey, viaCreatedAt);
          return viaCreatedAt;
        }
      } catch (e1) {
        console.log('البحث عبر created_at لم ينجح:', e1.message);
      }
      
      try {
        // ثانياً: البحث في record_date إذا كان موجوداً
        const viaRecordDate = await dexieDb.purchase_orders
          .where('record_date')
          .between(startDate, endDate)
          .toArray();
        
        if (viaRecordDate.length > 0) {
          dbCache.set(cacheKey, viaRecordDate);
          return viaRecordDate;
        }
      } catch (e2) {
        console.log('البحث عبر record_date لم ينجح:', e2.message);
      }
      
      // ثالثاً: البحث عبر جميع السجلات والتصفية محلياً
      console.log('استخدام البحث المحلي للنطاق الزمني...');
      const allOrders = await dexieDb.purchase_orders.toArray();
      const filteredOrders = allOrders.filter((order: any) => {
        const orderDate = order.record_date || order.created_at?.split('T')[0];
        return orderDate && orderDate >= startDate && orderDate <= endDate;
      });
      
      dbCache.set(cacheKey, filteredOrders);
      return filteredOrders;
    } catch (error: any) {
      console.error('خطأ في استرجاع طلبات الشراء حسب نطاق التاريخ:', error);
      console.error('تفاصيل الخطأ:', error.stack);
      
      // معالجة أخطاء ترقية قاعدة البيانات
      if (error.name === 'UpgradeError' || error.name === 'VersionError') {
        try {
          console.log('محاولة حذف قاعدة البيانات وإعادة إنشائها بسبب تعارض في المخطط...');
          await dexieDb.delete();
          await dexieDb.open();
          console.log('تم إعادة إنشاء قاعدة البيانات بنجاح');
          
          // إعادة محاولة العملية بعد إعادة إنشاء القاعدة
          return this.getPurchaseOrdersByDateRange(startDate, endDate);
        } catch (retryError: any) {
          console.error('فشلت إعادة محاولة استرجاع البيانات:', retryError);
          return [];
        }
      }
      
      return [];
    }
  },

  /**
   * استرجاع جميع طلبات الشراء
   * @returns مصفوفة من جميع طلبات الشراء
   */
  async getAllPurchaseOrders(): Promise<PurchaseOrderData[]> {
    try {
      // التحقق من الذاكرة المؤقتة أولاً
      const cached = dbCache.get('all_orders');
      if (cached) return cached;
      
      const data = await dexieDb.purchase_orders.toArray();
      
      // تخزين النتيجة في الذاكرة المؤقتة
      dbCache.set('all_orders', data);
      
      return data;
    } catch (error: any) {
      console.error('خطأ في استرجاع جميع طلبات الشراء:', error);
      console.error('تفاصيل الخطأ:', error.stack);
      
      // معالجة أخطاء ترقية قاعدة البيانات
      if (error.name === 'UpgradeError' || error.name === 'VersionError') {
        try {
          console.log('محاولة حذف قاعدة البيانات وإعادة إنشائها بسبب تعارض في المخطط...');
          await dexieDb.delete();
          await dexieDb.open();
          console.log('تم إعادة إنشاء قاعدة البيانات بنجاح');
          
          // إعادة محاولة العملية بعد إعادة إنشاء القاعدة
          return this.getAllPurchaseOrders();
        } catch (retryError: any) {
          console.error('فشلت إعادة محاولة استرجاع البيانات:', retryError);
          return [];
        }
      }
      
      return [];
    }
  },

  /**
   * استرجاع طلب شراء مع جميع البيانات المرتبطة به
   * @param poNumber رقم طلب الشراء
   * @returns كائن يحتوي على بيانات طلب الشراء والعروض المرتبطة به
   */
  async getPurchaseOrderWithDetails(poNumber: string): Promise<{
    purchaseOrder: PurchaseOrderData | null;
    items: ItemData[];
    priceOffers: PriceOfferData[];
    excludedOffers: ExcludedOfferData[];
  }> {
    try {
      // التحقق من الذاكرة المؤقتة أولاً
      const cacheKey = `details_${poNumber}`;
      const cached = dbCache.get(cacheKey);
      if (cached) return cached;
      
      // استخدام Promise.all لاسترجاع البيانات بشكل متوازي
      const [purchaseOrder, items, priceOffers, excludedOffers] = await Promise.all([
        dexieDb.purchase_orders.where('po_number').equals(poNumber).first(),
        dexieDb.items.where('po_id').equals(poNumber).toArray(),
        dexieDb.priceOffers.where('po_id').equals(poNumber).toArray(),
        dexieDb.excludedOffers.where('po_id').equals(poNumber).toArray()
      ]);
      
      const result = {
        purchaseOrder: purchaseOrder || null,
        items,
        priceOffers,
        excludedOffers
      };
      
      // تخزين النتيجة في الذاكرة المؤقتة
      dbCache.set(cacheKey, result);
      
      return result;
    } catch (error: any) {
      console.error('خطأ في استرجاع طلب الشراء مع تفاصيله:', error);
      console.error('تفاصيل الخطأ:', error.stack);
      
      // معالجة أخطاء ترقية قاعدة البيانات
      if (error.name === 'UpgradeError' || error.name === 'VersionError') {
        try {
          console.log('محاولة حذف قاعدة البيانات وإعادة إنشائها بسبب تعارض في المخطط...');
          await dexieDb.delete();
          await dexieDb.open();
          console.log('تم إعادة إنشاء قاعدة البيانات بنجاح');
          
          // إعادة محاولة العملية بعد إعادة إنشاء القاعدة
          return this.getPurchaseOrderWithDetails(poNumber);
        } catch (retryError: any) {
          console.error('فشلت إعادة محاولة استرجاع البيانات:', retryError);
          return {
            purchaseOrder: null,
            items: [],
            priceOffers: [],
            excludedOffers: []
          };
        }
      }
      
      return {
        purchaseOrder: null,
        items: [],
        priceOffers: [],
        excludedOffers: []
      };
    }
  },

  /**
   * إنشاء نسخة احتياطية من قاعدة البيانات
   * @returns كائن JSON يحتوي على جميع البيانات
   */
  async backupDatabase(): Promise<string> {
    try {
      console.log('بدء إنشاء نسخة احتياطية من قاعدة البيانات...');
      
      // استخدام Promise.all لتحسين الأداء
      const [purchaseOrders, items, priceOffers, excludedOffers] = await Promise.all([
        dexieDb.purchase_orders.toArray(),
        dexieDb.items.toArray(),
        dexieDb.priceOffers.toArray(),
        dexieDb.excludedOffers.toArray()
      ]);
      
      const backup = {
        purchaseOrders,
        items,
        priceOffers,
        excludedOffers,
        timestamp: new Date().toISOString(),
        version: 310,
        metadata: {
          totalPurchaseOrders: purchaseOrders.length,
          totalItems: items.length,
          totalPriceOffers: priceOffers.length,
          totalExcludedOffers: excludedOffers.length
        }
      };
      
      console.log('تم إنشاء نسخة احتياطية بنجاح');
      return JSON.stringify(backup);
    } catch (error: any) {
      console.error('خطأ في إنشاء نسخة احتياطية من قاعدة البيانات:', error);
      console.error('تفاصيل الخطأ:', error.stack);
      throw error;
    }
  },

  /**
   * استعادة قاعدة البيانات من نسخة احتياطية
   * @param backupData بيانات النسخة الاحتياطية
   * @returns true إذا تمت الاستعادة بنجاح، false في حالة الفشل
   */
  async restoreDatabase(backupData: string): Promise<boolean> {
    try {
      console.log('بدء استعادة قاعدة البيانات من النسخة الاحتياطية...');
      
      const backup = JSON.parse(backupData);
      
      // التحقق من صحة بيانات النسخة الاحتياطية
      if (!backup.purchaseOrders || !backup.priceOffers || !backup.excludedOffers || !backup.items) {
        throw new Error('بيانات النسخة الاحتياطية غير صالحة: بعض الجداول مفقودة');
      }
      
      // التحقق من الإصدار
      if (backup.version && backup.version > 310) {
        throw new Error(`إصدار النسخة الاحتياطية (${backup.version}) غير مدعوم. الحد الأقصى هو 310`);
      }
      
      // حذف البيانات الحالية
      await dexieDb.transaction('rw', [
        dexieDb.purchase_orders, 
        dexieDb.items, 
        dexieDb.priceOffers, 
        dexieDb.excludedOffers
      ], async () => {
        await dexieDb.purchase_orders.clear();
        await dexieDb.items.clear();
        await dexieDb.priceOffers.clear();
        await dexieDb.excludedOffers.clear();
        
        // استعادة البيانات من النسخة الاحتياطية
        await dexieDb.purchase_orders.bulkPut(backup.purchaseOrders);
        await dexieDb.items.bulkPut(backup.items);
        await dexieDb.priceOffers.bulkPut(backup.priceOffers);
        await dexieDb.excludedOffers.bulkPut(backup.excludedOffers);
      });
      
      // مسح الذاكرة المؤقتة بعد الاستعادة الناجحة
      dbCache.clear();
      console.log('تم استعادة قاعدة البيانات بنجاح');
      console.log('الإحصائيات المستعادة:', backup.metadata);
      
      return true;
    } catch (error: any) {
      console.error('خطأ في استعادة قاعدة البيانات:', error);
      console.error('تفاصيل الخطأ:', error.stack);
      return false;
    }
  },

  /**
   * حذف قاعدة البيانات بالكامل وإعادة إنشائها
   * @returns true إذا تمت إعادة التعيين بنجاح، false في حالة الفشل
   */
  async resetDatabase(): Promise<boolean> {
    try {
      console.log('محاولة حذف قاعدة البيانات الحالية...');
      await dexieDb.delete();
      console.log('تم حذف قاعدة البيانات بنجاح');
      
      // إعادة فتح قاعدة البيانات
      await dexieDb.open();
      console.log('تم إعادة فتح قاعدة البيانات بنجاح');
      
      // مسح الذاكرة المؤقتة
      dbCache.clear();
      
      return true;
    } catch (error: any) {
      console.error('فشل في إعادة تعيين قاعدة البيانات:', error);
      console.error('تفاصيل الخطأ:', error.stack);
      return false;
    }
  },

  /**
   * جلب جميع طلبات الشراء (للتصدير والتقارير)
   * هذه الدالة مضافة لتحقيق التوافق مع مكونات التقارير
   * @returns مصفوفة من جميع طلبات الشراء
   */
  async listAllPurchaseOrders(): Promise<PurchaseOrderData[]> {
    return this.getAllPurchaseOrders();
  },

  /**
   * التحقق من وجود طلب شراء بناءً على رقم الطلب ورقم المعاملة
   * @param poNumber رقم طلب الشراء
   * @param transactionNumber رقم المعاملة
   * @returns كائن يحتوي على معلومات حول وجود البيانات
   */
  async checkDuplicatePurchaseOrder(poNumber: string, transactionNumber: string): Promise<{
    dataExists: boolean;
    isDuplicate: boolean;
    message: string;
    details?: {
      existingByPO?: boolean;
      existingByTransaction?: boolean;
    };
  }> {
    try {
      console.log(`التحقق من التكرار: PO=${poNumber}, Transaction=${transactionNumber}`);
      
      // استخدام Promise.all للتحقق الموازي
      const [existingByPO, existingByTransaction] = await Promise.all([
        this.getPurchaseOrder(poNumber),
        this.getPurchaseOrderByTransaction(transactionNumber)
      ]);
      
      if (existingByPO && existingByTransaction) {
        return {
          dataExists: true,
          isDuplicate: true,
          message: 'يوجد بالفعل طلب شراء بنفس رقم الطلب ورقم المعاملة',
          details: {
            existingByPO: true,
            existingByTransaction: true
          }
        };
      } else if (existingByPO) {
        return {
          dataExists: true,
          isDuplicate: false,
          message: 'يوجد بالفعل طلب شراء بنفس رقم الطلب ولكن برقم معاملة مختلف',
          details: {
            existingByPO: true,
            existingByTransaction: false
          }
        };
      } else if (existingByTransaction) {
        return {
          dataExists: true,
          isDuplicate: false,
          message: 'يوجد بالفعل طلب شراء بنفس رقم المعاملة ولكن برقم طلب مختلف',
          details: {
            existingByPO: false,
            existingByTransaction: true
          }
        };
      }
      
      return {
        dataExists: false,
        isDuplicate: false,
        message: 'لا توجد بيانات مكررة'
      };
    } catch (error: any) {
      console.error('خطأ في التحقق من التكرار:', error);
      console.error('تفاصيل الخطأ:', error.stack);
      
      return {
        dataExists: false,
        isDuplicate: false,
        message: 'حدث خطأ أثناء التحقق من التكرار'
      };
    }
  },

  /**
   * صيانة قاعدة البيانات (إعادة بناء الفهارس)
   * @returns true إذا تمت الصيانة بنجاح
   */
  async maintainDatabase(): Promise<boolean> {
    try {
      console.log('بدء صيانة قاعدة البيانات...');
      
      // التحقق من وجود مشاكل في الفهارس
      const testCount = await dexieDb.purchase_orders.count();
      console.log(`عدد السجلات الموجودة: ${testCount}`);
      
      // إعادة بناء الفهارس إذا لزم الأمر
      await dexieDb.close();
      await dexieDb.open();
      
      console.log('تمت صيانة قاعدة البيانات بنجاح');
      return true;
    } catch (error: any) {
      console.error('خطأ في صيانة قاعدة البيانات:', error);
      console.error('تفاصيل الخطأ:', error.stack);
      
      // محاولة إصلاح عن طريق إعادة التعيين
      try {
        console.log('محاولة إصلاح قاعدة البيانات عن طريق إعادة التعيين...');
        return this.resetDatabase();
      } catch (resetError) {
        console.error('فشل إصلاح قاعدة البيانات:', resetError);
        return false;
      }
    }
  },

  /**
   * الحصول على إحصائيات قاعدة البيانات
   * @returns إحصائيات حول حجم البيانات المخزنة
   */
  async getDatabaseStats(): Promise<{
    purchaseOrders: number;
    items: number;
    priceOffers: number;
    excludedOffers: number;
    lastBackup?: string;
  }> {
    try {
      const [purchaseOrders, items, priceOffers, excludedOffers] = await Promise.all([
        dexieDb.purchase_orders.count(),
        dexieDb.items.count(),
        dexieDb.priceOffers.count(),
        dexieDb.excludedOffers.count()
      ]);
      
      // الحصول على تاريخ آخر نسخة احتياطية
      let lastBackup: string | undefined;
      try {
        const backupData = await this.backupDatabase();
        const backup = JSON.parse(backupData);
        lastBackup = backup.timestamp;
      } catch {
        // تجاهل خطأ النسخ الاحتياطي
      }
      
      return {
        purchaseOrders,
        items,
        priceOffers,
        excludedOffers,
        lastBackup
      };
    } catch (error: any) {
      console.error('خطأ في الحصول على إحصائيات قاعدة البيانات:', error);
      return {
        purchaseOrders: 0,
        items: 0,
        priceOffers: 0,
        excludedOffers: 0
      };
    }
  }
};

// ==============================
// معالجة أخطاء غير متوقعة (Global Error Handlers)
// ==============================

/**
 * معالج أخطاء قاعدة البيانات غير المعالجة
 */
window.addEventListener('unhandledrejection', (event) => {
  const error = event.reason as Error;
  
  if (error.name === 'QuotaExceededError') {
    console.error('خطأ: مساحة التخزين ممتلية');
    alert('مساحة التخزين ممتلئة. يرجى مسح بعض البيانات أو زيادة مساحة التخزين.');
  } else if (error.name === 'InvalidStateError') {
    console.error('خطأ: حالة قاعدة البيانات غير صالحة');
    alert('حدث خطأ في قاعدة البيانات. سيتم إعادة تعيينها تلقائياً.');
    db.resetDatabase();
  } else {
    console.error('خطأ غير معالج في قاعدة البيانات:', error);
  }
});

// ==============================
// تصدير الوحدة النمطذجية (ES Module)
// ==============================

export default db;

; ======================================================================================
الكود التاسع صفحة numberToWords.ts

// purchases_alamin7\src\utils\numberToWords.ts
; =========================================================================================
// الأرقام العربية من 1 إلى 19
const arabicOnes = [
  '', 'واحد', 'اثنان', 'ثلاثة', 'أربعة', 'خمسة', 
  'ستة', 'سبعة', 'ثمانية', 'تسعة', 'عشرة', 
  'أحد عشر', 'اثنا عشر', 'ثلاثة عشر', 'أربعة عشر', 'خمسة عشر', 
  'ستة عشر', 'سبعة عشر', 'ثمانية عشر', 'تسعة عشر'
];

// العشرات من 20 إلى 90
const arabicTens = [
  '', '', 'عشرون', 'ثلاثون', 'أربعون', 'خمسون', 
  'ستون', 'سبعون', 'ثمانون', 'تسعون'
];

// المئات من 100 إلى 900
const arabicHundreds = [
  '', 'مائة', 'مائتان', 'ثلاثمائة', 'أربعمائة', 'خمسمائة', 
  'ستمائة', 'سبعمائة', 'ثمانمائة', 'تسعمائة'
];

// مجموعات الأرقام (آلاف، ملايين، إلخ)
const arabicGroups = [
  '', 'ألف', 'مليون', 'مليار', 'تريليون'
];

// أسماء العملات الفرعية
const subCurrencyNames = {
  'ريال': 'فلس',
  'دولار': 'سنت',
  'ريال سعودي': 'هلله',
  'يورو': 'سنت'
};

/**
 * تنسيق الأرقام مع فواصل الآلاف
 * @param number الرقم المراد تنسيقه
 * @returns الرقم مع فواصل الآلاف
 */
export function formatNumberWithCommas(number: number): string {
  if (number === null || number === undefined || isNaN(number as any)) return '';
  const rounded = Math.round((Number(number) + Number.EPSILON) * 100) / 100; // تقريب إلى منزلتين
  return rounded.toLocaleString('en-US', {
    minimumFractionDigits: 2,
    maximumFractionDigits: 2
  });
}

// تنسيق رقم خام إلى منزلتين عشريتين بدون فواصل (للاستخدام في حقول الإدخال)
export function toFixed2Raw(value: string | number): string {
  const num = typeof value === 'string' ? Number(value.replace(/,/g, '')) : Number(value);
  if (isNaN(num)) return '';
  return (Math.round((num + Number.EPSILON) * 100) / 100).toFixed(2);
}

/**
 * تحويل الأرقام إلى كلمات عربية
 * @param number الرقم المراد تحويله
 * @param currency العملة (ريال، دولار، ريال سعودي، يورو)
 * @returns النص العربي للرقم
 */
export function convertNumberToArabicWords(number: number, currency: string = 'ريال'): string {
  if (number === 0) return `صفر ${currency}`;
  
  // تنسيق الرقم ليحتوي على منزلتين عشريتين بالضبط
  const formattedNum = number.toFixed(2);
  const [integerPart, decimalPart] = formattedNum.split('.');
  
  let result = '';
  let groupCount = 0;
  const groups = [];
  
  // معالجة مجموعات من 3 أرقام من اليمين إلى اليسار
  for (let i = integerPart.length; i > 0; i -= 3) {
    const start = Math.max(0, i - 3);
    const groupValue = parseInt(integerPart.substring(start, i));
    
    if (groupValue > 0) {
      const groupName = arabicGroups[groupCount];
      groups.push(`${convertGroupToArabicWords(groupValue)} ${groupName}`.trim());
    }
    
    groupCount++;
  }
  
  // ربط المجموعات بحرف "و"
  if (groups.length > 1) {
    result = groups.reverse().join(' و ');
  } else if (groups.length === 1) {
    result = groups[0];
  }
  
  // إضافة العملة
  result = result.trim() + ` ${currency}`;
  
  // إضافة الجزء العشري إذا لم يكن صفراً
  if (parseInt(decimalPart) > 0) {
    const subCurrency = subCurrencyNames[currency as keyof typeof subCurrencyNames] || 'فلس';
    result += ` و ${convertGroupToArabicWords(parseInt(decimalPart))} ${subCurrency}`;
  }
  
  return result.trim();
}

/**
 * تحويل مجموعة من الأرقام (أقل من 1000) إلى كلمات عربية
 * @param number الرقم (أقل من 1000)
 * @returns النص العربي للرقم
 */
function convertGroupToArabicWords(number: number): string {
  if (number === 0) return '';
  if (number < 20) return arabicOnes[number];
  
  if (number < 100) {
    const ones = number % 10;
    const tens = Math.floor(number / 10);
    
    if (ones === 0) {
      return arabicTens[tens];
    } else {
      return `${arabicOnes[ones]} و ${arabicTens[tens]}`;
    }
  }
  
  const hundreds = Math.floor(number / 100);
  const remainder = number % 100;
  
  if (remainder === 0) {
    return arabicHundreds[hundreds];
  } else {
    return `${arabicHundreds[hundreds]} و ${convertGroupToArabicWords(remainder)}`;
  }
}

; ======================================================================================
الكود العاشر صفحة excel.ts
// purchases_alamin7-copy5\src\utils\excel.ts
; =========================================================================================
import { read, utils } from 'xlsx';

// كاش داخلي لملف أصناف النظام (items.xlsx)
let itemsCatalogCache: { code: string; name: string }[] | null = null;
let itemsCatalogLoading: Promise<{ code: string; name: string }[] | null> | null = null;

export const excelUtils = {
  /**
   * قراءة ملف Excel وتحويله إلى JSON
   * @param file ملف Excel
   * @returns البيانات في صورة JSON
   */
  async readExcelFile(file: File) {
    try {
      const data = await file.arrayBuffer();
      const workbook = read(data);
      const worksheet = workbook.Sheets[workbook.SheetNames[0]];
      const jsonData = utils.sheet_to_json(worksheet, { raw: false });

      // التحقق من وجود عمود الرقم
      if (!jsonData[0] || !('الرقم' in jsonData[0])) {
        throw new Error('لم يتم العثور على عمود الرقم في الملف');
      }

      return jsonData;
    } catch (error) {
      throw error;
    }
  },

  /**
   * استخراج بيانات طلب شراء محدد من البيانات المستوردة
   * @param data البيانات المستوردة من Excel
   * @param poNumber رقم طلب الشراء المطلوب
   * @returns بيانات طلب الشراء
   */
  extractPurchaseOrder(data: any[], poNumber: string) {
    // تحويل رقم طلب الشراء إلى نص للمقارنة
    const searchNumber = poNumber.toString().trim();
    
    // البحث عن جميع الأسطر التي تحتوي على رقم طلب الشراء
    const matchingRows = data.filter(row => {
      const rowNumber = row['الرقم']?.toString().trim();
      return rowNumber === searchNumber;
    });

    if (matchingRows.length === 0) {
      throw new Error('لم يتم العثور على طلب الشراء في الملف');
    }

    // تجميع البيانات مع استيراد رقم السطر من الملف
    const items = matchingRows.map((row, index) => ({
      id: `item-${index}`,
      name: row['البيان'] || '',
      quantity: parseFloat(row['الكمية']) || 0,
      unit: row['وحدة القياس'] || '',
      selected: true, // تحديد جميع الأصناف افتراضياً
      lineNumber: row['السطر'] || row['رقم السطر'] || (index + 1) // استيراد رقم السطر من الملف أو ترقيم تلقائي كبديل
    }));

    return {
      po_number: searchNumber,
      beneficiary: matchingRows[0]['الجهة المستفيدة'] || '',
      transaction_number: matchingRows[0]['رقم المعاملة'] || '',
      purchaseMethod: matchingRows[0]['طريقة الشراء'] || '',
      items: items
    };
  },

  /**
   * قراءة ملف Excel مباشرة من مسار على القرص (لبيئة Electron فقط)
   * @param filePath المسار الكامل للملف
   */
  async readExcelFromPath(filePath: string) {
    try {
      // في Electron مع تمكين nodeIntegration يمكن استخدام require من الواجهة
      const fs = (window as any)?.require ? (window as any).require('fs') : null;
      if (!fs) {
        throw new Error('قراءة الملفات المباشرة غير مدعومة في هذا الوضع. استخدم اختيار الملف يدوياً.');
      }
      const data: Buffer = fs.readFileSync(filePath);
      const workbook = read(data);
      const worksheet = workbook.Sheets[workbook.SheetNames[0]];
      const jsonData = utils.sheet_to_json(worksheet, { raw: false });

      return jsonData as any[];
    } catch (error) {
      throw error;
    }
  },

  /**
   * تحميل كتالوج الأصناف من ملف items.xlsx داخل مجلد electron مع كاش داخلي
   * يدعم الوضعين: التطوير والإنتاج (Packaged).
   * يعتمد على عمودين: "رقم الصنف" و"اسم الصنف".
   */
  async loadItemsCatalogFromApp(): Promise<{ code: string; name: string }[] | null> {
    try {
      if (itemsCatalogCache) return itemsCatalogCache;
      if (itemsCatalogLoading) return itemsCatalogLoading;

      const nodeReq = (window as any)?.require;
      if (!nodeReq) {
        console.warn('nodeIntegration غير مفعّل. لن يمكن تحميل ملف الأصناف مباشرة.');
        return null;
      }
      const path = nodeReq('path');
      const processRef = (window as any).process;

      // مسارات مرشحة: dev و production
      const candidates: string[] = [];
      const cwd = processRef?.cwd?.() || '';
      const resourcesPath = processRef?.resourcesPath || '';

      if (cwd) {
        candidates.push(path.join(cwd, 'electron', 'items.xlsx'));
      }
      if (resourcesPath) {
        candidates.push(path.join(resourcesPath, 'electron', 'items.xlsx'));
      }

      // أول مسار صالح
      let rows: any[] | null = null;
      for (const p of candidates) {
        try {
          const data = await excelUtils.readExcelFromPath(p);
          rows = data;
          break;
        } catch {
          // جرّب المرشح التالي
        }
      }

      if (!rows || !rows.length) {
        console.warn('تعذر تحميل items.xlsx من المسارات المتوقعة:', candidates);
        return null;
      }

      // تحويل للأزواج code/name وفق الأعمدة المتوقعة
      const mapped = rows.map(r => ({
        code: (r['رقم الصنف'] || '').toString().trim(),
        name: (r['اسم الصنف'] || '').toString().trim(),
      })).filter(r => r.code && r.name);

      // إزالة التكرارات بالإبقاء على أول ظهور
      const seen = new Set<string>();
      const unique: { code: string; name: string }[] = [];
      for (const r of mapped) {
        if (!seen.has(r.code)) {
          seen.add(r.code);
          unique.push(r);
        }
      }

      itemsCatalogCache = unique;
      return unique;
    } catch (e) {
      console.warn('خطأ أثناء تحميل كتالوج الأصناف:', e);
      return null;
    }
  },

  /**
   * إرجاع اسم الصنف حسب الرمز باستخدام الكاش. يقوم بتحميل الملف أول مرة تلقائياً.
   */
  // دالة جلب الصنف بالرمز
  async getItemNameByCode(code: string): Promise<string | undefined> {
    if (!code || !code.trim()) return undefined;
    if (!itemsCatalogCache) {
      await excelUtils.loadItemsCatalogFromApp();
    }
    const c = code.trim();
    const found = itemsCatalogCache?.find(x => x.code === c);
    return found?.name || undefined;
  }
};

; ==============================================================
الكود الحادي عشر صفحة validation
// دوال التحقق من صحة البيانات
// src/utils/validation.ts
; ==================================================================
/**
 * دوال التحقق من صحة البيانات
 * تحتوي على قواعد التحقق المختلفة للحقول
 */

// التحقق من رقم طلب الشراء
export const validatePONumber = (poNumber: string): { isValid: boolean; message: string } => {
  if (!poNumber || poNumber.trim() === '') {
    return { isValid: false, message: 'رقم طلب الشراء مطلوب' };
  }
  
  if (poNumber.length < 3) {
    return { isValid: false, message: 'رقم طلب الشراء يجب أن يكون 3 أحرف على الأقل' };
  }
  
  return { isValid: true, message: '' };
};

// التحقق من رقم المعاملة
export const validateTransactionNumber = (transactionNumber: string): { isValid: boolean; message: string } => {
  if (!transactionNumber || transactionNumber.trim() === '') {
    return { isValid: false, message: 'رقم المعاملة مطلوب' };
  }
  
  // التحقق من أن الرقم يحتوي على أرقام وشرطات فقط
  const pattern = /^[0-9-]+$/;
  if (!pattern.test(transactionNumber)) {
    return { isValid: false, message: 'رقم المعاملة يجب أن يحتوي على أرقام وشرطات فقط' };
  }
  
  return { isValid: true, message: '' };
};

// التحقق من المبلغ
export const validateAmount = (amount: number): { isValid: boolean; message: string } => {
  if (!amount || amount <= 0) {
    return { isValid: false, message: 'المبلغ يجب أن يكون أكبر من صفر' };
  }
  
  if (amount > 999999999) {
    return { isValid: false, message: 'المبلغ كبير جداً' };
  }
  
  return { isValid: true, message: '' };
};

// التحقق من اسم المورد
export const validateVendorName = (vendorName: string): { isValid: boolean; message: string } => {
  if (!vendorName || vendorName.trim() === '') {
    return { isValid: false, message: 'اسم المورد مطلوب' };
  }
  
  if (vendorName.length < 2) {
    return { isValid: false, message: 'اسم المورد يجب أن يكون حرفين على الأقل' };
  }
  
  return { isValid: true, message: '' };
};

// التحقق من سعر الصرف
export const validateExchangeRate = (rate: number, currency: string): { isValid: boolean; message: string } => {
  if (currency === 'ريال') {
    return { isValid: true, message: '' };
  }
  
  if (!rate || rate <= 0) {
    return { isValid: false, message: 'سعر الصرف مطلوب للعملات الأجنبية' };
  }
  
  if (rate > 10000) {
    return { isValid: false, message: 'سعر الصرف مرتفع جداً' };
  }
  
  return { isValid: true, message: '' };
};

// التحقق الشامل من العرض
export const validatePriceOffer = (offer: any): { isValid: boolean; errors: string[] } => {
  const errors: string[] = [];
  
  const vendorValidation = validateVendorName(offer.vendor);
  if (!vendorValidation.isValid) {
    errors.push(vendorValidation.message);
  }
  
  const amountValidation = validateAmount(offer.amount);
  if (!amountValidation.isValid) {
    errors.push(amountValidation.message);
  }
  
  if (!offer.currency) {
    errors.push('العملة مطلوبة');
  }
  
  const exchangeValidation = validateExchangeRate(offer.exchangeRate, offer.currency);
  if (!exchangeValidation.isValid) {
    errors.push(exchangeValidation.message);
  }
  
  if (offer.taxIncluded === undefined || offer.taxIncluded === null) {
    errors.push('حالة الضرائب مطلوبة');
  }
  
  return {
    isValid: errors.length === 0,
    errors
  };
};

/**
 * التحقق من تطابق إجمالي العرض مع إجمالي أسعار الأصناف
 */
export const validateOfferAmountConsistency = (
  offerTotal: number, 
  lineItemsTotal: number, 
  tolerance: number = 1
): { isConsistent: boolean; difference: number; message: string } => {
  const difference = Math.abs(offerTotal - lineItemsTotal);
  const isConsistent = difference < tolerance;
  
  return {
    isConsistent,
    difference,
    message: isConsistent 
      ? 'المبالغ متطابقة' 
      : `يوجد فارق قدره ${difference.toFixed(2)} بين إجمالي العرض وإجمالي أسعار الأصناف`
  };
};

/**
 * التحقق من اكتمال بيانات الترسية
 */
export const validateAwardedItems = (lineItems: any[]): { isValid: boolean; errors: string[] } => {
  const errors: string[] = [];
  
  const awardedItems = lineItems.filter(item => item.awarded || (item.awardedQty || 0) > 0);
  
  if (awardedItems.length === 0) {
    errors.push('يجب تحديد الأصناف المرسى عليها');
  }
  
  awardedItems.forEach(item => {
    if (!item.awardedQty || item.awardedQty <= 0) {
      errors.push(`يجب تحديد كمية الترسية للسطر ${item.lineNumber}`);
    }
    
    if (item.awardedQty > item.requestedQty) {
      errors.push(`كمية الترسية للسطر ${item.lineNumber} تتجاوز الكمية المطلوبة`);
    }
  });
  
  return {
    isValid: errors.length === 0,
    errors
  };
};